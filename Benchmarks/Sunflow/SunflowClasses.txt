============= non Java Library Synchronized Methods (35) ============= 
<org.sunflow.core.display.ImgPipeDisplay: void imageBegin(int,int,int)>
<org.sunflow.system.ImagePanel: void fit()>
<org.sunflow.core.display.OpenExrDisplay: void imageUpdate(int,int,int,int,org.sunflow.image.Color[])>
<org.sunflow.core.display.ImgPipeDisplay: void imageUpdate(int,int,int,int,org.sunflow.image.Color[])>
<org.sunflow.system.ImagePanel: void imageFill(int,int,int,int,org.sunflow.image.Color)>
<org.sunflow.core.display.ImgPipeDisplay: void imagePrepare(int,int,int,int,int)>
<org.sunflow.system.ImagePanel: void imagePrepare(int,int,int,int,int)>
<org.sunflow.system.UI: void printError(org.sunflow.system.UI$Module,java.lang.String,java.lang.Object[])>
<org.sunflow.core.display.FastDisplay: void imageEnd()>
<org.sunflow.system.UI: void taskStart(java.lang.String,int,int)>
<org.sunflow.core.Geometry: void build()>
<org.sunflow.core.TextureCache: void flush()>
<org.sunflow.core.LightServer: void addShadingCache(org.sunflow.core.ShadingState,org.sunflow.core.Shader,org.sunflow.image.Color)>
<org.sunflow.core.TextureCache: org.sunflow.core.Texture getTexture(java.lang.String,boolean)>
<org.sunflow.core.photonmap.GridPhotonMap: org.sunflow.image.Color getRadiance(org.sunflow.math.Point3,org.sunflow.math.Vector3)>
<org.sunflow.system.UI: void taskCancel()>
<org.sunflow.core.LightServer: org.sunflow.image.Color lookupShadingCache(org.sunflow.core.ShadingState,org.sunflow.core.Shader)>
<org.sunflow.system.ImagePanel: void drag(int,int)>
<org.sunflow.core.display.ImgPipeDisplay: void imageEnd()>
<org.sunflow.system.ImagePanel: void imageUpdate(int,int,int,int,org.sunflow.image.Color[])>
<org.sunflow.core.Geometry: void tesselate()>
<org.sunflow.system.UI: void printWarning(org.sunflow.system.UI$Module,java.lang.String,java.lang.Object[])>
<org.sunflow.system.UI: void printInfo(org.sunflow.system.UI$Module,java.lang.String,java.lang.Object[])>
<org.sunflow.system.ImagePanel: void reset()>
<org.sunflow.system.UI: void taskStop()>
<org.sunflow.system.UI: boolean taskCanceled()>
<org.sunflow.core.display.ImgPipeDisplay: void imageFill(int,int,int,int,org.sunflow.image.Color)>
<org.sunflow.system.ImagePanel: void paintComponent(java.awt.Graphics)>
<org.sunflow.core.Texture: void load()>
<org.sunflow.core.display.FastDisplay: void imageBegin(int,int,int)>
<org.sunflow.core.display.FastDisplay: void paint(java.awt.Graphics)>
<org.sunflow.system.UI: void taskUpdate(int)>
<org.sunflow.system.ImagePanel: void zoom(int,int)>
<org.sunflow.system.UI: void printDetailed(org.sunflow.system.UI$Module,java.lang.String,java.lang.Object[])>
<org.sunflow.system.ImagePanel: void imageBegin(int,int,int)>
============= Java Methods Synchronized (150) ============= 
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>
<javax.swing.text.AbstractDocument: java.lang.Thread getCurrentWriter()>
<java.util.logging.Level$KnownLevel: java.util.logging.Level$KnownLevel findByName(java.lang.String)>
<java.awt.AWTKeyStroke: java.awt.AWTKeyStroke getCachedStroke(char,int,int,boolean)>
<java.awt.Window: void removeWindowListener(java.awt.event.WindowListener)>
<java.awt.KeyboardFocusManager: java.awt.KeyboardFocusManager getCurrentKeyboardFocusManager(sun.awt.AppContext)>
<java.util.logging.Logger: java.util.ResourceBundle findResourceBundle(java.lang.String,boolean)>
<java.util.logging.Logger: java.util.logging.Logger getLogger(java.lang.String)>
<sun.misc.FloatingDecimal: sun.misc.FDBigInt big5pow(int)>
<java.lang.StringBuffer: void getChars(int,int,char[],int)>
<java.lang.Thread: void join(long)>
<javax.swing.RepaintManager: javax.swing.RepaintManager$PaintManager getPaintManager()>
<java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)>
<java.util.Stack: java.lang.Object peek()>
<java.awt.EventQueue: void setCurrentEventAndMostRecentTimeImpl(java.awt.AWTEvent)>
<javax.swing.text.AbstractDocument: javax.swing.text.Position createPosition(int)>
<sun.awt.image.VSyncedBSManager: void releaseVsync(java.awt.image.BufferStrategy)>
<java.awt.dnd.DropTarget: void addDropTargetListener(java.awt.dnd.DropTargetListener)>
<javax.swing.RepaintManager: boolean isPaintingThread()>
<sun.java2d.loops.GraphicsPrimitiveMgr: sun.java2d.loops.GraphicsPrimitive locatePrim(int,sun.java2d.loops.SurfaceType,sun.java2d.loops.CompositeType,sun.java2d.loops.SurfaceType)>
<sun.util.calendar.ZoneInfo: java.util.Map getAliasTable()>
<java.awt.Component: void addMouseListener(java.awt.event.MouseListener)>
<java.security.Policy: java.security.Policy getPolicyNoCheck()>
<java.util.logging.LogManager$LoggerContext: void ensureRootLogger(java.util.logging.Logger)>
<java.awt.KeyboardFocusManager: void setMostRecentFocusOwner(java.awt.Window,java.awt.Component)>
<java.text.AttributedString: void addAttributeImpl(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>
<java.util.Vector: java.lang.Object set(int,java.lang.Object)>
<java.awt.Component: void addFocusListener(java.awt.event.FocusListener)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>
<sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo getFromCache(java.lang.String)>
<java.util.Random: void setSeed(long)>
<java.lang.StringBuffer: java.lang.String toString()>
<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(int)>
<java.util.Hashtable: java.lang.Object get(java.lang.Object)>
<javax.swing.event.EventListenerList: void remove(java.lang.Class,java.util.EventListener)>
<java.lang.Thread: long nextThreadID()>
<java.lang.Throwable: java.lang.StackTraceElement[] getOurStackTrace()>
<java.util.Vector: void copyInto(java.lang.Object[])>
<sun.util.LocaleServiceProviderPool: java.util.Set getProviderLocales()>
<java.lang.StringBuffer: java.lang.StringBuffer append(char)>
<java.util.logging.Level$KnownLevel: java.util.logging.Level$KnownLevel findByValue(int)>
<sun.reflect.MethodAccessorGenerator: java.lang.String generateName(boolean,boolean)>
<java.util.logging.LogManager: boolean addLogger(java.util.logging.Logger)>
<java.io.ByteArrayInputStream: int available()>
<sun.awt.image.BufImgSurfaceData: sun.java2d.loops.RenderLoops getSolidLoops(sun.java2d.loops.SurfaceType)>
<sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo addToCache(java.lang.String,sun.util.calendar.ZoneInfo)>
<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>
<java.awt.Component: void removeComponentListener(java.awt.event.ComponentListener)>
<sun.awt.image.SurfaceManager: void flush(boolean)>
<java.awt.Window: void addWindowListener(java.awt.event.WindowListener)>
<java.awt.Component: void removeMouseMotionListener(java.awt.event.MouseMotionListener)>
<java.beans.ChangeListenerMap: void remove(java.lang.String,java.util.EventListener)>
<java.util.logging.Level$KnownLevel: void add(java.util.logging.Level)>
<java.util.Hashtable: int size()>
<java.awt.Component: void removeMouseListener(java.awt.event.MouseListener)>
<java.lang.StringBuffer: java.lang.String substring(int,int)>
<java.awt.GraphicsEnvironment: java.awt.GraphicsEnvironment getLocalGraphicsEnvironment()>
<java.util.logging.Logger: java.util.ResourceBundle findResourceBundleFromStack(java.lang.String,java.util.Locale,java.lang.ClassLoader)>
<java.util.logging.Logger: void setupResourceInfo(java.lang.String,java.lang.Class)>
<java.util.logging.LogManager$LoggerContext: java.util.logging.Logger findLogger(java.lang.String)>
<java.awt.dnd.DropTarget: void setActive(boolean)>
<javax.swing.text.StyleContext: javax.swing.text.AttributeSet addAttribute(javax.swing.text.AttributeSet,java.lang.Object,java.lang.Object)>
<java.lang.StringBuffer: java.lang.StringBuffer append(long)>
<javax.swing.RepaintManager$ProcessingRunnable: boolean markPending()>
<java.util.logging.Level$KnownLevel: java.util.logging.Level$KnownLevel findByLocalizedLevelName(java.lang.String)>
<javax.swing.text.AbstractDocument: void writeUnlock()>
<java.nio.charset.CoderResult$Cache: java.nio.charset.CoderResult get(int)>
<java.util.Vector: java.lang.Object clone()>
<java.util.Vector: void setSize(int)>
<java.util.logging.LogManager$LoggerContext: boolean addLocalLogger(java.util.logging.Logger)>
<java.awt.KeyboardFocusManager: java.awt.FocusTraversalPolicy getDefaultFocusTraversalPolicy()>
<java.awt.VKCollection: void put(java.lang.String,java.lang.Integer)>
<sun.awt.X11GraphicsConfig: sun.java2d.loops.RenderLoops getSolidLoops(sun.java2d.loops.SurfaceType)>
<sun.util.calendar.ZoneInfo: java.util.SimpleTimeZone getLastRule()>
<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)>
<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
<java.lang.StringBuffer: java.lang.StringBuffer append(int)>
<java.lang.ClassLoader: void initSystemClassLoader()>
<java.awt.Component: void addComponentListener(java.awt.event.ComponentListener)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)>
<java.awt.dnd.DropTarget: void setComponent(java.awt.Component)>
<java.util.Vector: java.lang.Object elementAt(int)>
<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String)>
<java.awt.Toolkit: java.awt.Toolkit getDefaultToolkit()>
<java.io.ByteArrayOutputStream: byte[] toByteArray()>
<sun.awt.im.InputContext: void removeClientWindowListeners()>
<java.lang.StringBuffer: java.lang.String substring(int)>
<java.lang.ThreadGroup: boolean isDestroyed()>
<java.util.Vector: int indexOf(java.lang.Object,int)>
<java.io.ByteArrayOutputStream: void write(int)>
<java.util.Vector: boolean add(java.lang.Object)>
<java.io.ByteArrayOutputStream: int size()>
<java.util.Properties: void load(java.io.InputStream)>
<java.awt.Component: void addMouseMotionListener(java.awt.event.MouseMotionListener)>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)>
<java.awt.EventQueue: long getMostRecentEventTimeImpl()>
<java.beans.ChangeListenerMap: java.util.EventListener[] get(java.lang.String)>
<java.util.Stack: java.lang.Object pop()>
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String,boolean)>
<javax.swing.UIManager$LAFState: javax.swing.event.SwingPropertyChangeSupport getPropertyChangeSupport(boolean)>
<java.awt.Frame: int getExtendedState()>
<sun.awt.im.InputContext: void addClientWindowListeners()>
<java.awt.VKCollection: java.lang.Integer findCode(java.lang.String)>
<java.awt.Frame: int getState()>
<java.util.Vector: boolean isEmpty()>
<java.awt.KeyboardFocusManager: java.awt.Component getMostRecentFocusOwner(java.awt.Window)>
<java.lang.StringBuffer: void setLength(int)>
<java.util.Date: sun.util.calendar.BaseCalendar getJulianCalendar()>
<javax.swing.text.AbstractDocument: void readLock()>
<java.awt.AWTEvent: java.lang.reflect.Field get_InputEvent_CanAccessSystemClipboard()>
<sun.awt.SunToolkit: boolean getSunAwtDisableMixing()>
<java.util.logging.LogManager: void drainLoggerRefQueueBounded()>
<sun.awt.im.InputContext: java.awt.im.spi.InputMethod getInputMethod()>
<java.lang.Thread: int nextThreadNum()>
<java.util.Vector: void addElement(java.lang.Object)>
<java.util.Vector: int size()>
<java.beans.ChangeListenerMap: void add(java.lang.String,java.util.EventListener)>
<sun.awt.im.InputContext: void notifyClientWindowChange(java.awt.Window)>
<java.util.Hashtable: boolean containsKey(java.lang.Object)>
<sun.java2d.loops.GraphicsPrimitiveMgr: sun.java2d.loops.GraphicsPrimitive locate(int,sun.java2d.loops.SurfaceType,sun.java2d.loops.CompositeType,sun.java2d.loops.SurfaceType)>
<java.awt.VKCollection: java.lang.String findName(java.lang.Integer)>
<javax.swing.RepaintManager: void addInvalidComponent(javax.swing.JComponent)>
<sun.awt.X11GraphicsConfig: sun.java2d.loops.SurfaceType getSurfaceType()>
<java.awt.Component: void setDropTarget(java.awt.dnd.DropTarget)>
<java.io.DeleteOnExitHook: void add(java.lang.String)>
<javax.swing.text.AbstractDocument: void readUnlock()>
<java.awt.Component: void addMouseWheelListener(java.awt.event.MouseWheelListener)>
<sun.java2d.x11.X11SurfaceData: void makePipes()>
<java.util.logging.Level: java.lang.String getLocalizedLevelName()>
<sun.awt.image.SurfaceManager: void flush()>
<javax.swing.text.StyleContext: javax.swing.text.AttributeSet removeAttribute(javax.swing.text.AttributeSet,java.lang.Object)>
<java.util.Hashtable: java.util.Enumeration keys()>
<sun.java2d.loops.GraphicsPrimitive: int makeUniqueID(int,sun.java2d.loops.SurfaceType,sun.java2d.loops.CompositeType,sun.java2d.loops.SurfaceType)>
<sun.java2d.StateTrackableDelegate: void setUntrackable()>
<sun.util.LocaleServiceProviderPool: java.util.List getJRELocales()>
<sun.awt.im.InputContext: void enableClientWindowNotification(java.awt.im.spi.InputMethod,boolean)>
<java.lang.StringBuffer: int length()>
<java.awt.Component: java.awt.dnd.DropTarget getDropTarget()>
<java.awt.Component: void removeKeyListener(java.awt.event.KeyListener)>
<java.util.Vector: void removeElementAt(int)>
<java.awt.Component: void addKeyListener(java.awt.event.KeyListener)>
<java.util.TimeZone: java.util.TimeZone setDefaultZone()>
<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.util.Vector: java.lang.Object get(int)>
<java.awt.Window: void postWindowEvent(int)>
<sun.awt.X11GraphicsConfig: java.awt.image.ColorModel getColorModel()>
<javax.swing.text.AbstractDocument: void writeLock()>
<sun.java2d.Disposer: void add(java.lang.Object,sun.java2d.DisposerRecord)>
<java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>
<java.lang.Thread: void start()>
============= Java Methods (3584) ============= 
<sun.java2d.SunGraphics2D: void validateCompClip()>
<java.awt.Component: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>
<java.util.Properties: java.lang.String getProperty(java.lang.String,java.lang.String)>
<sun.awt.dnd.SunDropTargetContextPeer$EventDispatcher: void unregisterEvent(sun.awt.dnd.SunDropTargetEvent)>
<sun.misc.FloatingDecimal: double ulp(double,boolean)>
<java.security.Permissions: java.security.PermissionCollection getPermissionCollection(java.security.Permission,boolean)>
<java.lang.Math: double min(double,double)>
<sun.java2d.loops.DrawPath: sun.java2d.loops.DrawPath locate(sun.java2d.loops.SurfaceType,sun.java2d.loops.CompositeType,sun.java2d.loops.SurfaceType)>
<java.awt.dnd.DropTargetContext: void <init>(java.awt.dnd.DropTarget)>
<java.awt.GraphicsEnvironment: void <init>()>
<java.lang.Thread: void init(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long,java.security.AccessControlContext)>
<java.io.File: java.lang.String getCanonicalPath()>
<java.awt.Container: java.awt.FocusTraversalPolicy getFocusTraversalPolicy()>
<javax.swing.plaf.metal.MetalLookAndFeel: void <init>()>
<java.lang.Boolean: void <init>(boolean)>
<sun.security.provider.PolicyFile: void initPolicyFile(sun.security.provider.PolicyFile$PolicyInfo,java.net.URL)>
<javax.swing.ToolTipManager$MoveBeforeEnterListener: void <init>(javax.swing.ToolTipManager,javax.swing.ToolTipManager$1)>
<java.awt.event.MouseEvent: void setNewModifiers()>
<sun.awt.SunGraphicsCallback: void runOneComponent(java.awt.Component,java.awt.Rectangle,java.awt.Graphics,java.awt.Shape,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(float)>
<java.util.ResourceBundle$LoaderReference: void <init>(java.lang.ClassLoader,java.lang.ref.ReferenceQueue,java.util.ResourceBundle$CacheKey)>
<sun.java2d.pipe.Region: void calcBBox()>
<javax.swing.JScrollPane: javax.swing.JScrollBar getVerticalScrollBar()>
<java.util.SimpleTimeZone: int getDSTSavings()>
<java.net.Inet6Address: boolean isSiteLocalAddress(byte[])>
<java.awt.Component: boolean mouseExit(java.awt.Event,int,int)>
<sun.misc.URLClassPath: sun.misc.Resource getResource(java.lang.String)>
<java.util.IdentityHashMap: void <init>()>
<java.awt.image.ColorModel: int getTransparency()>
<java.lang.Thread: void join()>
<java.lang.InternalError: void <init>()>
<javax.swing.JMenu: void ensurePopupMenuCreated()>
<java.util.regex.Pattern$StartS: void <init>(java.util.regex.Pattern$Node)>
<sun.misc.SoftCache$ValueCell: java.lang.Object access$300(java.lang.Object,boolean)>
<java.util.TreeMap: void <init>()>
<java.lang.Class$Atomic: boolean casReflectionData(java.lang.Class,java.lang.ref.SoftReference,java.lang.ref.SoftReference)>
<java.text.NumberFormat: int getMaximumFractionDigits()>
<java.text.NumberFormat: void setGroupingUsed(boolean)>
<java.net.SocketPermission: void init(java.lang.String,int)>
<sun.awt.dnd.SunDropTargetContextPeer: int access$400(sun.awt.dnd.SunDropTargetContextPeer)>
<java.util.logging.LogManager: void checkPermission()>
<sun.awt.dnd.SunDropTargetContextPeer$EventDispatcher: void setReturnValue(int)>
<sun.awt.image.BufImgVolatileSurfaceManager: void <init>(sun.awt.image.SunVolatileImage,java.lang.Object)>
<sun.util.calendar.CalendarDate: int getMinutes()>
<javax.swing.JScrollPane: javax.swing.JScrollBar createHorizontalScrollBar()>
<java.awt.Component: void mixOnHiding(boolean)>
<java.util.Currency: java.lang.String getSymbol(java.util.Locale)>
<sun.reflect.MagicAccessorImpl: void <init>()>
<java.util.ArrayList: boolean add(java.lang.Object)>
<java.util.logging.LogManager: void doSetLevel(java.util.logging.Logger,java.util.logging.Level)>
<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
<javax.swing.UIDefaults: javax.swing.plaf.ComponentUI getUI(javax.swing.JComponent)>
<java.nio.Buffer: boolean hasRemaining()>
<java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)>
<javax.swing.UIManager: void initialize()>
<sun.swing.AccessibleMethod: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>
<javax.swing.DebugGraphics: java.lang.String toShortString()>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(char)>
<sun.font.AttributeValues: void <init>()>
<javax.swing.JComponent: void clientPropertyChanged(java.lang.Object,java.lang.Object,java.lang.Object)>
<javax.swing.JPanel: void updateUI()>
<java.util.HashMap: void init()>
<java.util.ResourceBundle$Control: java.util.ResourceBundle$Control access$300()>
<sun.awt.AWTAccessor: sun.awt.AWTAccessor$MenuComponentAccessor getMenuComponentAccessor()>
<java.awt.GraphicsEnvironment: boolean getHeadlessProperty()>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder reset()>
<java.awt.KeyboardFocusManager: java.awt.KeyboardFocusManager$HeavyweightFocusRequest getFirstHWRequest()>
<java.awt.Container: void checkNotAWindow(java.awt.Component)>
<java.util.regex.Matcher: int start(int)>
<java.awt.Menu: void removeNotify()>
<java.awt.FlowLayout: void <init>()>
<java.nio.charset.Charset: boolean isSupported(java.lang.String)>
<java.awt.ContainerOrderFocusTraversalPolicy: void <init>()>
<javax.swing.JComponent: boolean alwaysOnTop()>
<java.lang.System: java.lang.String getProperty(java.lang.String)>
<java.text.Format: java.text.AttributedCharacterIterator createAttributedCharacterIterator(java.lang.String)>
<javax.swing.JScrollBar: void updateUI()>
<javax.swing.BorderFactory: javax.swing.border.Border createEmptyBorder(int,int,int,int)>
<sun.reflect.ClassFileAssembler: void opc_return()>
<java.awt.Component: void setAutoFocusTransferOnDisposal(boolean)>
<java.awt.dnd.DropTargetContext: java.awt.dnd.peer.DropTargetContextPeer getDropTargetContextPeer()>
<java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])>
<java.text.ChoiceFormat: void applyPattern(java.lang.String)>
<sun.java2d.pipe.RegionIterator: void <init>(sun.java2d.pipe.Region)>
<java.text.Format: java.lang.Object clone()>
<java.awt.Dimension: double getHeight()>
<java.awt.Component: boolean isLightweight()>
<javax.swing.JViewport: void remove(java.awt.Component)>
<sun.util.calendar.ZoneInfo: int getOffsetsByStandard(long,int[])>
<java.lang.String: java.lang.String toUpperCase()>
<sun.util.LocaleServiceProviderPool: boolean hasProviders()>
<java.text.BreakIterator: long getLong(byte[],int)>
<java.lang.ThreadLocal: java.lang.ThreadLocal$ThreadLocalMap getMap(java.lang.Thread)>
<java.util.LinkedList: java.util.LinkedList$Entry addBefore(java.lang.Object,java.util.LinkedList$Entry)>
<javax.swing.ToolTipManager: javax.swing.ToolTipManager sharedInstance()>
<java.lang.String: int codePointAt(int)>
<javax.swing.AbstractButton: java.lang.String getText()>
<java.awt.Rectangle: boolean contains(java.awt.Rectangle)>
<java.security.Policy: java.security.PermissionCollection getPermissions(java.security.CodeSource)>
<sun.reflect.UnsafeLongFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<java.lang.String: java.lang.String substring(int,int)>
<sun.misc.VM: void addFinalRefCount(int)>
<java.awt.Window: java.lang.ref.WeakReference access$1000(java.awt.Window)>
<java.util.concurrent.locks.ReentrantReadWriteLock$Sync$ThreadLocalHoldCounter: void <init>()>
<java.awt.KeyboardFocusManager: void setGlobalPermanentFocusOwner(java.awt.Component)>
<java.nio.charset.CoderResult: java.lang.String toString()>
<sun.misc.SharedSecrets: sun.misc.JavaAWTAccess getJavaAWTAccess()>
<java.lang.Exception: void <init>(java.lang.Throwable)>
<javax.swing.text.StyleContext$NamedStyle: void <init>(javax.swing.text.StyleContext,javax.swing.text.Style)>
<java.lang.Class$4: void <init>(java.lang.Class,java.lang.reflect.Method)>
<java.net.Inet6Address: void initif(java.lang.String,byte[],java.net.NetworkInterface)>
<sun.awt.PeerEvent: sun.awt.PeerEvent coalesceEvents(sun.awt.PeerEvent)>
<java.util.HashMap: void putAllForCreate(java.util.Map)>
<java.util.Vector: java.lang.Object elementData(int)>
<sun.reflect.UnsafeStaticDoubleFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<javax.swing.text.StyleContext$NamedStyle: void setResolveParent(javax.swing.text.AttributeSet)>
<java.lang.reflect.Modifier: boolean isAbstract(int)>
<sun.awt.datatransfer.DataTransferer: boolean doesSubtypeSupportCharset(java.lang.String,java.lang.String)>
<sun.misc.FloatingDecimal: int countBits(long)>
<java.util.Formatter$Flags: boolean contains(java.util.Formatter$Flags)>
<java.util.regex.Matcher: boolean match(int,int)>
<java.util.Formatter: java.util.Formatter format(java.lang.String,java.lang.Object[])>
<java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>
<java.text.Bidi: int getRunLimit(int)>
<sun.util.calendar.CalendarSystem: sun.util.calendar.CalendarSystem forName(java.lang.String)>
<java.awt.Rectangle: void <init>(java.awt.Rectangle)>
<javax.swing.text.AbstractDocument$DefaultFilterBypass: void <init>(javax.swing.text.AbstractDocument,javax.swing.text.AbstractDocument$1)>
<java.lang.Boolean: boolean booleanValue()>
<sun.awt.image.IntegerComponentRaster: int getScanlineStride()>
<java.util.Random: void <init>(long)>
<javax.swing.AbstractButton: void setDisplayedMnemonicIndex(int)>
<java.util.ResourceBundle$RBClassLoader: java.util.ResourceBundle$RBClassLoader access$000()>
<sun.reflect.UTF8: int utf8Length(java.lang.String)>
<java.util.regex.Pattern: int skip()>
<java.beans.VetoableChangeSupport: void fireVetoableChange(java.beans.PropertyChangeEvent)>
<javax.swing.JComponent: void paintForceDoubleBuffered(java.awt.Graphics)>
<java.util.Formatter: void ensureOpen()>
<java.lang.Thread: boolean isCCLOverridden(java.lang.Class)>
<sun.java2d.InvalidPipeException: void <init>(java.lang.String)>
<java.text.BreakIterator: short getShort(byte[],int)>
<java.awt.MenuItem: java.lang.String getLabel()>
<javax.swing.text.AbstractDocument: void insertString(int,java.lang.String,javax.swing.text.AttributeSet)>
<java.awt.image.VolatileImage: void <init>()>
<java.lang.ThreadGroup: void addUnstarted()>
<sun.java2d.opengl.GLXVolatileSurfaceManager: void <init>(sun.awt.image.SunVolatileImage,java.lang.Object)>
<java.awt.Container: void increaseComponentCount(java.awt.Component)>
<sun.misc.FloatingDecimal: double doubleValue()>
<java.util.PriorityQueue: void siftDown(int,java.lang.Object)>
<java.util.logging.LogManager$LoggerWeakRef: void dispose()>
<sun.awt.image.ByteComponentRaster: int getPixelStride()>
<java.util.regex.Pattern$Slice: void <init>(int[])>
<sun.nio.cs.StreamDecoder: void implClose()>
<java.awt.Dialog: void interruptBlocking()>
<java.text.DecimalFormat: void applyPattern(java.lang.String,boolean)>
<sun.awt.image.SunVolatileImage: java.awt.Graphics2D createGraphics()>
<java.text.Bidi: int getRunLevel(int)>
<javax.swing.JComponent: void paintImmediately(int,int,int,int)>
<sun.misc.SoftCache$ValueCell: java.lang.Object strip(java.lang.Object,boolean)>
<java.awt.Component: boolean eventEnabled(java.awt.AWTEvent)>
<java.lang.VirtualMachineError: void <init>()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
<java.lang.Character: boolean isLowSurrogate(char)>
<java.awt.Component: void disable()>
<sun.java2d.pipe.Region: void getBounds(int[])>
<java.util.WeakHashMap: boolean eq(java.lang.Object,java.lang.Object)>
<java.awt.Window: void init(java.awt.GraphicsConfiguration)>
<java.awt.datatransfer.MimeTypeParameterList: int skipWhiteSpace(java.lang.String,int)>
<java.awt.Color: int getRGB()>
<java.security.cert.CertificateException: void <init>(java.lang.String)>
<javax.swing.AbstractButton: void init(java.lang.String,javax.swing.Icon)>
<java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>
<java.awt.Container: int countComponents()>
<javax.swing.text.SimpleAttributeSet: void addAttribute(java.lang.Object,java.lang.Object)>
<javax.swing.JComponent: java.awt.Rectangle fetchRectangle()>
<java.util.Properties$LineReader: int readLine()>
<java.awt.Component: sun.java2d.pipe.Region getOpaqueShape()>
<javax.swing.RepaintManager: void scheduleProcessingRunnable(sun.awt.AppContext)>
<java.awt.Toolkit: boolean enabledOnToolkit(long)>
<javax.swing.TransferHandler$TransferSupport: void <init>(java.awt.Component,java.awt.dnd.DropTargetEvent)>
<java.lang.ThreadLocal: void <init>()>
<java.lang.Throwable: void printStackTrace()>
<sun.awt.dnd.SunDropTargetContextPeer$EventDispatcher: void dispatchMotionEvent(sun.awt.dnd.SunDropTargetEvent)>
<java.text.DateFormat: java.text.DateFormat getDateTimeInstance(int,int,java.util.Locale)>
<javax.swing.text.AbstractDocument: void replace(int,int,java.lang.String,javax.swing.text.AttributeSet)>
<java.awt.geom.AffineTransform: void calculateType()>
<java.lang.Character: int digit(char,int)>
<javax.swing.JComponent: void revalidate()>
<java.util.logging.LogManager$2: void <init>(java.util.logging.LogManager)>
<javax.swing.text.AbstractDocument: void <init>(javax.swing.text.AbstractDocument$Content)>
<java.awt.event.AdjustmentEvent: int getValue()>
<java.util.BitSet: void checkInvariants()>
<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String)>
<java.awt.GraphicsDevice: java.awt.Window getFullScreenWindow()>
<java.lang.StringBuffer: void <init>(int)>
<javax.swing.JViewport: boolean needsRepaintAfterBlit()>
<javax.swing.text.JTextComponent: void select(int,int)>
<java.util.ResourceBundle$CacheKey: void access$500(java.util.ResourceBundle$CacheKey,java.lang.Throwable)>
<javax.swing.JComponent: java.util.Set getManagingFocusForwardTraversalKeys()>
<javax.swing.JScrollPane: javax.swing.JScrollBar getHorizontalScrollBar()>
<java.awt.image.ColorModel: java.awt.image.ColorModel coerceData(java.awt.image.WritableRaster,boolean)>
<java.util.regex.Pattern$6: void <init>(java.util.regex.Pattern$CharProperty,java.util.regex.Pattern$CharProperty)>
<sun.java2d.SunGraphicsEnvironment: void addDisplayChangedListener(sun.awt.DisplayChangedListener)>
<java.util.Collections: java.util.Enumeration emptyEnumeration()>
<java.util.Hashtable: void rehash()>
<java.awt.Container: void <init>()>
<java.awt.Component: void setLocale(java.util.Locale)>
<java.io.PrintStream: void newLine()>
<sun.text.normalizer.IntTrie: int getCodePointValue(int)>
<sun.util.LocaleServiceProviderPool: java.lang.Object getLocalizedObjectImpl(sun.util.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,boolean,java.lang.String,sun.util.resources.OpenListResourceBundle,java.lang.String,java.lang.Object[])>
<java.security.cert.Certificate: boolean equals(java.lang.Object)>
<java.awt.Component: void setName(java.lang.String)>
<java.util.JapaneseImperialCalendar: void <init>(java.util.TimeZone,java.util.Locale)>
<javax.swing.TimerQueue: void <init>()>
<java.lang.Character: void <init>(char)>
<java.util.Hashtable: java.util.Hashtable$Entry[] access$400(java.util.Hashtable)>
<java.util.ResourceBundle$CacheKey: void <init>(java.lang.String,java.util.Locale,java.lang.ClassLoader)>
<sun.reflect.MethodAccessorGenerator: void <init>()>
<java.awt.image.BufferedImage: int getWidth()>
<java.util.Collections$SynchronizedMap: void <init>(java.util.Map)>
<java.util.Random: long nextLong()>
<sun.util.calendar.CalendarDate: long getTimeOfDay()>
<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
<java.lang.IndexOutOfBoundsException: void <init>()>
<javax.swing.UIManager$1: void <init>(java.util.Properties)>
<java.awt.geom.Point2D$Double: void <init>(double,double)>
<javax.swing.JComponent: void computeVisibleRect(java.awt.Rectangle)>
<java.lang.Class: java.lang.String getSimpleName()>
<sun.reflect.ClassFileAssembler: void opc_invokespecial(short,int,int)>
<java.lang.ClassLoader: java.lang.ClassLoader getClassLoader(java.lang.Class)>
<java.awt.Component: boolean mouseUp(java.awt.Event,int,int)>
<java.lang.SecurityManager: void checkRead(java.lang.String)>
<javax.swing.JComponent: void setAlignmentX(float)>
<java.util.regex.Pattern: void append(int,int)>
<javax.swing.text.PlainDocument: void <init>()>
<java.awt.Container: void checkAddToSelf(java.awt.Component)>
<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.awt.AWTEvent: java.awt.Event convertToOld()>
<sun.reflect.AccessorGenerator: boolean canWidenTo(java.lang.Class,java.lang.Class)>
<java.util.LinkedList: java.lang.Object remove(java.util.LinkedList$Entry)>
<javax.swing.AbstractButton: void setBorderPainted(boolean)>
<javax.swing.UIManager: java.lang.Object get(java.lang.Object)>
<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
<javax.swing.TransferHandler$SwingDropTarget: void <init>(java.awt.Component)>
<sun.reflect.misc.ReflectUtil: void checkPackageAccess(java.lang.String)>
<java.text.SimpleDateFormat: void <init>(int,int,java.util.Locale)>
<java.lang.Shutdown: void runHooks()>
<javax.swing.plaf.ComponentUI: void installUI(javax.swing.JComponent)>
<java.awt.Container: void createChildHierarchyEvents(int,long,boolean)>
<java.awt.GraphicsConfiguration: java.awt.image.VolatileImage createCompatibleVolatileImage(int,int)>
<sun.awt.image.BytePackedRaster: int getScanlineStride()>
<java.awt.KeyboardFocusManager: boolean isTemporary(java.awt.Component,java.awt.Component)>
<sun.awt.AWTAutoShutdown: void activateBlockerThread()>
<java.io.File: java.io.File createTempFile0(java.lang.String,java.lang.String,java.io.File,boolean)>
<java.util.logging.Logger: void doSetParent(java.util.logging.Logger)>
<java.util.Formatter$DateTime: boolean isValid(char)>
<java.util.Calendar: void internalSet(int,int)>
<javax.swing.JScrollPane: void setHorizontalScrollBar(javax.swing.JScrollBar)>
<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>
<sun.security.provider.PolicyFile: boolean initPolicyFile(java.lang.String,java.lang.String,sun.security.provider.PolicyFile$PolicyInfo)>
<java.lang.Character: boolean isDigit(char)>
<java.io.UnsupportedEncodingException: void <init>(java.lang.String)>
<javax.swing.UIDefaults: java.lang.Object getFromHashtable(java.lang.Object)>
<java.awt.AWTEvent$2: void <init>()>
<sun.net.www.ParseUtil: int escape(char[],char,int)>
<java.util.PriorityQueue: void <init>(int,java.util.Comparator)>
<java.text.DateFormat$DateFormatGetter: java.text.DateFormat$DateFormatGetter access$000()>
<java.awt.Component: void validate()>
<sun.java2d.pipe.Region: boolean isRectangular()>
<sun.java2d.loops.FillSpans: sun.java2d.loops.FillSpans locate(sun.java2d.loops.SurfaceType,sun.java2d.loops.CompositeType,sun.java2d.loops.SurfaceType)>
<java.awt.Container: void preProcessKeyEvent(java.awt.event.KeyEvent)>
<java.lang.StackTraceElement: boolean eq(java.lang.Object,java.lang.Object)>
<javax.swing.JLabel: void setDisabledIcon(javax.swing.Icon)>
<java.awt.KeyboardFocusManager: void processCurrentLightweightRequests()>
<javax.swing.AbstractButton: void setSelected(boolean)>
<javax.swing.SwingUtilities: void installSwingDropTargetAsNecessary(java.awt.Component,javax.swing.TransferHandler)>
<java.io.BufferedReader: java.lang.String readLine(boolean)>
<java.util.regex.Pattern: int single()>
<java.beans.PropertyChangeSupport: void addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)>
<sun.misc.URLClassPath: sun.misc.Resource getResource(java.lang.String,boolean)>
<java.lang.Object: void wait()>
<java.awt.Component: java.lang.String constructComponentName()>
<java.nio.Buffer: java.nio.Buffer position(int)>
<java.awt.AWTEventMulticaster: java.awt.event.KeyListener add(java.awt.event.KeyListener,java.awt.event.KeyListener)>
<java.awt.Window: void toFront_NoClientCode()>
<java.util.Properties: java.lang.String getProperty(java.lang.String)>
<java.io.PrintWriter: void println()>
<javax.swing.text.JTextComponent: void setDocument(javax.swing.text.Document)>
<java.awt.Cursor: void <init>(int)>
<java.util.regex.Pattern$SliceS: void <init>(int[])>
<sun.awt.image.BufImgSurfaceData: sun.java2d.SurfaceData createDataBP(java.awt.image.BufferedImage,sun.java2d.loops.SurfaceType)>
<java.util.Currency: java.util.Currency getInstance(java.util.Locale)>
<java.io.PrintStream: void print(java.lang.String)>
<sun.reflect.NativeMethodAccessorImpl: void setParent(sun.reflect.DelegatingMethodAccessorImpl)>
<java.awt.AWTPermission: void <init>(java.lang.String)>
<java.util.ResourceBundle: boolean beginLoading(java.util.ResourceBundle$CacheKey)>
<java.util.concurrent.locks.ReentrantLock$Sync: void <init>()>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty rangeFor(int,int)>
<javax.swing.JComponent: void setVisible(boolean)>
<java.nio.charset.CoderResult: int length()>
<java.util.Random: void <init>()>
<sun.reflect.AccessorGenerator: void emitConstructor()>
<java.awt.event.MouseWheelEvent: int getScrollType()>
<java.awt.Point: boolean equals(java.lang.Object)>
<java.lang.ArrayIndexOutOfBoundsException: void <init>(int)>
<java.awt.Container: java.awt.Component add(java.awt.Component)>
<javax.swing.ScrollPaneLayout: void syncWithScrollPane(javax.swing.JScrollPane)>
<java.lang.SecurityManager: void checkPermission(java.security.Permission)>
<sun.reflect.AccessorGenerator: boolean isStatic()>
<java.util.Formatter$Flags: java.util.Formatter$Flags dup()>
<java.io.File: boolean isFile()>
<java.util.regex.ASCII: boolean isHexDigit(int)>
<sun.util.LocaleServiceProviderPool: java.lang.Object getLocalizedObject(sun.util.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,java.lang.Object[])>
<java.util.Calendar: java.util.Date getTime()>
<java.awt.Rectangle: java.awt.Rectangle union(java.awt.Rectangle)>
<java.io.FilterInputStream: void <init>(java.io.InputStream)>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onMalformedInput(java.nio.charset.CodingErrorAction)>
<java.util.regex.Matcher: void <init>(java.util.regex.Pattern,java.lang.CharSequence)>
<java.lang.RuntimeException: void <init>(java.lang.Throwable)>
<java.util.regex.Pattern$Dollar: void <init>(boolean)>
<java.awt.EventQueue: void cacheEQItem(java.awt.EventQueueItem)>
<sun.misc.FloatingDecimal: java.lang.String stripLeadingZeros(java.lang.String)>
<javax.swing.text.AbstractDocument: java.util.Dictionary getDocumentProperties()>
<java.awt.datatransfer.MimeType: boolean isValidToken(java.lang.String)>
<java.awt.Graphics: void <init>()>
<java.lang.String: boolean startsWith(java.lang.String)>
<java.awt.Component: int getX()>
<javax.swing.JComponent: int getHeight()>
<java.util.logging.Logger: java.util.ResourceBundle findSystemResourceBundle(java.util.Locale)>
<java.util.regex.Pattern$CharProperty: java.util.regex.Pattern$CharProperty maybeComplement(boolean)>
<javax.swing.Timer: javax.swing.TimerQueue timerQueue()>
<java.nio.charset.CoderResult: boolean isOverflow()>
<sun.swing.AccessibleMethod: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
<java.util.ResourceBundle: java.lang.String getString(java.lang.String)>
<java.util.regex.Pattern: int parsePastWhitespace(int)>
<java.awt.image.BufferedImage: int getHeight()>
<java.io.File: boolean checkAndCreate(java.lang.String,java.lang.SecurityManager,boolean)>
<java.awt.Component: java.awt.Point getLocationOnWindow()>
<java.lang.NumberFormatException: void <init>(java.lang.String)>
<java.awt.Container: void removeNotify()>
<java.awt.image.ColorModel: int getNumComponents()>
<java.io.DataInputStream: double readDouble()>
<java.util.logging.Level: void <init>(java.lang.String,int,java.lang.String)>
<java.lang.Error: void <init>(java.lang.Throwable)>
<java.lang.ThreadLocal$ThreadLocalMap: int prevIndex(int,int)>
<java.util.ResourceBundle$Control: java.util.ResourceBundle newBundle(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,boolean)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setMillis(int)>
<java.util.Formatter: void setZero()>
<java.text.DecimalFormat: void adjustForCurrencyDefaultFractionDigits()>
<java.awt.event.InvocationEvent: long getWhen()>
<java.util.concurrent.locks.ReentrantLock: void lock()>
<java.util.concurrent.locks.ReentrantReadWriteLock$ReadLock: void <init>(java.util.concurrent.locks.ReentrantReadWriteLock)>
<sun.reflect.ClassFileAssembler: void opc_aload_1()>
<java.lang.IllegalStateException: void <init>()>
<java.lang.Class: java.util.Map enumConstantDirectory()>
<javax.swing.text.StyleContext: javax.swing.text.AttributeSet getEmptySet()>
<java.lang.Class: java.lang.reflect.Method getMethod0(java.lang.String,java.lang.Class[])>
<java.io.BufferedReader: java.lang.String readLine()>
<java.awt.GraphicsEnvironment: java.awt.Point getCenterPoint()>
<javax.swing.JLabel: int checkHorizontalKey(int,java.lang.String)>
<sun.misc.FloatingDecimal: int getChars(char[])>
<java.util.Properties$LineReader: void <init>(java.util.Properties,java.io.InputStream)>
<java.util.regex.Pattern$SliceUS: void <init>(int[])>
<java.awt.AWTEvent: void consume()>
<sun.misc.FloatingDecimal: sun.misc.FDBigInt doubleToBigInt(double)>
<java.lang.CharacterData: int toUpperCaseEx(int)>
<java.util.zip.ZipEntry: long getTime()>
<java.lang.Throwable: java.lang.String toString()>
<java.awt.AWTEventMulticaster: java.awt.event.ComponentListener remove(java.awt.event.ComponentListener,java.awt.event.ComponentListener)>
<javax.swing.BoxLayout: void <init>(java.awt.Container,int)>
<java.text.NumberFormat: void setMinimumFractionDigits(int)>
<java.text.DecimalFormatSymbols: void initialize(java.util.Locale)>
<sun.java2d.HeadlessGraphicsEnvironment: void <init>(java.awt.GraphicsEnvironment)>
<java.util.ArrayList: void rangeCheck(int)>
<java.lang.Class: java.lang.String argumentTypesToString(java.lang.Class[])>
<java.util.regex.Pattern$Prolog: void <init>(java.util.regex.Pattern$Loop)>
<sun.awt.image.BufImgSurfaceData: sun.java2d.SurfaceData createDataIC(java.awt.image.BufferedImage,sun.java2d.loops.SurfaceType)>
<java.nio.charset.Charset$3: void <init>()>
<java.nio.charset.CoderResult: java.nio.charset.CoderResult malformedForLength(int)>
<sun.swing.DefaultLookup: void setDefaultLookup(sun.swing.DefaultLookup)>
<java.awt.event.KeyEvent: void setOldModifiers()>
<sun.util.calendar.CalendarDate: void setLeapYear(boolean)>
<java.util.Date: long getTime()>
<java.util.HashMap: boolean isEmpty()>
<javax.swing.JScrollBar: void checkOrientation(int)>
<java.awt.Component: void applyCurrentShapeBelowMe()>
<javax.swing.JFrame: boolean isRootPaneCheckingEnabled()>
<java.security.Permissions: void <init>()>
<sun.util.resources.LocaleData$1: void <init>(java.lang.String,java.util.Locale)>
<sun.awt.im.InputContext: java.awt.Component getClientComponent()>
<java.io.BufferedReader: void <init>(java.io.Reader)>
<java.security.PrivilegedActionException: java.lang.String toString()>
<java.util.regex.ASCII: int toLower(int)>
<java.awt.datatransfer.SystemFlavorMap: void <init>()>
<sun.reflect.UnsafeQualifiedShortFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<javax.swing.JLabel: void <init>(java.lang.String,javax.swing.Icon,int)>
<java.awt.AWTEventMulticaster: java.awt.event.MouseWheelListener add(java.awt.event.MouseWheelListener,java.awt.event.MouseWheelListener)>
<java.util.concurrent.ConcurrentHashMap: void <init>(int,float,int)>
<sun.java2d.x11.X11SurfaceData$X11PixmapSurfaceData: void <init>(sun.awt.X11GraphicsConfig,int,int,java.awt.Image,sun.java2d.loops.SurfaceType,java.awt.image.ColorModel,long,int)>
<java.util.TooManyListenersException: void <init>()>
<java.awt.Container: void invalidateTree()>
<java.util.ResourceBundle: boolean checkList(java.util.List)>
<java.nio.CharBuffer: void <init>(int,int,int,int,char[],int)>
<javax.swing.text.AbstractDocument: void putProperty(java.lang.Object,java.lang.Object)>
<sun.java2d.x11.X11Renderer: sun.java2d.x11.X11Renderer getInstance()>
<java.lang.String: java.lang.String substring(int)>
<javax.swing.text.AbstractDocument$BranchElement: int getElementIndex(int)>
<sun.reflect.AccessorGenerator: int typeSizeInStackSlots(java.lang.Class)>
<java.lang.ClassLoader: sun.misc.URLClassPath getBootstrapClassPath()>
<javax.swing.text.GapVector: void shiftGapStartDown(int)>
<sun.util.calendar.ZoneInfoFile$2: void <init>(java.lang.String)>
<javax.swing.DefaultButtonModel: boolean isEnabled()>
<sun.awt.dnd.SunDropTargetContextPeer: long[] access$202(sun.awt.dnd.SunDropTargetContextPeer,long[])>
<javax.swing.DebugGraphics: javax.swing.DebugGraphicsInfo info()>
<java.lang.Character: boolean isWhitespace(char)>
<java.awt.Component: void processInputMethodEvent(java.awt.event.InputMethodEvent)>
<javax.swing.AbstractButton: void setIcon(javax.swing.Icon)>
<sun.util.calendar.Gregorian: sun.util.calendar.Gregorian$Date getCalendarDate(long,sun.util.calendar.CalendarDate)>
<java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>
<javax.swing.JPanel: void <init>()>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.String)>
<javax.swing.plaf.metal.MetalLookAndFeel: boolean useSystemFonts()>
<java.awt.event.InputEvent: int getModifiersEx()>
<javax.swing.AbstractButton: void addActionListener(java.awt.event.ActionListener)>
<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>
<java.lang.ConditionalSpecialCasing: boolean isAfterI(java.lang.String,int)>
<javax.swing.ToolTipManager$MoveBeforeEnterListener: void <init>(javax.swing.ToolTipManager)>
<java.awt.AWTEvent: void copyPrivateDataInto(java.awt.AWTEvent)>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(boolean)>
<java.util.regex.Pattern$SingleU: void <init>(int)>
<java.text.FieldPosition: void setEndIndex(int)>
<java.text.DateFormatSymbols: void <init>(java.util.Locale)>
<sun.reflect.ClassFileAssembler: void opc_ifnonnull(sun.reflect.Label)>
<sun.reflect.UnsafeQualifiedStaticLongFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<javax.swing.text.GapContent$MarkData: void <init>(javax.swing.text.GapContent,int)>
<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal readJavaFormatString(java.lang.String)>
<sun.security.x509.X509CertImpl: byte[] getEncodedInternal(java.security.cert.Certificate)>
<java.util.ResourceBundle$CacheKey: long access$600(java.util.ResourceBundle$CacheKey)>
<java.util.logging.Logger: void setCallersClassLoaderRef(java.lang.Class)>
<java.awt.Container: int getComponentZOrder(java.awt.Component)>
<javax.swing.text.AbstractDocument: void postRemoveUpdate(javax.swing.text.AbstractDocument$DefaultDocumentEvent)>
<sun.reflect.ClassFileAssembler: short getMaxStack()>
<javax.swing.RepaintManager: java.awt.Dimension getDoubleBufferMaximumSize()>
<javax.swing.text.AbstractDocument: void getText(int,int,javax.swing.text.Segment)>
<javax.swing.plaf.metal.MetalTheme: void <init>()>
<javax.swing.SwingUtilities: void appContextPut(java.lang.Object,java.lang.Object)>
<java.io.File: java.lang.String getAbsolutePath()>
<java.lang.Character: char[] toUpperCaseCharArray(int)>
<sun.awt.im.InputMethodContext: void setInputMethodSupportsBelowTheSpot(boolean)>
<javax.swing.RepaintManager$PaintManager: void endPaint()>
<java.text.NumberFormat: int getMinimumFractionDigits()>
<sun.java2d.pipe.Region: void needSpace(int)>
<javax.swing.JComponent: void setBorder(javax.swing.border.Border)>
<java.awt.Event: void translate(int,int)>
<javax.swing.text.AbstractDocument$BidiRootElement: void <init>(javax.swing.text.AbstractDocument)>
<java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>
<java.util.concurrent.ConcurrentHashMap$Segment: void <init>(float,int,java.util.concurrent.ConcurrentHashMap$HashEntry[])>
<java.util.ResourceBundle: java.util.ResourceBundle findBundleInCache(java.util.ResourceBundle$CacheKey,java.util.ResourceBundle$Control)>
<javax.swing.text.AbstractDocument: void remove(int,int)>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty range(java.util.regex.Pattern$BitClass)>
<sun.reflect.misc.ReflectUtil: void checkPackageAccess(java.lang.Class)>
<java.awt.Component: boolean keyDown(java.awt.Event,int)>
<java.util.AbstractList$ListItr: void <init>(java.util.AbstractList,int)>
<java.util.ResourceBundle: void setParent(java.util.ResourceBundle)>
<java.util.Formatter$Conversion: boolean isInteger(char)>
<java.text.AttributedString: void <init>(java.text.AttributedCharacterIterator)>
<sun.java2d.pipe.Region: sun.java2d.pipe.Region getDifference(sun.java2d.pipe.Region)>
<java.util.Vector: void <init>(int,int)>
<java.lang.String: int indexOf(int,int)>
<java.awt.EventQueue: void invokeAndWait(java.lang.Object,java.lang.Runnable)>
<java.util.regex.Matcher: java.lang.String replaceFirst(java.lang.String)>
<sun.reflect.ClassFileAssembler: void emitInt(int)>
<sun.java2d.loops.GraphicsPrimitiveMgr: sun.java2d.loops.GraphicsPrimitive locateGeneral(int)>
<sun.util.calendar.ZoneInfoFile: byte[] getZoneInfoMappings()>
<javax.swing.JComponent: void printComponent(java.awt.Graphics)>
<javax.swing.JComponent: boolean isOpaque()>
<java.lang.Class: java.lang.String getCanonicalName()>
<java.awt.KeyboardFocusManager: java.awt.KeyboardFocusManager$HeavyweightFocusRequest getLastHWRequest()>
<java.text.DateFormat: void <init>()>
<java.awt.Rectangle: java.awt.Rectangle intersection(java.awt.Rectangle)>
<java.util.logging.LogRecord: void setThrown(java.lang.Throwable)>
<java.awt.Container: void clearCurrentFocusCycleRootOnHide()>
<java.awt.datatransfer.MimeType: void removeParameter(java.lang.String)>
<javax.swing.JComponent: javax.swing.TransferHandler$DropLocation dropLocationForPoint(java.awt.Point)>
<java.nio.charset.CharsetDecoder: void throwIllegalStateException(int,int)>
<java.util.ResourceBundle: java.lang.ClassLoader getLoader(java.lang.Class)>
<java.awt.event.MouseEvent: int getY()>
<java.util.MissingFormatArgumentException: void <init>(java.lang.String)>
<java.util.WeakHashMap: void transfer(java.util.WeakHashMap$Entry[],java.util.WeakHashMap$Entry[])>
<sun.java2d.loops.DrawRect: sun.java2d.loops.DrawRect locate(sun.java2d.loops.SurfaceType,sun.java2d.loops.CompositeType,sun.java2d.loops.SurfaceType)>
<sun.java2d.pipe.hw.ContextCapabilities: int getCaps()>
<sun.security.action.GetPropertyAction: void <init>(java.lang.String,java.lang.String)>
<java.text.BreakIterator: java.text.BreakIterator getBreakInstance(java.util.Locale,int,java.lang.String,java.lang.String)>
<javax.swing.text.AbstractDocument$DefaultDocumentEvent: javax.swing.event.DocumentEvent$EventType access$100(javax.swing.text.AbstractDocument$DefaultDocumentEvent)>
<java.util.regex.Pattern$Branch: void <init>(java.util.regex.Pattern$Node,java.util.regex.Pattern$Node,java.util.regex.Pattern$Node)>
<sun.util.calendar.ImmutableGregorianDate: void <init>(sun.util.calendar.BaseCalendar$Date)>
<java.util.HashSet: void <init>(int)>
<java.awt.event.InputMethodEvent: long getWhen()>
<sun.reflect.misc.ReflectUtil: boolean isAncestor(java.lang.ClassLoader,java.lang.ClassLoader)>
<java.util.logging.LogManager$LoggerWeakRef: void setNode(java.util.logging.LogManager$LogNode)>
<java.nio.ByteBuffer: int arrayOffset()>
<sun.awt.dnd.SunDropTargetEvent: void dispatch()>
<javax.swing.ToolTipManager$AccessibilityKeyListener: void <init>(javax.swing.ToolTipManager)>
<sun.awt.AppContext: java.lang.ThreadGroup getThreadGroup()>
<java.awt.geom.AffineTransform: void updateState()>
<sun.java2d.pipe.Region: boolean isInsideQuickCheck(sun.java2d.pipe.Region)>
<java.util.HashMap: void putForCreate(java.lang.Object,java.lang.Object)>
<javax.swing.JScrollBar: void <init>(int)>
<javax.swing.text.SegmentCache$CachedSegment: void <init>()>
<sun.font.AttributeValues: void setDefault(sun.font.EAttribute)>
<java.util.ResourceBundle: java.util.ResourceBundle putBundleInCache(java.util.ResourceBundle$CacheKey,java.util.ResourceBundle,java.util.ResourceBundle$Control)>
<java.awt.AWTKeyStroke$1: void <init>(java.lang.Class)>
<java.util.Arrays: char[] copyOf(char[],int)>
<java.util.ResourceBundle: java.lang.Object getObject(java.lang.String)>
<sun.reflect.Reflection: boolean quickCheckMemberAccess(java.lang.Class,int)>
<java.lang.Class: java.lang.Class forName(java.lang.String)>
<java.awt.Component: boolean requestFocusInWindow(sun.awt.CausedFocusEvent$Cause)>
<java.awt.Container: void doLayout()>
<java.lang.reflect.Method: java.lang.String getName()>
<java.util.regex.Pattern$BranchConn: void <init>()>
<java.lang.Throwable: java.lang.String getLocalizedMessage()>
<javax.swing.Timer: void cancelEvent()>
<java.lang.ConditionalSpecialCasing: int toLowerCaseEx(java.lang.String,int,java.util.Locale)>
<java.security.AccessController: java.security.AccessControlContext getContext()>
<java.util.Date: void <init>(int,int,int,int,int,int)>
<javax.swing.event.UndoableEditEvent: void <init>(java.lang.Object,javax.swing.undo.UndoableEdit)>
<java.awt.Rectangle: void <init>()>
<java.lang.Thread: void <init>(java.lang.Runnable)>
<java.lang.LinkageError: void <init>(java.lang.String)>
<java.io.IOException: void <init>()>
<java.awt.dnd.DropTarget: void removeNotify(java.awt.peer.ComponentPeer)>
<sun.net.util.IPAddressUtil: byte[] convertFromIPv4MappedAddress(byte[])>
<sun.misc.SoftCache$ValueCell: void drop()>
<java.util.logging.LogRecord: java.util.logging.Level getLevel()>
<sun.awt.image.ShortComponentRaster: int getPixelStride()>
<java.lang.ClassLoader: java.lang.Class findClass(java.lang.String)>
<sun.util.calendar.BaseCalendar: boolean isLeapYear(int)>
<java.util.regex.Pattern$SliceI: void <init>(int[])>
<sun.awt.im.InputContext: boolean addedClientWindowListeners()>
<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>
<javax.swing.JScrollPane: void <init>(java.awt.Component,int,int)>
<java.text.DecimalFormatSymbols: java.util.Currency getCurrency()>
<java.util.PriorityQueue: java.lang.Object removeAt(int)>
<java.beans.PropertyChangeSupport$PropertyChangeListenerMap: void <init>(java.beans.PropertyChangeSupport$1)>
<java.io.FilterInputStream: int read(byte[],int,int)>
<java.awt.Container: void recursiveSubtractAndApplyShape(sun.java2d.pipe.Region)>
<java.lang.StringCoding: java.nio.charset.Charset lookupCharset(java.lang.String)>
<java.util.LinkedList: java.lang.Object getLast()>
<java.lang.Character: char toUpperCase(char)>
<java.lang.reflect.Method: void acquireMethodAccessor()>
<java.text.NumberFormat: void setMinimumIntegerDigits(int)>
<sun.reflect.AccessorGenerator: short indexForPrimitiveType(java.lang.Class)>
<java.text.BreakIterator$BreakIteratorCache: java.text.BreakIterator createBreakInstance()>
<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>
<java.awt.EventQueue: boolean coalesceEvent(java.awt.AWTEvent,int)>
<java.util.concurrent.ConcurrentHashMap: void <init>()>
<sun.misc.SharedSecrets: sun.misc.JavaSecurityProtectionDomainAccess getJavaSecurityProtectionDomainAccess()>
<java.util.TimeZone: java.util.TimeZone getDefault()>
<java.awt.Menu: int countItems()>
<javax.swing.JRootPane: void setUI(javax.swing.plaf.RootPaneUI)>
<javax.swing.JRootPane: java.awt.Container createContentPane()>
<java.awt.geom.AffineTransform: void stateError()>
<javax.swing.text.StyleContext: int getCompressionThreshold()>
<java.io.InputStream: int read(byte[])>
<java.util.HashMap: void <init>()>
<java.awt.Component: java.awt.Color getBackground()>
<sun.java2d.loops.GraphicsPrimitiveProxy: sun.java2d.loops.GraphicsPrimitive instantiate()>
<java.awt.Container: java.awt.Dimension preferredSize()>
<java.awt.Window: void dispose()>
<sun.reflect.ReflectionFactory: void checkInitted()>
<java.util.logging.LogManager: java.lang.String getProperty(java.lang.String)>
<java.awt.Window: void setWarningString()>
<javax.swing.JPopupMenu: void <init>()>
<javax.swing.JFrame: void frameInit()>
<java.nio.charset.CharacterCodingException: void <init>()>
<java.awt.Container: int getBottommostComponentIndex()>
<java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
<java.net.Inet4Address: void <init>(java.lang.String,byte[])>
<javax.swing.JRootPane$RootLayout: void <init>(javax.swing.JRootPane)>
<java.lang.Thread: void setDaemon(boolean)>
<java.lang.Math: double sqrt(double)>
<java.text.ChoiceFormat: double[] doubleArraySize(double[])>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(double)>
<java.util.regex.Pattern: java.lang.String composeOneStep(java.lang.String)>
<java.util.PriorityQueue: void <init>()>
<java.lang.String: int lastIndexOf(java.lang.String,int)>
<java.lang.reflect.Field: void setFieldAccessor(sun.reflect.FieldAccessor,boolean)>
<java.util.concurrent.atomic.AtomicLong: long get()>
<javax.swing.AbstractButton: void updateUI()>
<java.lang.Number: void <init>()>
<java.util.EventObject: void <init>(java.lang.Object)>
<sun.util.calendar.CalendarDate: void setTimeOfDay(long)>
<sun.util.calendar.Era: void <init>(java.lang.String,java.lang.String,long,boolean)>
<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>
<java.util.TimeZone: java.lang.String getID()>
<java.awt.Component: void move(int,int)>
<java.util.logging.LogManager$LoggerWeakRef: void setParentRef(java.lang.ref.WeakReference)>
<java.security.UnresolvedPermissionCollection: java.util.List getUnresolvedPermissions(java.security.Permission)>
<java.awt.Component: java.awt.Dimension getMinimumSize()>
<java.awt.AWTEventMulticaster: java.awt.event.WindowListener add(java.awt.event.WindowListener,java.awt.event.WindowListener)>
<sun.util.calendar.CalendarDate: int getSeconds()>
<sun.java2d.SurfaceData: long getNativeOps()>
<sun.misc.Unsafe: sun.misc.Unsafe getUnsafe()>
<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>
<java.awt.datatransfer.MimeTypeParameterList: void remove(java.lang.String)>
<java.awt.event.AdjustmentEvent: int getAdjustmentType()>
<java.awt.Container: java.awt.Component[] getComponents()>
<java.io.File: java.lang.String getName()>
<java.io.PrintStream: void write(java.lang.String)>
<java.util.AbstractCollection: boolean add(java.lang.Object)>
<java.lang.Class: java.lang.String toString()>
<java.nio.HeapByteBuffer: void <init>(int,int)>
<javax.swing.text.JTextComponent: void setUI(javax.swing.plaf.TextUI)>
<javax.swing.JComponent: void paintImmediately(java.awt.Rectangle)>
<java.util.concurrent.locks.ReentrantLock$Sync: java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject newCondition()>
<sun.misc.Unsafe: int fieldOffset(java.lang.reflect.Field)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setMonth(int)>
<java.net.Inet6Address: int deriveNumericScope(byte[],java.net.NetworkInterface)>
<javax.swing.JScrollPane: void <init>()>
<java.util.logging.LogManager: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String,java.lang.Class)>
<java.io.DataInputStream: byte readByte()>
<java.util.logging.Level: void <init>(java.lang.String,int)>
<sun.java2d.SurfaceData: sun.java2d.loops.RenderLoops makeRenderLoops(sun.java2d.loops.SurfaceType,sun.java2d.loops.CompositeType,sun.java2d.loops.SurfaceType)>
<sun.util.calendar.CalendarDate: int getHours()>
<java.awt.FocusTraversalPolicy: void <init>()>
<sun.java2d.SunGraphics2D: void <init>(sun.java2d.SurfaceData,java.awt.Color,java.awt.Color,java.awt.Font)>
<javax.swing.UIManager: void maybeInitialize()>
<java.awt.image.DirectColorModel: int getBlueMask()>
<sun.reflect.Reflection: boolean isSameClassPackage(java.lang.Class,java.lang.Class)>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(long)>
<sun.java2d.loops.DrawPolygons: sun.java2d.loops.DrawPolygons locate(sun.java2d.loops.SurfaceType,sun.java2d.loops.CompositeType,sun.java2d.loops.SurfaceType)>
<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>
<javax.swing.AbstractButton: boolean isSelected()>
<java.text.RuleBasedBreakIterator: byte[] getAdditionalData()>
<java.lang.IllegalArgumentException: void <init>()>
<javax.swing.text.GapVector: void shiftGapEndUp(int)>
<javax.swing.text.StyleContext$FontKey: void <init>(java.lang.String,int,int)>
<javax.swing.text.GapVector: void <init>()>
<java.nio.charset.CharsetEncoder: java.nio.charset.Charset charset()>
<sun.java2d.loops.GraphicsPrimitive: boolean satisfiesSameAs(sun.java2d.loops.GraphicsPrimitive)>
<java.util.Locale: void <init>(java.lang.String)>
<java.util.ResourceBundle$CacheKey: void calculateHashCode()>
<java.util.Formatter$FormatSpecifier: int width(java.lang.String)>
<java.util.Arrays: int binarySearch0(java.lang.Object[],int,int,java.lang.Object)>
<java.lang.ref.Reference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
<javax.swing.text.AbstractDocument$BranchElement: void replace(int,int,javax.swing.text.Element[])>
<java.lang.AssertionError: void <init>()>
<java.lang.reflect.Field: boolean getBoolean(java.lang.Object)>
<java.lang.InternalError: void <init>(java.lang.String)>
<javax.swing.text.BadLocationException: void <init>(java.lang.String,int)>
<java.io.FileWriter: void <init>(java.io.File)>
<java.awt.image.BufferedImage$1: void <init>(java.lang.Class,java.lang.Class,java.lang.Class)>
<java.lang.reflect.InvocationTargetException: java.lang.Throwable getCause()>
<java.awt.EventQueue: void invokeLater(java.lang.Runnable)>
<java.text.DecimalFormatSymbols$DecimalFormatSymbolsGetter: java.text.DecimalFormatSymbols$DecimalFormatSymbolsGetter access$000()>
<javax.swing.LookAndFeel: void <init>()>
<sun.reflect.ClassFileAssembler: short cpi()>
<sun.reflect.UnsafeShortFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<sun.reflect.AccessorGenerator: void <init>()>
<java.lang.String: java.lang.String replace(char,char)>
<java.awt.geom.Point2D$Double: void <init>()>
<java.io.File: java.lang.String getPath()>
<java.text.DecimalFormatSymbols: char getPercent()>
<java.lang.String: void checkBounds(byte[],int,int)>
<java.io.FileDescriptor: int decrementAndGetUseCount()>
<java.text.AttributedString: int ensureRunBreak(int,boolean)>
<java.nio.Buffer: java.nio.Buffer clear()>
<java.lang.SecurityManager: void checkDelete(java.lang.String)>
<java.nio.charset.CoderResult: boolean isUnderflow()>
<java.awt.color.ColorSpace: int getType()>
<java.nio.charset.CharsetDecoder: float maxCharsPerByte()>
<java.lang.reflect.Constructor: int getModifiers()>
<sun.util.calendar.CalendarSystem: sun.util.calendar.Gregorian getGregorianCalendar()>
<java.util.regex.Pattern$4: void <init>(java.util.regex.Pattern,int,int)>
<java.util.Hashtable$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.Hashtable$Entry)>
<java.util.logging.LogManager: java.util.logging.Logger access$200(java.util.logging.LogManager)>
<java.lang.VirtualMachineError: void <init>(java.lang.String)>
<sun.util.calendar.BaseCalendar$Date: void <init>()>
<java.security.ProtectionDomain: java.security.CodeSource getCodeSource()>
<java.lang.Short: short shortValue()>
<java.awt.AWTException: void <init>(java.lang.String)>
<sun.reflect.ReflectionFactory: sun.reflect.FieldAccessor newFieldAccessor(java.lang.reflect.Field,boolean)>
<java.net.UnknownHostException: void <init>(java.lang.String)>
<javax.accessibility.AccessibleContext: java.lang.String getAccessibleName()>
<sun.java2d.loops.SurfaceType: sun.java2d.loops.SurfaceType getSuperType()>
<java.lang.ThreadLocal: java.lang.Object setInitialValue()>
<java.util.logging.LogManager: java.util.logging.LogManager access$100()>
<java.awt.Component: java.awt.Container getParent_NoClientCode()>
<java.awt.event.KeyAdapter: void <init>()>
<javax.swing.UIManager: void initializeDefaultLAF(java.util.Properties)>
<java.util.Formatter$FormatSpecifier: void checkBadFlags(java.util.Formatter$Flags[])>
<sun.reflect.AccessorGenerator: void emitWideningBytecodeForPrimitiveConversion(sun.reflect.ClassFileAssembler,java.lang.Class,java.lang.Class)>
<javax.swing.DefaultBoundedRangeModel: void <init>()>
<sun.reflect.UnsafeCharacterFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<java.util.regex.ASCII: int toUpper(int)>
<java.awt.AWTEvent: void <init>(java.lang.Object,int)>
<java.lang.String: java.lang.String toLowerCase(java.util.Locale)>
<java.util.Formatter: java.lang.String toString()>
<java.lang.Character: int toLowerCase(int)>
<sun.reflect.MethodAccessorGenerator$1: void <init>(sun.reflect.MethodAccessorGenerator,java.lang.String,byte[],java.lang.Class)>
<java.awt.Component$FlipBufferStrategy: void destroyBuffers()>
<sun.util.calendar.LocalGregorianCalendar: void <init>(java.lang.String,sun.util.calendar.Era[])>
<javax.swing.text.DocumentFilter: void remove(javax.swing.text.DocumentFilter$FilterBypass,int,int)>
<java.awt.Window: void toFront()>
<javax.swing.UIManager: java.util.Properties loadSwingProperties()>
<java.util.ResourceBundle$Control: java.util.Locale getFallbackLocale(java.lang.String,java.util.Locale)>
<java.lang.Double: long doubleToLongBits(double)>
<java.lang.Math: float min(float,float)>
<java.text.MessageFormat: java.lang.StringBuffer format(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition)>
<javax.swing.LookAndFeel: void installProperty(javax.swing.JComponent,java.lang.String,java.lang.Object)>
<java.util.logging.LogManager: java.util.logging.Logger demandSystemLogger(java.lang.String,java.lang.String)>
<java.awt.event.InputEvent: long getWhen()>
<java.awt.KeyboardFocusManager: void setMostRecentFocusOwner(java.awt.Component)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.StringBuffer)>
<sun.reflect.ClassFileAssembler: void setMaxLocals(int)>
<sun.reflect.ReflectionFactory: java.lang.reflect.Constructor copyConstructor(java.lang.reflect.Constructor)>
<java.util.Properties: void load0(java.util.Properties$LineReader)>
<sun.util.calendar.CalendarSystem: void initNames()>
<sun.java2d.pipe.Region: boolean equals(java.lang.Object)>
<java.awt.event.HierarchyEvent: void <init>(java.awt.Component,int,java.awt.Component,java.awt.Container)>
<java.util.regex.Pattern$BnM: java.util.regex.Pattern$Node optimize(java.util.regex.Pattern$Node)>
<java.awt.Component: boolean areInputMethodsEnabled()>
<sun.misc.FDBigInt: void lshiftMe(int)>
<java.lang.String: java.lang.String toUpperCase(java.util.Locale)>
<java.util.Locale: int hashCode()>
<java.awt.Toolkit: void notifyAWTEventListeners(java.awt.AWTEvent)>
<java.util.StringTokenizer: int scanToken(int)>
<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty charPropertyNodeFor(java.lang.String)>
<java.lang.SecurityManager: void checkWrite(java.lang.String)>
<javax.swing.UIDefaults: java.lang.Object getFromResourceBundle(java.lang.Object,java.util.Locale)>
<java.awt.KeyboardFocusManager: java.awt.Component getHeavyweight(java.awt.Component)>
<java.text.MessageFormat: void <init>(java.lang.String,java.util.Locale)>
<java.util.ResourceBundle$CacheKey: java.lang.Throwable getCause()>
<javax.swing.text.AbstractDocument$DefaultDocumentEvent: int getLength()>
<sun.util.calendar.ZoneInfo: int getLastRawOffset()>
<java.awt.datatransfer.MimeType: java.lang.String getSubType()>
<javax.swing.DebugGraphics: void <init>()>
<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>
<javax.swing.JRootPane: int getWindowDecorationStyle()>
<java.util.regex.Matcher: int start()>
<java.util.concurrent.atomic.AtomicBoolean: void set(boolean)>
<java.util.logging.Logger: void removeChildLogger(java.util.logging.LogManager$LoggerWeakRef)>
<sun.reflect.UnsafeFloatFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean tryRelease(int)>
<java.awt.im.InputContext: void removeNotify(java.awt.Component)>
<java.awt.datatransfer.MimeTypeParseException: void <init>(java.lang.String)>
<sun.net.util.IPAddressUtil: byte[] textToNumericFormatV6(java.lang.String)>
<sun.java2d.pipe.Region: sun.java2d.pipe.Region getInstanceXYWH(int,int,int,int)>
<java.awt.Component: boolean isEnabledImpl()>
<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object)>
<java.util.logging.LogManager$LoggerContext: void <init>(java.util.logging.LogManager$1)>
<javax.swing.AbstractButton: javax.swing.AbstractButton$Handler getHandler()>
<java.awt.Component: boolean isPreferredSizeSet()>
<java.io.IOException: void <init>(java.lang.String)>
<java.awt.KeyboardFocusManager: void clearGlobalFocusOwner()>
<java.util.Formatter$FormatSpecifier: void checkNumeric()>
<java.util.LinkedHashMap: void <init>(int,float)>
<sun.security.provider.PolicyFile$1: void <init>(sun.security.provider.PolicyFile)>
<sun.misc.FloatingDecimal: sun.misc.FloatingDecimal parseHexString(java.lang.String)>
<java.awt.Component: java.awt.Graphics getGraphics()>
<javax.swing.JTextField$ScrollRepainter: void <init>(javax.swing.JTextField)>
<sun.reflect.Reflection: java.lang.reflect.Field[] filterFields(java.lang.Class,java.lang.reflect.Field[])>
<java.lang.Thread: void dumpStack()>
<java.awt.Component: void paint(java.awt.Graphics)>
<sun.reflect.Reflection: void ensureMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty caseInsensitiveRangeFor(int,int)>
<sun.reflect.ClassFileAssembler: void emitShort(short,short)>
<java.nio.Buffer: int position()>
<java.util.StringTokenizer: boolean isDelimiter(int)>
<java.security.ProtectionDomain: boolean implies(java.security.Permission)>
<javax.swing.TransferHandler$DropHandler: void <init>()>
<java.lang.ConditionalSpecialCasing$Entry: int getCondition()>
<java.util.Locale: java.lang.String convertOldISOCodes(java.lang.String)>
<java.util.MissingFormatWidthException: void <init>(java.lang.String)>
<java.awt.EventQueue: boolean coalescePaintEvent(java.awt.event.PaintEvent)>
<javax.swing.RepaintManager$PaintManager: void beginPaint()>
<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>
<java.awt.Dimension: double getWidth()>
<sun.misc.SoftCache$ValueCell: boolean isValid()>
<java.lang.Thread: void interrupt()>
<java.awt.Component: void printAll(java.awt.Graphics)>
<java.util.Formatter$FormatSpecifier: java.util.Formatter$Flags flags(java.lang.String)>
<java.util.HashMap$Values: void <init>(java.util.HashMap)>
<java.text.NumberFormat: java.text.NumberFormat getCurrencyInstance(java.util.Locale)>
<java.awt.Component: void checkGD(java.lang.String)>
<java.util.logging.LogRecord: void setParameters(java.lang.Object[])>
<java.util.regex.Pattern$BitClass: void <init>()>
<java.awt.Component: boolean mouseEnter(java.awt.Event,int,int)>
<java.io.File: void <init>(java.io.File,java.lang.String)>
<javax.swing.JComponent: java.lang.String getUIClassID()>
<java.util.Formatter$FormatSpecifier: void checkFloat()>
<java.lang.reflect.Method: java.lang.Class[] getExceptionTypes()>
<java.lang.SecurityManager: java.lang.ThreadGroup getThreadGroup()>
<sun.reflect.ClassFileAssembler: void opc_athrow()>
<sun.awt.SunToolkit: java.lang.String getDataTransfererClassName()>
<java.awt.Component: void clearMostRecentFocusOwnerOnHide()>
<java.awt.Container: void adjustDecendantsOnParent(int)>
<java.util.AbstractList: java.util.ListIterator listIterator(int)>
<java.util.EventListenerProxy: java.util.EventListener getListener()>
<java.awt.datatransfer.DataFlavor: void <init>(java.lang.String,java.lang.String)>
<java.lang.String: java.lang.String valueOf(java.lang.Object)>
<java.awt.Component: void repaintParentIfNeeded(int,int,int,int)>
<java.io.Writer: void write(java.lang.String)>
<java.lang.SecurityManager: boolean checkTopLevelWindow(java.lang.Object)>
<java.util.concurrent.locks.AbstractOwnableSynchronizer: void <init>()>
<java.awt.Window: void disposeImpl()>
<javax.swing.text.PlainDocument: javax.swing.text.AbstractDocument$AbstractElement createDefaultRoot()>
<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>
<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>
<java.awt.KeyboardFocusManager: void _clearGlobalFocusOwner()>
<java.util.Locale: java.lang.String getCountry()>
<javax.swing.JRootPane: void setWindowDecorationStyle(int)>
<java.util.concurrent.atomic.AtomicLong: void <init>(long)>
<java.nio.Buffer: void <init>(int,int,int,int)>
<sun.reflect.UnsafeStaticCharacterFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<java.awt.datatransfer.SystemFlavorMap$2: void <init>(java.awt.datatransfer.SystemFlavorMap)>
<sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo createZoneInfo(java.lang.String)>
<javax.swing.JComponent: void paintBorder(java.awt.Graphics)>
<java.awt.Component: boolean canBeFocusOwner()>
<java.text.NumberFormat: void setMaximumIntegerDigits(int)>
<sun.reflect.AccessorGenerator: short sub(short,short)>
<java.util.Date: void <init>()>
<javax.swing.JViewport: void flushViewDirtyRegion(java.awt.Graphics,java.awt.Rectangle)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
<java.nio.charset.CoderResult: boolean isError()>
<java.util.HashMap: void <init>(int,float)>
<sun.java2d.x11.X11SurfaceData: sun.java2d.x11.X11SurfaceData$X11PixmapSurfaceData createData(sun.awt.X11GraphicsConfig,int,int,java.awt.image.ColorModel,java.awt.Image,long,int)>
<javax.swing.undo.CompoundEdit: javax.swing.undo.UndoableEdit lastEdit()>
<java.lang.StringBuilder: void <init>(java.lang.String)>
<java.awt.Button: java.lang.String getLabel()>
<javax.swing.DebugGraphics: int shouldComponentDebug(javax.swing.JComponent)>
<java.text.DateFormat: java.text.DateFormat getDateInstance(int,java.util.Locale)>
<javax.swing.RepaintManager: void copyArea(javax.swing.JComponent,java.awt.Graphics,int,int,int,int,int,int,boolean)>
<javax.swing.event.CaretEvent: void <init>(java.lang.Object)>
<java.nio.charset.CharsetDecoder: void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<java.util.PriorityQueue: void siftUp(int,java.lang.Object)>
<java.lang.String: int lastIndexOf(char[],int,int,char[],int,int,int)>
<sun.reflect.ClassFileAssembler: void opc_instanceof(short)>
<javax.swing.RepaintManager$DoubleBufferInfo: void <init>(javax.swing.RepaintManager,javax.swing.RepaintManager$1)>
<java.nio.charset.CharsetEncoder: void implOnMalformedInput(java.nio.charset.CodingErrorAction)>
<sun.util.BuddhistCalendar: void <init>(java.util.TimeZone,java.util.Locale)>
<java.awt.Component: void mixOnValidating()>
<java.text.SimpleDateFormat: char[] compile(java.lang.String)>
<sun.util.calendar.ZoneInfo: java.lang.Object clone()>
<java.util.logging.LogManager$LogNode: void walkAndSetParent(java.util.logging.Logger)>
<javax.swing.UIDefaults: java.lang.Object get(java.lang.Object)>
<sun.font.AttributeValues: void i_set(sun.font.EAttribute,sun.font.AttributeValues)>
<sun.reflect.ClassFileAssembler: void opc_l2f()>
<java.util.regex.Pattern: int flags()>
<java.util.logging.Level: java.util.logging.Level findLevel(java.lang.String)>
<java.lang.Character: boolean isJavaIdentifierPart(char)>
<java.io.DataInputStream: short readShort()>
<java.util.regex.Pattern$Neg: void <init>(java.util.regex.Pattern$Node)>
<java.text.ChoiceFormat: double nextDouble(double,boolean)>
<java.util.regex.Pattern$UnixCaret: void <init>()>
<javax.swing.AbstractButton: java.awt.event.ActionListener createActionListener()>
<sun.reflect.UTF8: byte[] encode(java.lang.String)>
<java.awt.geom.AffineTransform: void setTransform(double,double,double,double,double,double)>
<java.util.Calendar: long getTimeInMillis()>
<java.lang.SecurityManager: void checkAccess(java.lang.ThreadGroup)>
<java.util.Formatter$FormatSpecifier: void checkCharacter()>
<java.awt.event.FocusEvent: void <init>(java.awt.Component,int)>
<java.util.Formatter$FormatSpecifier: int index(java.lang.String)>
<sun.reflect.Reflection: boolean isSubclassOf(java.lang.Class,java.lang.Class)>
<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>
<java.util.Locale: boolean equals(java.lang.Object)>
<java.io.PrintWriter: void print(java.lang.String)>
<java.util.Arrays: byte[] copyOf(byte[],int)>
<sun.java2d.pipe.Region: void filterSpans(sun.java2d.pipe.Region,sun.java2d.pipe.Region,int)>
<sun.nio.cs.StreamEncoder: sun.nio.cs.StreamEncoder forOutputStreamWriter(java.io.OutputStream,java.lang.Object,java.lang.String)>
<javax.swing.text.DocumentFilter: void insertString(javax.swing.text.DocumentFilter$FilterBypass,int,java.lang.String,javax.swing.text.AttributeSet)>
<java.util.regex.Pattern: void <init>(java.lang.String,int)>
<java.util.concurrent.locks.ReentrantLock: void unlock()>
<java.util.Formatter$Flags: java.util.Formatter$Flags access$100(java.util.Formatter$Flags,java.util.Formatter$Flags)>
<java.util.WeakHashMap: void resize(int)>
<java.awt.Container: boolean eventEnabled(java.awt.AWTEvent)>
<java.awt.Component: void setEnabled(boolean)>
<java.awt.AWTKeyStroke: void registerSubclass(java.lang.Class)>
<sun.misc.SoftCache: java.lang.Object get(java.lang.Object)>
<java.lang.String: boolean regionMatches(int,java.lang.String,int,int)>
<java.lang.Math: long max(long,long)>
<java.awt.Component: void setLocation(int,int)>
<sun.util.calendar.AbstractCalendar: sun.util.calendar.CalendarDate getCalendarDate(long,java.util.TimeZone)>
<java.util.regex.Pattern: int normalizeCharClass(java.lang.StringBuilder,int)>
<java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
<java.awt.geom.RectangularShape: void <init>()>
<java.awt.KeyboardFocusManager: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>
<java.awt.image.ColorModel: int getGreen(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment ensureSegment(int)>
<java.text.DecimalFormatSymbols: java.text.DecimalFormatSymbols getInstance(java.util.Locale)>
<javax.swing.JScrollPane: javax.swing.JViewport getRowHeader()>
<java.lang.Enum: java.lang.String name()>
<java.awt.KeyboardFocusManager: java.lang.Throwable dispatchAndCatchException(java.lang.Throwable,java.awt.Component,java.awt.event.FocusEvent)>
<java.text.RuleBasedBreakIterator: void <init>(java.lang.String)>
<javax.swing.text.GapVector: void <init>(int)>
<java.lang.ConditionalSpecialCasing: char[] toUpperCaseCharArray(java.lang.String,int,java.util.Locale)>
<java.awt.Event: void <init>(java.lang.Object,long,int,int,int,int,int,java.lang.Object)>
<java.security.BasicPermission: void <init>(java.lang.String,java.lang.String)>
<java.nio.charset.Charset: java.nio.charset.Charset lookup(java.lang.String)>
<java.util.regex.Pattern: java.util.regex.Pattern$Node createGroup(boolean)>
<javax.swing.JComponent: void setFont(java.awt.Font)>
<java.util.concurrent.CopyOnWriteArrayList: void setArray(java.lang.Object[])>
<javax.swing.JViewport: void setView(java.awt.Component)>
<sun.awt.X11GraphicsConfig: java.lang.Object getProxyKey()>
<java.text.MessageFormat: void <init>(java.lang.String)>
<java.lang.ThreadLocal$ThreadLocalMap: boolean cleanSomeSlots(int,int)>
<sun.util.calendar.AbstractCalendar: sun.util.calendar.CalendarDate getCalendarDate(long,sun.util.calendar.CalendarDate)>
<sun.reflect.ByteVectorImpl: void <init>()>
<java.util.Currency$CurrencyNameGetter: java.util.Currency$CurrencyNameGetter access$300()>
<java.nio.ByteBuffer: void <init>(int,int,int,int,byte[],int)>
<javax.swing.DebugGraphicsInfo: int getDebugOptions(javax.swing.JComponent)>
<java.lang.Class: java.lang.reflect.Constructor[] privateGetDeclaredConstructors(boolean)>
<java.lang.SecurityManager: void checkPackageAccess(java.lang.String)>
<sun.misc.URLClassPath$Loader$1: void <init>(sun.misc.URLClassPath$Loader,java.lang.String,java.net.URL,java.net.URLConnection)>
<sun.util.LocaleServiceProviderPool$1: void <init>(sun.util.LocaleServiceProviderPool,java.lang.Class)>
<java.util.Formatter$FormatSpecifier: void failMismatch(java.util.Formatter$Flags,char)>
<sun.util.calendar.CalendarUtils: int floorDivide(int,int)>
<sun.reflect.Reflection: java.lang.reflect.Member[] filter(java.lang.reflect.Member[],java.lang.String[])>
<sun.reflect.AccessorGenerator: java.lang.String getClassName(java.lang.Class,boolean)>
<java.lang.Integer: int intValue()>
<java.awt.Menu: int countItemsImpl()>
<java.lang.ThreadLocal$ThreadLocalMap: void resize()>
<java.lang.Class: java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)>
<sun.reflect.DelegatingMethodAccessorImpl: void setDelegate(sun.reflect.MethodAccessorImpl)>
<java.lang.Character: boolean isUpperCase(char)>
<sun.reflect.ClassFileAssembler: void decStack()>
<java.util.regex.Pattern$End: void <init>()>
<java.util.regex.Matcher: boolean find(int)>
<java.util.AbstractCollection: boolean retainAll(java.util.Collection)>
<javax.swing.JInternalFrame: javax.swing.JRootPane getRootPane()>
<java.util.PriorityQueue: boolean remove(java.lang.Object)>
<java.awt.datatransfer.MimeTypeParameterList: void <init>()>
<java.awt.Component: void dispatchEventImpl(java.awt.AWTEvent)>
<java.text.NumberFormat: java.text.NumberFormat getPercentInstance(java.util.Locale)>
<java.security.Policy$2: void <init>(java.lang.String)>
<java.text.Format: java.text.AttributedCharacterIterator createAttributedCharacterIterator(java.lang.String,java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>
<sun.security.provider.PolicyFile$PolicyInfo: void <init>(int)>
<java.nio.charset.CharsetEncoder: java.nio.charset.CharsetEncoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty unicodeBlockPropertyFor(java.lang.String)>
<javax.swing.JScrollPane: void setLayout(java.awt.LayoutManager)>
<javax.swing.JComponent: boolean isValidateRoot()>
<sun.reflect.ReflectionFactory$1: void <init>()>
<java.lang.Character: char toLowerCase(char)>
<java.text.DecimalFormat: void <init>(java.lang.String,java.text.DecimalFormatSymbols)>
<java.security.Permissions: java.security.PermissionCollection getUnresolvedPermissions(java.security.Permission)>
<java.io.DataOutputStream: void incCount(int)>
<sun.reflect.UnsafeQualifiedFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<javax.swing.JCheckBox: void <init>()>
<java.util.regex.Pattern: void accept(int,java.lang.String)>
<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] newTable(int)>
<java.awt.geom.AffineTransform: double getScaleX()>
<java.util.SimpleTimeZone: long getTransition(sun.util.calendar.BaseCalendar,sun.util.calendar.BaseCalendar$Date,int,int,int,int,int,int)>
<java.lang.String: java.lang.String valueOf(char)>
<java.lang.StringBuffer: void <init>(java.lang.String)>
<sun.misc.SoftCache$ValueCell: sun.misc.SoftCache$ValueCell access$400(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue)>
<java.lang.StringBuilder: java.lang.StringBuilder delete(int,int)>
<java.lang.ref.ReferenceQueue$Lock: void <init>()>
<java.util.PropertyPermission: void init(int)>
<java.awt.LightweightDispatcher$2: void <init>(java.awt.LightweightDispatcher)>
<java.awt.Dimension: void <init>()>
<java.util.regex.Pattern: java.util.regex.Pattern$Node expr(java.util.regex.Pattern$Node)>
<java.util.regex.Pattern$Caret: void <init>()>
<java.util.ResourceBundle: void setExpirationTime(java.util.ResourceBundle$CacheKey,java.util.ResourceBundle$Control)>
<sun.reflect.UnsafeQualifiedStaticBooleanFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<sun.awt.image.VolatileSurfaceManager: sun.java2d.SurfaceData getPrimarySurfaceData()>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder appendCodePoint(int)>
<java.util.Collections: java.util.List synchronizedList(java.util.List)>
<java.lang.ref.WeakReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
<sun.awt.dnd.SunDropTargetContextPeer: long access$102(sun.awt.dnd.SunDropTargetContextPeer,long)>
<javax.swing.text.AbstractDocument$BranchElement: void <init>(javax.swing.text.AbstractDocument,javax.swing.text.Element,javax.swing.text.AttributeSet)>
<java.awt.EventQueue: void postEvent(java.awt.AWTEvent)>
<javax.swing.JScrollPane$ScrollBar: void <init>(javax.swing.JScrollPane,int)>
<java.awt.im.InputContext: void endComposition()>
<sun.reflect.ClassFileAssembler: void opc_astore_2()>
<java.awt.EventQueue: int getPriority(java.awt.AWTEvent)>
<java.util.Formatter$Conversion: boolean isValid(char)>
<sun.awt.AWTAutoShutdown: void notifyThreadBusy(java.lang.Thread)>
<java.util.regex.Matcher: java.util.regex.Matcher appendReplacement(java.lang.StringBuffer,java.lang.String)>
<sun.security.provider.PolicyFile$3: void <init>(sun.security.provider.PolicyFile,java.lang.String,sun.security.provider.PolicyFile$PolicyInfo,java.lang.String)>
<java.util.Calendar: java.util.Calendar createCalendar(java.util.TimeZone,java.util.Locale)>
<sun.reflect.UnsafeQualifiedByteFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<java.awt.Component: int numListening(long)>
<java.text.DictionaryBasedBreakIterator: void <init>(java.lang.String,java.lang.String)>
<java.util.TimeZone: int getDSTSavings()>
<sun.security.util.Debug: sun.security.util.Debug getInstance(java.lang.String,java.lang.String)>
<java.awt.datatransfer.DataFlavor: void <init>(java.lang.String)>
<javax.swing.AbstractButton: void setHorizontalAlignment(int)>
<java.net.URL: java.lang.String getHost()>
<java.awt.Window: void setLocationByPlatform(boolean)>
<sun.util.calendar.AbstractCalendar: sun.util.calendar.CalendarDate setTimeOfDay(sun.util.calendar.CalendarDate,int)>
<java.awt.Container: int getListenersCount(int,boolean)>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty newSingle(int)>
<java.util.regex.ASCII: boolean isAscii(int)>
<java.util.regex.Pattern$SliceIS: void <init>(int[])>
<javax.swing.text.StyleContext: void reclaim(javax.swing.text.AttributeSet)>
<sun.reflect.ClassFileAssembler: void append(sun.reflect.ByteVector)>
<sun.awt.MostRecentKeyValue: void setPair(java.lang.Object,java.lang.Object)>
<java.awt.event.MouseEvent: boolean isPopupTrigger()>
<sun.reflect.ClassFileAssembler: void emitConstantPoolUTF8(java.lang.String)>
<javax.swing.text.StyleContext: void <init>()>
<sun.awt.AppContext: java.lang.Object get(java.lang.Object)>
<javax.swing.text.Utilities: boolean isComposedTextAttributeDefined(javax.swing.text.AttributeSet)>
<java.io.DataOutputStream: void writeShort(int)>
<sun.util.calendar.CalendarDate: java.lang.Object clone()>
<sun.misc.FloatingDecimal: void dtoa(int,long,int)>
<javax.swing.ArrayTable: boolean containsKey(java.lang.Object)>
<java.awt.Component: java.awt.ComponentOrientation getComponentOrientation()>
<javax.swing.RepaintManager$PaintManager: void dispose()>
<javax.swing.JComponent: void _paintImmediately(int,int,int,int)>
<java.awt.Component: boolean areBoundsValid()>
<sun.util.calendar.CalendarDate: void <init>(java.util.TimeZone)>
<java.nio.charset.CoderResult: boolean isUnmappable()>
<java.io.Writer: void <init>(java.lang.Object)>
<sun.awt.image.VolatileSurfaceManager: sun.java2d.SurfaceData getBackupSurface()>
<java.awt.Component: sun.java2d.pipe.Region getAppliedShape()>
<java.text.MessageFormat: void makeFormat(int,int,java.lang.StringBuffer[])>
<sun.util.calendar.CalendarUtils: boolean isGregorianLeapYear(int)>
<java.lang.UnsupportedOperationException: void <init>()>
<sun.font.BidiUtils: void getLevels(java.text.Bidi,byte[],int)>
<java.util.ArrayList: int size()>
<java.awt.LightweightDispatcher: void <init>(java.awt.Container)>
<java.util.ResourceBundle$CacheKey: java.lang.String getName()>
<java.lang.reflect.Modifier: boolean isProtected(int)>
<javax.swing.ToolTipManager: void registerComponent(javax.swing.JComponent)>
<java.util.Collections$UnmodifiableCollection: void <init>(java.util.Collection)>
<javax.swing.ArrayTable: void put(java.lang.Object,java.lang.Object)>
<javax.swing.JScrollPane: int getVerticalScrollBarPolicy()>
<java.lang.Class: java.lang.Class getEnclosingClass()>
<java.util.WeakHashMap: int indexFor(int,int)>
<sun.awt.dnd.SunDropTargetContextPeer: int access$302(sun.awt.dnd.SunDropTargetContextPeer,int)>
<java.util.regex.Pattern$TreeInfo: void reset()>
<javax.swing.text.AbstractDocument$AbstractElement: void addAttributes(javax.swing.text.AttributeSet)>
<java.awt.Component: void addPropertyChangeListener(java.beans.PropertyChangeListener)>
<java.security.Policy: void <init>()>
<javax.swing.text.StyleContext$NamedStyle: void fireStateChanged()>
<sun.reflect.NativeMethodAccessorImpl: void <init>(java.lang.reflect.Method)>
<javax.swing.UIManager: void setLookAndFeel(java.lang.String)>
<javax.swing.text.GapContent: void <init>(int)>
<java.awt.image.ComponentSampleModel: int getPixelStride()>
<javax.swing.text.SegmentCache: javax.swing.text.Segment getSharedSegment()>
<java.util.SimpleTimeZone: void decodeEndRule()>
<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform createInverse()>
<javax.swing.JRootPane: void setDoubleBuffered(boolean)>
<java.util.Formatter$Flags: java.util.Formatter$Flags add(java.util.Formatter$Flags)>
<javax.swing.text.SimpleAttributeSet: void <init>()>
<java.text.Bidi: void <init>(char[],int,byte[],int,int,int)>
<java.awt.KeyboardFocusManager$HeavyweightFocusRequest: java.awt.KeyboardFocusManager$LightweightFocusRequest getFirstLightweightRequest()>
<java.util.Locale: java.lang.String toUpperCase(java.lang.String)>
<sun.awt.dnd.SunDropTargetContextPeer: int access$002(sun.awt.dnd.SunDropTargetContextPeer,int)>
<javax.swing.text.GapContent$MarkVector: void <init>()>
<java.util.Locale: java.lang.String getLanguage()>
<java.awt.Component: void show()>
<java.lang.reflect.Modifier: boolean isPrivate(int)>
<java.util.regex.Pattern: boolean has(int)>
<sun.java2d.opengl.GLXGraphicsConfig: boolean isCapPresent(int)>
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Object[])>
<java.awt.KeyboardFocusManager: boolean isAutoFocusTransferEnabled()>
<javax.swing.JLabel: void setText(java.lang.String)>
<java.util.regex.Pattern: int escape(boolean,boolean)>
<java.lang.Thread: boolean auditSubclass(java.lang.Class)>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.CharSequence,int,int)>
<java.lang.ClassLoader: java.lang.Class findBootstrapClass0(java.lang.String)>
<java.lang.Double: boolean isInfinite(double)>
<java.beans.ChangeListenerMap: void <init>()>
<java.util.logging.Logger: void doLog(java.util.logging.LogRecord)>
<java.lang.Exception: void <init>()>
<java.nio.Buffer: void checkBounds(int,int,int)>
<java.lang.System: void checkKey(java.lang.String)>
<javax.swing.JViewport: java.awt.Dimension getExtentSize()>
<javax.swing.LayoutComparator: void <init>()>
<java.util.ResourceBundle$Control: java.lang.String toResourceName0(java.lang.String,java.lang.String)>
<javax.swing.RepaintManager$PaintManager: void paintDoubleBuffered(javax.swing.JComponent,java.awt.Image,java.awt.Graphics,int,int,int,int)>
<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>
<java.lang.Integer: java.lang.String toString(int)>
<sun.reflect.UnsafeQualifiedStaticFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<sun.misc.Launcher: sun.misc.Launcher getLauncher()>
<javax.swing.JToggleButton: void <init>(java.lang.String,javax.swing.Icon,boolean)>
<java.awt.Container: boolean isParentOf(java.awt.Component)>
<sun.text.normalizer.Trie: int getBMPOffset(char)>
<sun.util.calendar.CalendarDate: sun.util.calendar.Era getEra()>
<java.util.logging.LogManager: void access$800(java.util.logging.Logger,java.util.logging.Level)>
<javax.swing.UIDefaults: java.util.Map getResourceCache(java.util.Locale)>
<java.lang.reflect.Method: java.lang.Class getReturnType()>
<java.lang.ref.Reference: java.lang.Object get()>
<java.awt.event.ComponentEvent: java.awt.Component getComponent()>
<java.lang.SecurityManager: void checkPropertyAccess(java.lang.String)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setSeconds(int)>
<sun.awt.datatransfer.DataTransferer: sun.awt.datatransfer.DataTransferer getInstance()>
<sun.awt.SunToolkit: sun.awt.AppContext targetToAppContext(java.lang.Object)>
<javax.swing.text.AbstractDocument: void handleInsertString(int,java.lang.String,javax.swing.text.AttributeSet)>
<java.util.NoSuchElementException: void <init>()>
<javax.swing.RepaintManager: void markCompletelyClean(javax.swing.JComponent)>
<java.util.Formatter$FormatSpecifier: void checkInteger()>
<java.util.logging.LogRecord: void setLoggerName(java.lang.String)>
<java.awt.geom.AffineTransform: double getShearX()>
<javax.swing.text.SegmentCache: void releaseSegment(javax.swing.text.Segment)>
<javax.swing.JComponent: void setUI(javax.swing.plaf.ComponentUI)>
<java.util.IllegalFormatPrecisionException: void <init>(int)>
<javax.swing.RepaintManager: boolean isDoubleBufferingEnabled()>
<java.util.Currency: java.lang.String getCurrencyCode()>
<java.awt.ComponentOrientation: boolean isLeftToRight()>
<java.awt.AWTEventMulticaster: java.util.EventListener removeInternal(java.util.EventListener,java.util.EventListener)>
<javax.swing.TransferHandler$TransferSupport: void setDNDVariables(java.awt.Component,java.awt.dnd.DropTargetEvent)>
<java.awt.LightweightDispatcher: void enableEvents(long)>
<sun.reflect.UnsafeStaticIntegerFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<java.awt.KeyboardFocusManager: void <init>()>
<java.text.AttributedString: int ensureRunBreak(int)>
<java.io.BufferedWriter: void newLine()>
<java.util.regex.Pattern: int c()>
<sun.java2d.pipe.ShapeSpanIterator: void appendPath(java.awt.geom.PathIterator)>
<sun.java2d.SurfaceData: sun.java2d.loops.SurfaceType getSurfaceType()>
<java.util.regex.Pattern: int nextEscaped()>
<java.util.regex.Pattern: java.util.regex.Pattern$Node group0()>
<java.awt.Component: boolean action(java.awt.Event,java.lang.Object)>
<java.util.logging.LogManager$LoggerWeakRef: void <init>(java.util.logging.LogManager,java.util.logging.Logger)>
<java.io.OutputStream: void <init>()>
<java.awt.Component: void enable()>
<sun.font.AttributeValues: boolean i_validate(sun.font.EAttribute)>
<javax.swing.UIManager$2: void <init>()>
<java.util.logging.LogManager: java.util.logging.LogManager getLogManager()>
<java.awt.geom.AffineTransform: void <init>(double,double,double,double,double,double,int)>
<javax.swing.text.SegmentCache: void releaseSharedSegment(javax.swing.text.Segment)>
<java.lang.Class: boolean isEnum()>
<java.awt.Window: void setBounds(int,int,int,int)>
<sun.misc.SoftCache$ValueCell: sun.misc.SoftCache$ValueCell create(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue)>
<sun.awt.AWTAutoShutdown: sun.awt.AWTAutoShutdown getInstance()>
<java.util.Properties: void <init>()>
<java.awt.KeyboardFocusManager: java.awt.event.FocusEvent retargetFocusLost(java.awt.event.FocusEvent)>
<java.awt.Component: void setVisible(boolean)>
<java.awt.Component: void relocateComponent()>
<java.lang.NullPointerException: void <init>(java.lang.String)>
<java.awt.image.DirectColorModel: int getAlphaMask()>
<java.beans.PropertyChangeSupport$PropertyChangeListenerMap: void <init>()>
<sun.misc.FloatingDecimal: void appendTo(java.lang.Appendable)>
<java.lang.Character: int codePointBeforeImpl(char[],int,int)>
<javax.swing.ArrayTable: java.lang.Object get(java.lang.Object)>
<javax.swing.JViewport: void <init>()>
<javax.swing.plaf.metal.DefaultMetalTheme$WindowsFontDelegate: void <init>()>
<java.awt.dnd.DropTargetDropEvent: java.awt.Point getLocation()>
<java.io.File: java.io.File[] listFiles()>
<java.security.Policy: boolean implies(java.security.ProtectionDomain,java.security.Permission)>
<java.net.InetAddress: void <init>()>
<java.io.File: java.io.File getParentFile()>
<java.lang.Enum: int ordinal()>
<java.util.WeakHashMap: void expungeStaleEntries()>
<java.awt.image.VolatileImage: int getTransparency()>
<java.awt.EventQueue: boolean noEvents()>
<java.util.regex.Pattern$CIBackRef: void <init>(int,boolean)>
<java.awt.Component: void addNotify()>
<javax.swing.ArrayTable: boolean isArray()>
<javax.swing.text.AbstractDocument$1: void <init>(javax.swing.text.AbstractDocument)>
<java.awt.Component: java.awt.Font getFont_NoClientCode()>
<java.awt.AWTKeyStroke: int getVKValue(java.lang.String)>
<javax.swing.RepaintManager: javax.swing.RepaintManager currentManager(sun.awt.AppContext)>
<javax.swing.text.AbstractDocument: void fireInsertUpdate(javax.swing.event.DocumentEvent)>
<sun.reflect.Label: void <init>()>
<java.io.PrintWriter: void write(java.lang.String)>
<java.io.PrintStream: void ensureOpen()>
<java.awt.dnd.DropTarget: void clearAutoscroll()>
<javax.swing.JTextArea: void setFont(java.awt.Font)>
<java.awt.datatransfer.SystemFlavorMap: void store(java.lang.Object,java.lang.Object,java.util.Map)>
<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$HashEntry entryForHash(java.util.concurrent.ConcurrentHashMap$Segment,int)>
<javax.swing.text.StyleContext$SmallAttributeSet: void <init>(javax.swing.text.StyleContext,javax.swing.text.AttributeSet)>
<javax.swing.text.JTextComponent: void setEditable(boolean)>
<javax.swing.JPopupMenu: void setSelectionModel(javax.swing.SingleSelectionModel)>
<java.lang.Double: java.lang.Double valueOf(java.lang.String)>
<java.util.Calendar: void complete()>
<java.util.concurrent.locks.LockSupport: void unpark(java.lang.Thread)>
<java.awt.dnd.DropTarget: void doSetDefaultActions(int)>
<java.util.HashMap: java.lang.Object remove(java.lang.Object)>
<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>
<java.awt.Component: void autoProcessMouseWheel(java.awt.event.MouseWheelEvent)>
<sun.java2d.loops.SurfaceType: boolean equals(java.lang.Object)>
<java.awt.dnd.DropTargetContext: java.awt.dnd.DropTarget getDropTarget()>
<java.awt.Dialog: boolean isModal_NoClientCode()>
<javax.swing.DefaultSingleSelectionModel: void <init>()>
<java.util.logging.LogManager$LoggerContext: void <init>()>
<javax.swing.JButton: void <init>()>
<javax.swing.text.AbstractDocument$ElementEdit: void <init>(javax.swing.text.Element,int,javax.swing.text.Element[],javax.swing.text.Element[])>
<javax.swing.Timer: void stop()>
<java.awt.image.ColorModel: int getTransferType()>
<java.lang.String: int indexOf(java.lang.String)>
<java.io.InputStream: int read(byte[],int,int)>
<javax.swing.LookAndFeel: javax.swing.UIDefaults getDefaults()>
<java.lang.Class: boolean isCheckMemberAccessOverridden(java.lang.SecurityManager)>
<java.io.File$LazyInitialization: java.lang.String temporaryDirectory()>
<java.awt.Container: java.awt.Component[] getComponents_NoClientCode()>
<javax.swing.TimerQueue: void startIfNeeded()>
<java.lang.Character: int toChars(int,char[],int)>
<java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>
<sun.reflect.ClassFileAssembler: void opc_goto(sun.reflect.Label)>
<sun.reflect.ClassFileAssembler: void opc_i2f()>
<java.util.ResourceBundle$Control: java.lang.String toBundleName(java.lang.String,java.util.Locale)>
<sun.swing.DefaultLookup: void <init>()>
<sun.security.provider.PolicyFile$4: void <init>(sun.security.provider.PolicyFile,sun.security.provider.PolicyFile$PolicyInfo)>
<java.awt.image.Raster: int getNumBands()>
<sun.misc.ThreadGroupUtils: java.lang.ThreadGroup getRootThreadGroup()>
<sun.reflect.Reflection: boolean verifyMemberAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>
<java.util.regex.Pattern: int u()>
<java.awt.Event: boolean isConsumed()>
<java.util.ArrayList: java.util.List subList(int,int)>
<java.io.BufferedWriter: void ensureOpen()>
<java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>
<javax.swing.text.AbstractDocument: void fireRemoveUpdate(javax.swing.event.DocumentEvent)>
<java.text.Format: java.lang.String format(java.lang.Object)>
<java.lang.ConditionalSpecialCasing: boolean isConditionMet(java.lang.String,int,java.util.Locale,int)>
<java.awt.Container: boolean containsFocus()>
<java.lang.Class: void checkInitted()>
<java.awt.Component: java.awt.Dimension preferredSize()>
<java.awt.event.KeyEvent: void setModifiers(int)>
<sun.util.calendar.CalendarSystem: void <init>()>
<java.util.regex.ASCII: boolean isDigit(int)>
<java.util.regex.Pattern$Node: void <init>()>
<sun.java2d.pipe.Region: void endRow(int[])>
<java.nio.charset.UnsupportedCharsetException: void <init>(java.lang.String)>
<sun.reflect.FieldAccessorImpl: void <init>()>
<java.awt.Component: boolean mouseDown(java.awt.Event,int,int)>
<sun.util.calendar.ZoneInfoFile: java.util.Map getZoneAliases()>
<javax.swing.text.StyleContext: javax.swing.text.Style addStyle(java.lang.String,javax.swing.text.Style)>
<sun.java2d.x11.X11SurfaceData: void <init>(sun.awt.X11ComponentPeer,sun.awt.X11GraphicsConfig,sun.java2d.loops.SurfaceType,java.awt.image.ColorModel)>
<java.awt.AWTEventMulticaster: java.awt.event.WindowListener remove(java.awt.event.WindowListener,java.awt.event.WindowListener)>
<java.lang.ref.SoftReference: java.lang.Object get()>
<sun.text.normalizer.NormalizerBase$Mode: java.lang.String normalize(java.lang.String,int)>
<sun.awt.SunGraphicsCallback: void constrainGraphics(java.awt.Graphics,java.awt.Rectangle)>
<java.io.InputStream: void <init>()>
<sun.misc.FDBigInt: void <init>(long,char[],int,int)>
<java.awt.Container: void addPropertyChangeListener(java.beans.PropertyChangeListener)>
<sun.nio.cs.StreamDecoder: sun.nio.cs.StreamDecoder forInputStreamReader(java.io.InputStream,java.lang.Object,java.lang.String)>
<java.util.Collections$SynchronizedList: void <init>(java.util.List)>
<java.lang.Math: double cos(double)>
<javax.swing.text.StyleContext$NamedStyle: void removeAttribute(java.lang.Object)>
<javax.swing.JComponent$2: void <init>(javax.swing.JComponent)>
<java.lang.String: int lastIndexOf(java.lang.String)>
<sun.misc.SoftCache$ValueCell: void <init>(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue)>
<javax.swing.JComponent: void firePropertyChange(java.lang.String,int,int)>
<javax.swing.JPopupMenu: void <init>(java.lang.String)>
<sun.misc.FloatingDecimal: sun.misc.FDBigInt constructPow52(int,int)>
<java.lang.Class: sun.reflect.ReflectionFactory getReflectionFactory()>
<java.text.ChoiceFormat: void <init>(java.lang.String)>
<java.text.Format: void <init>()>
<java.security.BasicPermission: void init(java.lang.String)>
<java.util.PropertyResourceBundle: void <init>(java.io.InputStream)>
<javax.swing.text.AbstractDocument$DefaultFilterBypass: void <init>(javax.swing.text.AbstractDocument)>
<java.lang.ClassLoader: java.lang.ClassLoader getSystemClassLoader()>
<java.awt.Event: void consume()>
<java.security.AccessControlContext: void checkPermission2(java.security.Permission)>
<java.io.File: boolean isInvalid()>
<sun.util.calendar.CalendarUtils: long floorDivide(long,long)>
<sun.net.www.ParseUtil: java.lang.String encodePath(java.lang.String,boolean)>
<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>
<sun.misc.FDBigInt: int quoRemIteration(sun.misc.FDBigInt)>
<javax.swing.KeyStroke: javax.swing.KeyStroke getKeyStroke(java.lang.String)>
<sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>
<java.net.NetworkInterface$1checkedAddresses: void <init>(java.net.NetworkInterface)>
<java.text.DecimalFormatSymbols: java.lang.Object clone()>
<java.awt.FlowLayout: void setAlignment(int)>
<java.awt.Component$3: void <init>(java.awt.Component,java.lang.Class)>
<sun.java2d.pipe.Region: sun.java2d.pipe.Region getIntersection(sun.java2d.pipe.Region)>
<javax.swing.ArrayTable: void grow()>
<sun.reflect.ConstructorAccessorImpl: void <init>()>
<java.lang.StringCoding: char[] safeTrim(char[],int,java.nio.charset.Charset)>
<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>
<javax.swing.text.Segment: char current()>
<java.awt.datatransfer.MimeType: void setParameter(java.lang.String,java.lang.String)>
<java.awt.EventQueue: void setCurrentEventAndMostRecentTime(java.awt.AWTEvent)>
<java.lang.Character: boolean isJavaIdentifierPart(int)>
<sun.swing.SwingUtilities2: boolean isComplexLayout(char[],int,int)>
<java.net.InetAddress: java.net.InetAddress$InetAddressHolder holder()>
<java.io.DataInputStream: void <init>(java.io.InputStream)>
<java.util.Calendar: void setTime(java.util.Date)>
<java.awt.SentEvent: void <init>()>
<javax.swing.AbstractButton: java.awt.event.ItemListener createItemListener()>
<java.io.File: boolean exists()>
<javax.swing.JLabel: void setHorizontalAlignment(int)>
<sun.reflect.UnsafeFieldAccessorFactory: sun.reflect.FieldAccessor newFieldAccessor(java.lang.reflect.Field,boolean)>
<java.awt.event.AdjustmentEvent: boolean getValueIsAdjusting()>
<java.awt.Component: boolean checkWindowClosingException()>
<java.util.logging.LogManager$4: void <init>(java.util.logging.LogManager,java.lang.String,java.util.logging.Logger)>
<java.net.URL: java.lang.String toExternalForm()>
<sun.java2d.loops.SurfaceType: int pixelFor(int,java.awt.image.ColorModel)>
<java.awt.Component: void subtractAndApplyShape(sun.java2d.pipe.Region)>
<javax.swing.RepaintManager: java.awt.Rectangle getDirtyRegion(javax.swing.JComponent)>
<java.net.InetAddress$InetAddressHolder: void init(java.lang.String,int)>
<sun.awt.im.InputContext: void logCreationFailed(java.lang.Throwable)>
<javax.swing.AbstractButton: void doClick()>
<java.text.DecimalFormat: void setMinimumFractionDigits(int)>
<javax.swing.JComponent: boolean isManagingFocus()>
<sun.reflect.Label: void add(sun.reflect.ClassFileAssembler,short,short,int)>
<java.util.ResourceBundle$BundleReference: void <init>(java.util.ResourceBundle,java.lang.ref.ReferenceQueue,java.util.ResourceBundle$CacheKey)>
<java.awt.LightweightDispatcher: void stopListeningForOtherDrags()>
<java.util.regex.Pattern$SliceU: void <init>(int[])>
<java.net.Inet6Address: byte[] getAddress()>
<java.util.regex.Pattern$Node: boolean study(java.util.regex.Pattern$TreeInfo)>
<java.awt.Component: void processMouseMotionEvent(java.awt.event.MouseEvent)>
<java.awt.image.Raster: java.awt.image.DataBuffer getDataBuffer()>
<java.awt.FlowLayout: void <init>(int,int,int)>
<java.lang.Thread: void init(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>
<javax.swing.JTextArea: void <init>()>
<java.security.Policy$3: void <init>(java.security.Policy)>
<java.lang.reflect.Constructor: void setConstructorAccessor(sun.reflect.ConstructorAccessor)>
<sun.font.AttributeValues: void update(sun.font.EAttribute)>
<java.awt.KeyboardFocusManager$2: void <init>()>
<java.lang.StringCoding: char[] access$100(char[],int,java.nio.charset.Charset)>
<sun.net.util.IPAddressUtil: boolean isIPv4MappedAddress(byte[])>
<java.lang.NumberFormatException: java.lang.NumberFormatException forInputString(java.lang.String)>
<sun.util.calendar.CalendarDate: boolean isStandardTime()>
<sun.util.LocaleServiceProviderPool: java.util.spi.LocaleServiceProvider findProvider(java.util.Locale)>
<java.text.AttributedString: void addAttributeRunData(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>
<java.net.Inet6Address$Inet6AddressHolder: void init(byte[],java.net.NetworkInterface)>
<java.security.Permission: void <init>(java.lang.String)>
<javax.swing.text.Segment: void <init>(char[],int,int)>
<javax.swing.JComponent: int getX()>
<java.beans.PropertyChangeEvent: void <init>(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Object)>
<java.awt.Container: void addNotify()>
<java.beans.PropertyChangeSupport: void <init>(java.lang.Object)>
<java.text.DecimalFormatSymbols: java.lang.String getExponentSeparator()>
<java.lang.Character: boolean isHighSurrogate(char)>
<java.lang.Class$EnclosingMethodInfo: void <init>(java.lang.Object[])>
<javax.swing.AbstractButton: void setIconTextGap(int)>
<java.awt.SentEvent: void <init>(java.awt.AWTEvent)>
<java.awt.Container: java.awt.Component add(java.awt.Component,int)>
<java.text.DateFormatSymbols: java.util.ResourceBundle cacheLookup(java.util.Locale)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setMinutes(int)>
<java.util.Formatter: void init(java.lang.Appendable,java.util.Locale)>
<javax.swing.JLabel: void setUI(javax.swing.plaf.LabelUI)>
<java.awt.KeyboardFocusManager: java.util.Set getDefaultFocusTraversalKeys(int)>
<javax.swing.JComponent: boolean isDoubleBuffered()>
<java.security.Permission: java.security.PermissionCollection newPermissionCollection()>
<javax.swing.JComponent: void paintComponent(java.awt.Graphics)>
<sun.font.AttributeValues: void setWeight(float)>
<javax.swing.JComponent: java.util.Set getManagingFocusBackwardTraversalKeys()>
<javax.swing.JTextField: void <init>()>
<sun.awt.image.PixelConverter: int rgbToPixel(int,java.awt.image.ColorModel)>
<javax.swing.JLabel: void setDisplayedMnemonicIndex(int)>
<java.awt.Component: java.awt.Component getNextFocusCandidate()>
<javax.swing.text.AbstractDocument: javax.swing.text.DocumentFilter getDocumentFilter()>
<sun.java2d.loops.FillParallelogram: sun.java2d.loops.FillParallelogram locate(sun.java2d.loops.SurfaceType,sun.java2d.loops.CompositeType,sun.java2d.loops.SurfaceType)>
<sun.java2d.x11.X11SurfaceData: boolean isAccelerationEnabled()>
<javax.swing.plaf.basic.BasicLookAndFeel: void <init>()>
<java.awt.image.RasterFormatException: void <init>(java.lang.String)>
<javax.swing.text.JTextComponent: void moveCaretPosition(int)>
<java.lang.Character: boolean isLowerCase(char)>
<java.io.PrintWriter: void write(java.lang.String,int,int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(char[],int,int)>
<java.awt.dnd.DropTarget: java.awt.dnd.DropTargetContext createDropTargetContext()>
<java.awt.Component: void removeNotify()>
<java.util.Random: int next(int)>
<java.nio.BufferUnderflowException: void <init>()>
<java.util.logging.LogManager: java.util.logging.Level getLevelProperty(java.lang.String,java.util.logging.Level)>
<java.awt.KeyboardFocusManager: void addKeyEventPostProcessor(java.awt.KeyEventPostProcessor)>
<java.nio.Buffer: int remaining()>
<java.util.regex.Pattern$SingleI: void <init>(int,int)>
<javax.swing.ScrollPaneLayout$UIResource: void <init>()>
<sun.java2d.pipe.RegionSpanIterator: void <init>(sun.java2d.pipe.Region)>
<javax.swing.JLayeredPane: void <init>()>
<java.nio.charset.Charset: java.nio.charset.Charset lookupExtendedCharset(java.lang.String)>
<sun.nio.cs.StreamDecoder: void <init>(java.io.InputStream,java.lang.Object,java.nio.charset.Charset)>
<java.awt.EventQueue: java.awt.event.PaintEvent mergePaintEvents(java.awt.event.PaintEvent,java.awt.event.PaintEvent)>
<java.nio.CharBuffer: java.nio.CharBuffer put(java.lang.String,int,int)>
<java.util.regex.Matcher: boolean matches()>
<java.lang.Character: int charCount(int)>
<java.awt.AWTEventMulticaster: java.awt.event.FocusListener add(java.awt.event.FocusListener,java.awt.event.FocusListener)>
<java.awt.Component: java.awt.Font getFont()>
<java.util.regex.Matcher: java.util.regex.Matcher reset()>
<javax.swing.text.AbstractDocument: void insertUpdate(javax.swing.text.AbstractDocument$DefaultDocumentEvent,javax.swing.text.AttributeSet)>
<java.awt.KeyboardFocusManager: void setCurrentSequencedEvent(java.awt.SequencedEvent)>
<java.lang.AbstractStringBuilder: void setLength(int)>
<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>
<java.util.regex.Pattern: java.util.regex.Pattern$Node sequence(java.util.regex.Pattern$Node)>
<java.util.Formatter: java.util.Formatter format(java.util.Locale,java.lang.String,java.lang.Object[])>
<javax.swing.JRootPane: void <init>()>
<java.util.logging.LogManager$LoggerContext: void processParentHandlers(java.util.logging.Logger,java.lang.String)>
<javax.swing.JComponent: void setPaintingChild(java.awt.Component)>
<java.nio.charset.Charset: void probeExtendedProvider()>
<sun.util.calendar.ZoneInfo: java.util.Map getCachedAliasTable()>
<javax.swing.JViewport: boolean isBlitting()>
<javax.swing.JScrollPane: javax.swing.JScrollBar createVerticalScrollBar()>
<java.awt.PopupMenu: void addNotify()>
<java.util.Formatter$Conversion: boolean isText(char)>
<java.awt.Container: void recursiveApplyCurrentShape(int,int)>
<javax.swing.text.PlainDocument: void <init>(javax.swing.text.AbstractDocument$Content)>
<javax.swing.JComponent: boolean getFlag(int)>
<sun.util.calendar.ZoneInfo: int getOffsets(long,int[],int)>
<sun.reflect.ClassFileAssembler: void opc_if_icmpeq(sun.reflect.Label)>
<java.text.DecimalFormatSymbols: char getDigit()>
<java.awt.Component: void subtractAndApplyShapeBelowMe()>
<sun.java2d.SunGraphics2D: void invalidatePipe()>
<java.nio.charset.Charset: java.lang.String name()>
<java.awt.IllegalComponentStateException: void <init>(java.lang.String)>
<java.util.HashSet: boolean add(java.lang.Object)>
<javax.swing.text.GapVector: int open(int,int)>
<sun.awt.X11GraphicsConfig: int getBitsPerPixel()>
<sun.nio.cs.StreamEncoder: void <init>(java.io.OutputStream,java.lang.Object,java.nio.charset.Charset)>
<java.text.DecimalFormatSymbols: char getDecimalSeparator()>
<sun.util.calendar.LocalGregorianCalendar$1: void <init>(java.lang.String)>
<java.awt.Font: boolean equals(java.lang.Object)>
<java.util.regex.ASCII: boolean isAlnum(int)>
<java.io.PrintWriter: void newLine()>
<javax.swing.JViewport: void fireStateChanged()>
<sun.reflect.ReflectionFactory: sun.reflect.ConstructorAccessor newConstructorAccessor(java.lang.reflect.Constructor)>
<java.util.concurrent.atomic.AtomicInteger: int get()>
<java.util.Currency: int getDefaultFractionDigits()>
<java.io.OutputStreamWriter: void flushBuffer()>
<sun.misc.FloatingDecimal: float stickyRound(double)>
<java.util.ResourceBundle$Control: java.util.List getCandidateLocales(java.lang.String,java.util.Locale)>
<java.nio.BufferOverflowException: void <init>()>
<java.awt.Component: boolean isEnabled()>
<java.util.ArrayList: java.lang.String outOfBoundsMsg(int)>
<sun.reflect.ClassFileAssembler: void setStack(int)>
<sun.reflect.UnsafeQualifiedStaticIntegerFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<java.util.regex.Pattern$BnM: void <init>(int[],int[],int[],java.util.regex.Pattern$Node)>
<sun.awt.CausedFocusEvent: void <init>(java.awt.Component,int,boolean,java.awt.Component,sun.awt.CausedFocusEvent$Cause)>
<javax.swing.AbstractButton: javax.swing.event.ChangeListener createChangeListener()>
<java.lang.String: boolean startsWith(java.lang.String,int)>
<java.util.IdentityHashMap: void init(int)>
<java.lang.Character: int codePointAt(java.lang.CharSequence,int)>
<java.awt.AWTKeyStroke: int mapOldModifiers(int)>
<java.awt.image.Raster: int getHeight()>
<java.util.ResourceBundle: boolean hasValidParentChain(java.util.ResourceBundle)>
<javax.swing.JPopupMenu: void updateUI()>
<java.util.Formatter$FormatSpecifier: void checkDateTime()>
<java.lang.Long: void <init>(long)>
<javax.swing.Autoscroller: void stop(javax.swing.JComponent)>
<javax.swing.Timer: void addActionListener(java.awt.event.ActionListener)>
<javax.swing.JMenu$WinListener: void <init>(javax.swing.JMenu,javax.swing.JPopupMenu)>
<java.awt.Component: java.awt.Container getFocusCycleRootAncestor()>
<sun.util.calendar.Gregorian$Date: void <init>(java.util.TimeZone)>
<javax.swing.DebugGraphics: void setDebugOptions(int)>
<sun.awt.image.SunVolatileImage: java.awt.Color getForeground()>
<sun.reflect.ClassFileAssembler: void emitMagicAndVersion()>
<javax.swing.JComponent: void setUIProperty(java.lang.String,java.lang.Object)>
<java.util.regex.Pattern: int read()>
<javax.swing.JComponent: void setToolTipText(java.lang.String)>
<sun.security.provider.PolicyFile$2: void <init>(sun.security.provider.PolicyFile,java.net.URL,sun.security.provider.PolicyFile$PolicyInfo)>
<java.awt.AlphaComposite: float getAlpha()>
<java.util.concurrent.DelayQueue: void <init>()>
<java.net.URL: int getPort()>
<javax.swing.JComponent: void setAlignmentY(float)>
<java.lang.Math: double tan(double)>
<javax.swing.RepaintManager: java.awt.Image getVolatileOffscreenBuffer(java.awt.Component,int,int)>
<javax.swing.JViewport: boolean canUseWindowBlitter()>
<java.awt.BorderLayout: void <init>()>
<java.lang.Character: int toUpperCase(int)>
<java.util.ResourceBundle$Control: java.util.List getFormats(java.lang.String)>
<java.awt.dnd.DropTarget: void <init>(java.awt.Component,int,java.awt.dnd.DropTargetListener,boolean)>
<java.awt.Component: java.awt.Point location_NoClientCode()>
<java.awt.event.ContainerEvent: void <init>(java.awt.Component,int,java.awt.Component)>
<java.awt.Component: java.awt.Rectangle getBounds(java.awt.Rectangle)>
<java.util.logging.Logger: boolean isLoggable(java.util.logging.Level)>
<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
<java.awt.Graphics: java.awt.Graphics create(int,int,int,int)>
<javax.swing.SwingUtilities: java.lang.Object appContextGet(java.lang.Object)>
<sun.misc.SoftCache$ValueCell: int access$210()>
<java.io.DataInputStream: void readFully(byte[],int,int)>
<javax.swing.JRootPane: void setLayeredPane(javax.swing.JLayeredPane)>
<java.text.Bidi: int getRunCount()>
<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)>
<sun.util.calendar.CalendarDate: int getZoneOffset()>
<java.awt.Component: java.awt.Rectangle bounds()>
<java.lang.Float: int floatToIntBits(float)>
<java.util.Formatter$FormatSpecifier: void checkText()>
<java.net.URL: java.net.URLStreamHandler getURLStreamHandler(java.lang.String)>
<sun.java2d.loops.SurfaceType: int getUniqueID()>
<java.io.OutputStream: void close()>
<sun.awt.image.SunVolatileImage: int getForcedAccelSurfaceType()>
<javax.swing.Timer: void setRepeats(boolean)>
<java.lang.reflect.Constructor: void acquireConstructorAccessor()>
<java.util.regex.Pattern$Pos: void <init>(java.util.regex.Pattern$Node)>
<java.util.SimpleTimeZone: int getOffset(sun.util.calendar.BaseCalendar,sun.util.calendar.BaseCalendar$Date,int,long)>
<java.lang.Throwable: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap$Values: void <init>(java.util.concurrent.ConcurrentHashMap)>
<java.io.File: java.io.File getAbsoluteFile()>
<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
<java.util.logging.LogManager$LoggerContext$1: void <init>(java.util.logging.LogManager$LoggerContext,java.util.logging.Logger,java.lang.String)>
<javax.swing.UIManager: java.lang.String getCrossPlatformLookAndFeelClassName()>
<java.util.SimpleTimeZone: int getOffsets(long,int[])>
<java.awt.Toolkit: java.lang.String getProperty(java.lang.String,java.lang.String)>
<java.lang.Error: void <init>()>
<sun.misc.FDBigInt: void <init>(sun.misc.FDBigInt)>
<java.beans.VetoableChangeSupport: void fireVetoableChange(java.lang.String,java.lang.Object,java.lang.Object)>
<java.awt.GraphicsEnvironment: boolean isHeadless()>
<java.awt.KeyboardFocusManager: java.awt.Window getNativeFocusedWindow()>
<javax.swing.JViewport: java.awt.Component getView()>
<sun.reflect.ClassFileAssembler: void opc_dup_x1()>
<java.text.StringCharacterIterator: void <init>(java.lang.String,int,int,int)>
<sun.awt.PostEventQueue: void flush()>
<java.io.PrintWriter: void flush()>
<java.lang.ThreadLocal: void set(java.lang.Object)>
<javax.swing.JComponent: java.awt.Rectangle getVisibleRect()>
<java.lang.ConditionalSpecialCasing$Entry: char[] getLowerCase()>
<sun.awt.SunToolkit: void checkAndSetPolicy(java.awt.Container,boolean)>
<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<java.lang.Long: void getChars(long,int,char[])>
<java.lang.IllegalArgumentException: void <init>(java.lang.String)>
<javax.swing.event.SwingPropertyChangeSupport: void <init>(java.lang.Object)>
<java.lang.Math: double max(double,double)>
<java.util.UnknownFormatFlagsException: void <init>(java.lang.String)>
<javax.swing.JViewport: void setUI(javax.swing.plaf.ViewportUI)>
<java.io.FileInputStream: void <init>(java.lang.String)>
<java.lang.Character: boolean isWhitespace(int)>
<java.awt.EventQueue: boolean coalescePeerEvent(sun.awt.PeerEvent)>
<javax.swing.SwingUtilities: java.awt.Rectangle computeIntersection(int,int,int,int,java.awt.Rectangle)>
<java.text.MessageFormat: int findKeyword(java.lang.String,java.lang.String[])>
<sun.reflect.AccessorGenerator: short ctorIndexForPrimitiveType(java.lang.Class)>
<java.awt.Window: void pack()>
<sun.util.calendar.BaseCalendar: int getMonthLength(sun.util.calendar.CalendarDate)>
<java.lang.ConditionalSpecialCasing: boolean isSoftDotted(int)>
<java.lang.AbstractStringBuilder: void getChars(int,int,char[],int)>
<java.lang.IllegalAccessException: void <init>(java.lang.String)>
<java.awt.datatransfer.SystemFlavorMap: boolean continueLine(java.lang.String)>
<java.awt.Component: void applyCurrentShape()>
<java.util.concurrent.CopyOnWriteArrayList: void <init>()>
<java.awt.Menu: int getItemCount()>
<java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(java.lang.Object)>
<sun.util.calendar.AbstractCalendar: long getDayOfWeekDateAfter(long,int)>
<sun.reflect.AccessorGenerator: void emitMethod(short,int,sun.reflect.ClassFileAssembler,sun.reflect.ClassFileAssembler,short[])>
<javax.swing.text.SegmentCache: javax.swing.text.Segment getSegment()>
<java.util.regex.Pattern$BnMS: void <init>(int[],int[],int[],java.util.regex.Pattern$Node)>
<java.util.HashMap: void <init>(java.util.Map)>
<java.util.logging.LogManager$LoggerContext: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String)>
<java.lang.Boolean: boolean parseBoolean(java.lang.String)>
<java.util.regex.Pattern$BmpCharProperty: void <init>(java.util.regex.Pattern$1)>
<java.lang.ClassLoader: java.net.URL findResource(java.lang.String)>
<java.lang.ThreadLocal: java.lang.Object initialValue()>
<sun.reflect.MethodAccessorGenerator: boolean usesPrimitiveTypes()>
<java.io.Reader: int read()>
<java.text.RuleBasedBreakIterator: void readTables(java.lang.String)>
<javax.swing.JPanel: void <init>(boolean)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
<sun.awt.SunToolkit$2: void <init>()>
<java.lang.StringBuilder: java.lang.StringBuilder append(double)>
<java.awt.geom.Point2D: boolean equals(java.lang.Object)>
<sun.awt.PaintEventDispatcher: void <init>()>
<java.lang.ThreadGroup: void checkAccess()>
<java.awt.AWTEventMulticaster: java.awt.event.MouseListener add(java.awt.event.MouseListener,java.awt.event.MouseListener)>
<javax.swing.JComponent: boolean checkIfChildObscuredBySibling()>
<java.util.regex.Pattern$Node: boolean match(java.util.regex.Matcher,int,java.lang.CharSequence)>
<java.util.Locale: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<java.text.StringCharacterIterator: void <init>(java.lang.String,int)>
<java.lang.AssertionError: void <init>(int)>
<sun.misc.VM: boolean isBooted()>
<java.nio.charset.MalformedInputException: void <init>(int)>
<sun.util.calendar.BaseCalendar$Date: void <init>(java.util.TimeZone)>
<java.lang.ConditionalSpecialCasing: int toUpperCaseEx(java.lang.String,int,java.util.Locale)>
<java.io.ByteArrayOutputStream: void <init>(int)>
<javax.swing.plaf.ComponentUI: void paint(java.awt.Graphics,javax.swing.JComponent)>
<java.security.AccessController: void checkPermission(java.security.Permission)>
<java.util.logging.LogRecord: void <init>(java.util.logging.Level,java.lang.String)>
<java.text.SimpleDateFormat: java.lang.String getCalendarName()>
<java.awt.Component: boolean transferFocus(boolean)>
<sun.awt.OSInfo: java.security.PrivilegedAction getOSTypeAction()>
<sun.java2d.x11.X11Renderer$X11TracingRenderer: void <init>()>
<java.util.Arrays: void sort(java.lang.Object[],java.util.Comparator)>
<java.lang.ThreadLocal$ThreadLocalMap: java.lang.ThreadLocal$ThreadLocalMap$Entry getEntryAfterMiss(java.lang.ThreadLocal,int,java.lang.ThreadLocal$ThreadLocalMap$Entry)>
<java.awt.Component: java.awt.Window getContainingWindow()>
<java.awt.event.FocusEvent: java.awt.Component getOppositeComponent()>
<java.lang.ThreadLocal: java.lang.Object get()>
<sun.reflect.ClassFileAssembler: void emitByte(byte)>
<sun.awt.im.InputMethodLocator: java.awt.im.spi.InputMethodDescriptor getDescriptor()>
<sun.reflect.ClassFileAssembler: void emitConstantPoolClass(short)>
<java.awt.event.KeyEvent: boolean isActionKey()>
<sun.util.calendar.ZoneInfo: java.util.TimeZone getTimeZone(java.lang.String)>
<java.lang.SecurityManager: void checkCreateClassLoader()>
<java.util.Collections$UnmodifiableSet: void <init>(java.util.Set)>
<sun.misc.URLClassPath$Loader: sun.misc.Resource getResource(java.lang.String,boolean)>
<java.util.regex.Pattern: void compile()>
<java.awt.event.KeyEvent: void setKeyChar(char)>
<javax.swing.JComponent: boolean isLightweightComponent(java.awt.Component)>
<javax.swing.text.StyleContext$NamedStyle: void addAttribute(java.lang.Object,java.lang.Object)>
<java.lang.Class: java.lang.reflect.Field searchFields(java.lang.reflect.Field[],java.lang.String)>
<java.awt.Component: void setFocusTraversalKeys_NoIDCheck(int,java.util.Set)>
<java.util.SimpleTimeZone: void decodeStartRule()>
<java.util.HashMap: java.lang.Object get(java.lang.Object)>
<java.security.AccessControlContext: void checkPermission(java.security.Permission)>
<java.awt.Rectangle: boolean intersects(java.awt.Rectangle)>
<java.util.HashMap: int indexFor(int,int)>
<java.io.Reader: int read(char[])>
<javax.swing.text.AbstractDocument$AbstractElement: void checkForIllegalCast()>
<java.awt.Component: int getHeight()>
<java.awt.KeyboardFocusManager: void clearMostRecentFocusOwner(java.awt.Component)>
<javax.swing.text.JTextComponent: void setCaretPosition(int)>
<java.net.Inet6Address$Inet6AddressHolder: void <init>(java.net.Inet6Address,java.net.Inet6Address$1)>
<sun.reflect.DelegatingConstructorAccessorImpl: void <init>(sun.reflect.ConstructorAccessorImpl)>
<java.security.AccessControlContext: sun.security.util.Debug getDebug()>
<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
<sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo getZoneInfo(java.lang.String)>
<java.lang.ThreadLocal: java.lang.ThreadLocal$ThreadLocalMap createInheritedMap(java.lang.ThreadLocal$ThreadLocalMap)>
<java.util.regex.Pattern$GroupCurly: void <init>(java.util.regex.Pattern$Node,int,int,int,int,int,boolean)>
<sun.reflect.NativeConstructorAccessorImpl: void <init>(java.lang.reflect.Constructor)>
<java.util.PriorityQueue: int indexOf(java.lang.Object)>
<java.lang.Math: float max(float,float)>
<java.awt.dnd.DropTargetContext: void setTargetActions(int)>
<java.util.ResourceBundle: void throwMissingResourceException(java.lang.String,java.util.Locale,java.lang.Throwable)>
<java.util.ArrayList$Itr: void <init>(java.util.ArrayList)>
<java.io.ByteArrayInputStream: void <init>(byte[])>
<java.util.WeakHashMap: void <init>()>
<java.awt.AWTKeyStroke: java.awt.VKCollection getVKCollection()>
<java.io.EOFException: void <init>()>
<java.lang.NoSuchMethodException: void <init>(java.lang.String)>
<java.net.URL: java.net.URLConnection openConnection()>
<java.awt.Window: java.awt.Component getTemporaryLostComponent()>
<java.awt.image.ColorModel: int getBlue(java.lang.Object)>
<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])>
<java.awt.im.InputContext: void dispose()>
<java.awt.image.ColorModel: int getPixelSize()>
<sun.reflect.UnsafeQualifiedStaticFloatFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<javax.swing.text.GapVector: void close(int,int)>
<java.awt.KeyboardFocusManager: java.awt.event.FocusEvent retargetFocusGained(java.awt.event.FocusEvent)>
<java.text.DecimalFormat: int getMaximumFractionDigits()>
<java.io.File: boolean isAbsolute()>
<java.util.Calendar: int get(int)>
<java.awt.Component: void repaint(int,int,int,int)>
<javax.swing.JCheckBox: void <init>(java.lang.String,javax.swing.Icon,boolean)>
<java.security.PermissionCollection: boolean isReadOnly()>
<java.io.FilePermission$1: void <init>(java.io.FilePermission)>
<sun.awt.dnd.SunDropTargetContextPeer: int access$402(sun.awt.dnd.SunDropTargetContextPeer,int)>
<java.text.DecimalFormatSymbols: java.lang.String getCurrencySymbol()>
<sun.java2d.SurfaceDataProxy: boolean isCachingAllowed()>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty clazz(boolean)>
<java.util.regex.Pattern: int peek()>
<java.net.Inet6Address$Inet6AddressHolder: void setAddr(byte[])>
<java.lang.ConditionalSpecialCasing: char[] lookUpTable(java.lang.String,int,java.util.Locale,boolean)>
<sun.nio.cs.StreamEncoder: void flushBuffer()>
<sun.java2d.x11.X11VolatileSurfaceManager: sun.java2d.SurfaceData initAcceleratedSurface()>
<javax.swing.DebugGraphics: void <init>(java.awt.Graphics,javax.swing.JComponent)>
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>
<javax.swing.RepaintManager: java.awt.Image _getOffscreenBuffer(java.awt.Component,int,int)>
<java.lang.Float: boolean isInfinite(float)>
<java.awt.geom.Point2D: void <init>()>
<java.awt.Toolkit: java.awt.Insets getScreenInsets(java.awt.GraphicsConfiguration)>
<sun.awt.AWTAutoShutdown: boolean isReadyToShutdown()>
<java.awt.datatransfer.DataFlavor: java.lang.String getPrimaryType()>
<java.lang.ThreadGroup: java.lang.ThreadGroup getParent()>
<java.awt.event.ItemEvent: java.lang.Object getItem()>
<sun.awt.image.SunVolatileImage: java.awt.image.BufferedImage getBackupImage()>
<java.util.Date: sun.util.calendar.BaseCalendar getCalendarSystem(sun.util.calendar.BaseCalendar$Date)>
<java.util.concurrent.atomic.AtomicReference: void <init>()>
<sun.reflect.ClassFileAssembler: void opc_l2d()>
<sun.misc.FDBigInt: sun.misc.FDBigInt sub(sun.misc.FDBigInt)>
<java.awt.Point: void <init>(int,int)>
<java.awt.Component: boolean requestFocusHelper(boolean,boolean,sun.awt.CausedFocusEvent$Cause)>
<java.lang.ClassLoader: java.lang.Class findLoadedClass(java.lang.String)>
<java.util.Dictionary: void <init>()>
<sun.util.calendar.ZoneInfo: int getTransitionIndex(long,int)>
<sun.font.AttributeValues: void setPosture(float)>
<javax.swing.DefaultButtonModel: void <init>()>
<java.awt.KeyboardFocusManager: java.awt.event.FocusEvent retargetUnexpectedFocusEvent(java.awt.event.FocusEvent)>
<java.awt.Container: void invalidate()>
<javax.swing.text.AbstractDocument: javax.swing.text.AbstractDocument$AttributeContext getAttributeContext()>
<sun.reflect.ClassFileAssembler: void append(sun.reflect.ClassFileAssembler)>
<javax.swing.RepaintManager: boolean useVolatileDoubleBuffer()>
<javax.swing.JPasswordField: void setEchoChar(char)>
<javax.swing.RepaintManager: void beginPaint()>
<javax.swing.DefaultButtonModel: void setEnabled(boolean)>
<java.util.Formatter$Flags: java.util.Formatter$Flags parse(java.lang.String)>
<java.awt.Component: boolean isOpaque()>
<sun.awt.PaintEventDispatcher: void setPaintEventDispatcher(sun.awt.PaintEventDispatcher)>
<java.util.HashMap$Entry: void recordAccess(java.util.HashMap)>
<java.awt.Container: java.awt.Component getComponent(int)>
<java.util.regex.Pattern$3: void <init>(java.util.regex.Pattern,int,int)>
<java.awt.ImageCapabilities: boolean isAccelerated()>
<sun.awt.SunToolkit: java.awt.FocusTraversalPolicy createLayoutPolicy()>
<java.lang.AbstractStringBuilder: void expandCapacity(int)>
<javax.swing.text.AbstractDocument$LeafElement: void <init>(javax.swing.text.AbstractDocument,javax.swing.text.Element,javax.swing.text.AttributeSet,int,int)>
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.util.ResourceBundle$Control)>
<sun.awt.NullComponentPeer: void <init>()>
<java.text.DateFormat: java.text.DateFormat getTimeInstance(int,java.util.Locale)>
<java.util.regex.ASCII: boolean isType(int,int)>
<sun.awt.im.InputContext: java.awt.Window getComponentWindow(java.awt.Component)>
<javax.swing.ToolTipManager: void unregisterComponent(javax.swing.JComponent)>
<javax.swing.AbstractButton: void updateMnemonicProperties()>
<java.text.NumberFormat: void setParseIntegerOnly(boolean)>
<java.util.regex.Pattern$All: void <init>()>
<sun.reflect.ClassFileAssembler: void opc_aconst_null()>
<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String,int)>
<java.lang.StringBuilder: void <init>(int)>
<java.util.ResourceBundle: java.util.ResourceBundle findBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.List,int,java.util.ResourceBundle$Control,java.util.ResourceBundle)>
<java.awt.Container: void validateTree()>
<java.lang.ThreadLocal$ThreadLocalMap: void rehash()>
<java.util.Collections$SynchronizedCollection: void <init>(java.util.Collection)>
<java.util.HashMap: void addEntry(int,java.lang.Object,java.lang.Object,int)>
<javax.swing.ArrayTable: void <init>()>
<javax.swing.JMenu: java.awt.Component add(java.awt.Component)>
<javax.swing.RepaintManager: void endPaint()>
<java.util.GregorianCalendar: void <init>(java.util.TimeZone)>
<sun.awt.util.IdentityArrayList: int indexOf(java.lang.Object)>
<javax.swing.LayoutFocusTraversalPolicy: void <init>()>
<java.util.PropertyPermission: void <init>(java.lang.String,java.lang.String)>
<sun.awt.PostEventQueue: void postEvent(java.awt.AWTEvent)>
<sun.util.calendar.AbstractCalendar: long getDayOfWeekDateBefore(long,int)>
<java.util.AbstractList: void rangeCheckForAdd(int)>
<java.util.logging.Level: java.lang.String access$200(java.util.logging.Level)>
<java.lang.Boolean: boolean getBoolean(java.lang.String)>
<java.awt.Container: void recursiveApplyCurrentShape(int)>
<java.text.SimpleDateFormat: void initialize(java.util.Locale)>
<sun.misc.FloatingDecimal: sun.misc.FDBigInt multPow52(sun.misc.FDBigInt,int,int)>
<java.beans.VetoableChangeSupport: void fire(java.beans.VetoableChangeListener[],java.beans.PropertyChangeEvent)>
<sun.misc.FloatingDecimal: void developLongDigits(int,long,long)>
<java.util.AbstractQueue: void <init>()>
<java.awt.Component: boolean hasFocus()>
<java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)>
<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,boolean,boolean)>
<java.util.regex.Pattern$CharProperty$1: void <init>(java.util.regex.Pattern$CharProperty)>
<javax.swing.UIManager: javax.swing.UIDefaults getDefaults()>
<javax.swing.RepaintManager$DoubleBufferInfo: void <init>(javax.swing.RepaintManager)>
<java.nio.charset.CharsetDecoder: java.nio.charset.Charset charset()>
<java.lang.Integer: java.lang.String toUnsignedString(int,int)>
<java.awt.Component: void setBackground(java.awt.Color)>
<java.util.AbstractCollection: boolean isEmpty()>
<java.util.regex.Pattern: void RemoveQEQuoting()>
<java.awt.Component: void adjustListeningChildrenOnParent(long,int)>
<java.util.ResourceBundle$CacheKey: long access$702(java.util.ResourceBundle$CacheKey,long)>
<java.awt.datatransfer.MimeTypeParameterList: void parse(java.lang.String)>
<sun.reflect.UnsafeIntegerFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<java.lang.Character: int getType(int)>
<javax.swing.text.AbstractDocument$AbstractElement: void <init>(javax.swing.text.AbstractDocument,javax.swing.text.Element,javax.swing.text.AttributeSet)>
<java.util.Vector: int indexOf(java.lang.Object)>
<java.awt.KeyboardFocusManager: java.awt.Container getCurrentFocusCycleRoot()>
<sun.java2d.SurfaceData: void <init>(sun.java2d.StateTrackableDelegate,sun.java2d.loops.SurfaceType,java.awt.image.ColorModel)>
<java.awt.Component: java.awt.im.InputContext getInputContext()>
<javax.swing.JComponent: void <init>()>
<java.io.FileInputStream: void close()>
<javax.swing.SortingFocusTraversalPolicy: void <init>(java.util.Comparator)>
<javax.swing.FocusManager: boolean isFocusManagerEnabled()>
<java.util.regex.Pattern$Behind: void <init>(java.util.regex.Pattern$Node,int,int)>
<java.awt.Window: void setBounds(java.awt.Rectangle)>
<java.text.BreakIterator: java.text.BreakIterator createBreakInstance(java.util.Locale,int,java.lang.String,java.lang.String)>
<sun.reflect.AccessorGenerator: void emitBoxingContantPoolEntries()>
<java.awt.Component: int getY()>
<javax.swing.text.StyleContext: javax.swing.text.MutableAttributeSet createLargeAttributeSet(javax.swing.text.AttributeSet)>
<java.lang.Math: long abs(long)>
<java.nio.charset.Charset: void cache(java.lang.String,java.nio.charset.Charset)>
<sun.java2d.pipe.Region: void <init>(int,int,int,int)>
<java.awt.Component: boolean isFocusable()>
<java.lang.String: int lastIndexOf(int,int)>
<java.util.logging.Logger: void setParent(java.util.logging.Logger)>
<java.util.regex.Matcher: java.lang.StringBuffer appendTail(java.lang.StringBuffer)>
<java.awt.Window: void addNotify()>
<javax.swing.text.JTextComponent: void setDragEnabled(boolean)>
<java.beans.PropertyChangeSupport: void fire(java.beans.PropertyChangeListener[],java.beans.PropertyChangeEvent)>
<java.util.HashMap: java.util.Collection values()>
<java.lang.ConditionalSpecialCasing: boolean isMoreAbove(java.lang.String,int)>
<java.lang.ClassLoader: boolean isAncestor(java.lang.ClassLoader)>
<java.text.BreakIterator: boolean isBoundary(int)>
<javax.swing.ToolTipManager$AccessibilityKeyListener: void <init>(javax.swing.ToolTipManager,javax.swing.ToolTipManager$1)>
<java.io.OutputStream: void write(byte[],int,int)>
<javax.swing.UIManager: javax.swing.UIManager$LAFState getLAFState()>
<sun.reflect.ClassFileAssembler: void opc_aload_2()>
<java.lang.Error: void <init>(java.lang.String)>
<java.util.AbstractCollection: boolean addAll(java.util.Collection)>
<java.lang.AbstractStringBuilder: void <init>(int)>
<javax.swing.UIManager$LAFState: void <init>()>
<java.lang.Throwable: java.lang.String getMessage()>
<java.io.FileInputStream: boolean isRunningFinalize()>
<sun.java2d.x11.X11SurfaceData: sun.java2d.loops.SurfaceType getSurfaceType(sun.awt.X11GraphicsConfig,int)>
<java.awt.Menu: java.awt.MenuItem getItemImpl(int)>
<java.lang.ref.Reference: void clear()>
<java.util.TimeZone: void setID(java.lang.String)>
<java.awt.Event: void <init>(java.lang.Object,long,int,int,int,int,int)>
<java.util.Calendar: void set(int,int)>
<java.awt.Container: void remove(int)>
<java.awt.datatransfer.MimeTypeParameterList: void <init>(java.lang.String)>
<java.io.BufferedReader: void ensureOpen()>
<sun.security.action.GetPropertyAction: void <init>(java.lang.String)>
<javax.swing.event.ChangeEvent: void <init>(java.lang.Object)>
<java.awt.Component: boolean handleEvent(java.awt.Event)>
<javax.swing.JComponent: java.lang.String getToolTipText()>
<java.awt.Component: java.lang.String getName()>
<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>
<java.text.BreakIterator$BreakIteratorCache: java.util.Locale getLocale()>
<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator(java.text.AttributedCharacterIterator$Attribute[],int,int)>
<java.text.Bidi: int getLength()>
<javax.swing.JScrollBar: void <init>(int,int,int,int,int)>
<java.lang.ref.SoftReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
<sun.net.util.IPAddressUtil: byte[] textToNumericFormatV4(java.lang.String)>
<sun.reflect.ClassFileAssembler: int getStack()>
<java.util.Formatter$Flags: java.util.Formatter$Flags remove(java.util.Formatter$Flags)>
<sun.reflect.ClassFileAssembler: void opc_arraylength()>
<java.lang.ThreadLocal$ThreadLocalMap: int expungeStaleEntry(int)>
<javax.swing.JScrollPane: java.awt.Component getCorner(java.lang.String)>
<sun.misc.FloatingDecimal: void roundup()>
<java.awt.image.ColorModel: boolean isCompatibleRaster(java.awt.image.Raster)>
<java.awt.Graphics: boolean hitClip(int,int,int,int)>
<sun.util.LocaleServiceProviderPool: java.util.Locale getParentLocale(java.util.Locale)>
<java.io.DataInputStream: float readFloat()>
<sun.java2d.x11.XSurfaceData: void <init>(sun.java2d.loops.SurfaceType,java.awt.image.ColorModel)>
<java.awt.event.MouseMotionAdapter: void <init>()>
<java.util.regex.Pattern: java.util.regex.Pattern$Node closure(java.util.regex.Pattern$Node)>
<java.util.StringTokenizer: java.lang.String nextToken()>
<java.security.CodeSource: java.net.URL getLocation()>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence,int,int)>
<java.util.logging.Logger: void setLevel(java.util.logging.Level)>
<java.awt.Component: boolean isVisible()>
<sun.util.calendar.ZoneInfo: java.util.SimpleTimeZone getLastRuleInstance()>
<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>
<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)>
<javax.swing.JViewport: java.awt.Point getViewLocation()>
<java.awt.event.FocusEvent: void <init>(java.awt.Component,int,boolean)>
<java.util.TimeZone: java.util.TimeZone getDefaultInAppContext()>
<sun.util.resources.LocaleData: java.util.ResourceBundle getNumberFormatData(java.util.Locale)>
<java.awt.datatransfer.DataFlavor: void initialize(java.lang.String,java.lang.String,java.lang.ClassLoader)>
<java.lang.Double: double doubleValue()>
<javax.swing.undo.CompoundEdit: void <init>()>
<sun.reflect.ClassFileAssembler: short getLength()>
<javax.swing.UIManager: java.awt.Color getColor(java.lang.Object)>
<java.awt.Component: void reshapeNativePeer(int,int,int,int,int)>
<sun.misc.FDBigInt: int 'cmp'(sun.misc.FDBigInt)>
<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
<java.util.HashSet: boolean remove(java.lang.Object)>
<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentAt(java.util.concurrent.ConcurrentHashMap$Segment[],int)>
<java.awt.geom.Rectangle2D: boolean equals(java.lang.Object)>
<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int)>
<java.lang.ConditionalSpecialCasing: char[] toLowerCaseCharArray(java.lang.String,int,java.util.Locale)>
<java.util.logging.Logger$1: void <init>(java.util.Locale)>
<java.awt.image.BufferedImage: boolean isStandard(java.awt.image.ColorModel,java.awt.image.WritableRaster)>
<java.lang.Class: boolean isAsciiDigit(char)>
<java.awt.event.InputEvent: void <init>(java.awt.Component,int,long,int)>
<javax.swing.LookAndFeel: void provideErrorFeedback(java.awt.Component)>
<java.lang.Object: boolean equals(java.lang.Object)>
<sun.util.calendar.CalendarUtils: long mod(long,long)>
<javax.swing.UIManager: javax.swing.LookAndFeel getLookAndFeel()>
<java.lang.ClassNotFoundException: void <init>(java.lang.String)>
<java.awt.Component: void show(boolean)>
<sun.java2d.loops.DrawLine: sun.java2d.loops.DrawLine locate(sun.java2d.loops.SurfaceType,sun.java2d.loops.CompositeType,sun.java2d.loops.SurfaceType)>
<java.awt.datatransfer.SystemFlavorMap: java.awt.datatransfer.FlavorMap getDefaultFlavorMap()>
<java.util.regex.Pattern: int x()>
<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>
<java.awt.event.MouseEvent: int getClickCount()>
<javax.swing.JComponent: void setEnabled(boolean)>
<java.util.regex.Pattern$BitClass: java.util.regex.Pattern$BitClass add(int,int)>
<java.awt.SentEvent: void dispose()>
<java.util.regex.Pattern: int getClass(int)>
<java.lang.StringCoding$StringDecoder: void <init>(java.nio.charset.Charset,java.lang.String)>
<javax.swing.text.DocumentFilter$FilterBypass: void <init>()>
<javax.swing.border.EmptyBorder: void <init>(int,int,int,int)>
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>
<java.util.regex.Matcher: java.lang.String group(int)>
<javax.swing.JFrame: java.awt.Container getContentPane()>
<sun.awt.image.IntegerComponentRaster: int getDataOffset(int)>
<sun.text.normalizer.Trie: int getCodePointOffset(int)>
<java.util.regex.Matcher: boolean find()>
<javax.swing.text.AbstractDocument: javax.swing.text.Element createLeafElement(javax.swing.text.Element,javax.swing.text.AttributeSet,int,int)>
<javax.swing.JViewport: boolean windowBlitPaint(java.awt.Graphics)>
<java.util.Hashtable: int access$500(java.util.Hashtable)>
<java.awt.Container: void adjustDescendants(int)>
<java.text.SimpleDateFormat: void initializeDefaultCentury()>
<java.awt.KeyboardFocusManager: java.awt.Component getPermanentFocusOwner()>
<java.util.logging.LogManager: java.lang.ref.ReferenceQueue access$1100(java.util.logging.LogManager)>
<java.nio.charset.Charset$2: void <init>(java.lang.String)>
<sun.awt.image.SurfaceManager: void <init>()>
<java.awt.DefaultFocusTraversalPolicy: void <init>()>
<java.util.regex.Pattern: java.lang.String produceEquivalentAlternation(java.lang.String)>
<sun.java2d.pipe.Region: int clipAdd(int,int)>
<sun.java2d.pipe.Region: sun.java2d.pipe.Region getIntersectionXYWH(int,int,int,int)>
<java.util.regex.Pattern: java.lang.String[] split(java.lang.CharSequence,int)>
<javax.swing.event.SwingPropertyChangeSupport: void <init>(java.lang.Object,boolean)>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(char[],int,int)>
<javax.swing.JPopupMenu: void setUI(javax.swing.plaf.PopupMenuUI)>
<java.lang.Integer: int parseInt(java.lang.String,int)>
<sun.reflect.AccessorGenerator: short unboxingMethodForPrimitiveType(java.lang.Class)>
<java.util.ArrayList: void subListRangeCheck(int,int,int)>
<javax.swing.text.AbstractDocument$BranchElement: int getStartOffset()>
<javax.swing.plaf.ComponentUI: void update(java.awt.Graphics,javax.swing.JComponent)>
<java.util.IllegalFormatFlagsException: void <init>(java.lang.String)>
<sun.java2d.loops.GraphicsPrimitiveProxy: java.lang.String getPackageName(java.lang.String)>
<sun.java2d.loops.DrawParallelogram: sun.java2d.loops.DrawParallelogram locate(sun.java2d.loops.SurfaceType,sun.java2d.loops.CompositeType,sun.java2d.loops.SurfaceType)>
<java.util.AbstractList$Itr: void <init>(java.util.AbstractList,java.util.AbstractList$1)>
<javax.swing.JComponent: void setFlag(int,boolean)>
<sun.security.provider.PolicyFile: void init(java.net.URL)>
<java.security.cert.CertificateEncodingException: void <init>(java.lang.String)>
<java.util.regex.Pattern: boolean isSupplementary(int)>
<java.lang.ThreadLocal$ThreadLocalMap: void <init>(java.lang.ThreadLocal$ThreadLocalMap,java.lang.ThreadLocal$1)>
<java.util.Calendar: void setTimeInMillis(long)>
<javax.swing.text.AbstractDocument$DefaultDocumentEvent: void <init>(javax.swing.text.AbstractDocument,int,int,javax.swing.event.DocumentEvent$EventType)>
<java.util.logging.Logger: java.util.logging.Logger getParent()>
<sun.misc.URLClassPath: void check(java.net.URL)>
<java.io.FilePermission: void init(int)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setHours(int)>
<java.awt.AWTKeyStroke: int mapNewModifiers(int)>
<javax.swing.RepaintManager$PaintManager: void doubleBufferingChanged(javax.swing.JRootPane)>
<javax.swing.RepaintManager: void <init>(short)>
<sun.util.resources.LocaleData: java.util.ResourceBundle getDateFormatData(java.util.Locale)>
<java.awt.Image: void flush()>
<java.lang.String: void <init>(int[],int,int)>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(float)>
<java.lang.ConditionalSpecialCasing$Entry: char[] getUpperCase()>
<java.lang.String: void <init>(char[])>
<javax.swing.text.JTextComponent: void setText(java.lang.String)>
<java.awt.Component: java.awt.Image createImage(int,int)>
<java.awt.Container: boolean isFocusTraversalPolicyProvider()>
<java.lang.SecurityManager: void checkAccess(java.lang.Thread)>
<java.io.UTFDataFormatException: void <init>(java.lang.String)>
<java.util.Formatter$Conversion: boolean isFloat(char)>
<sun.security.action.GetBooleanAction: void <init>(java.lang.String)>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty setDifference(java.util.regex.Pattern$CharProperty,java.util.regex.Pattern$CharProperty)>
<java.awt.Point: void <init>()>
<java.awt.Component: boolean isVisible_NoClientCode()>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty union(java.util.regex.Pattern$CharProperty,java.util.regex.Pattern$CharProperty)>
<javax.swing.JLabel: void setIcon(javax.swing.Icon)>
<java.util.regex.Pattern$GroupHead: void <init>(int)>
<sun.awt.SunDisplayChanger: void add(sun.awt.DisplayChangedListener)>
<java.awt.dnd.DropTarget$DropTargetAutoScroller: void stop()>
<javax.swing.UIManager$LAFState: void setLookAndFeelDefaults(javax.swing.UIDefaults)>
<javax.swing.DefaultBoundedRangeModel: void <init>(int,int,int,int)>
<sun.util.calendar.CalendarDate: void setNormalized(boolean)>
<java.io.BufferedReader: void fill()>
<javax.swing.text.JTextComponent$MutableCaretEvent: void <init>(javax.swing.text.JTextComponent)>
<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>
<java.awt.geom.AffineTransform: void preConcatenate(java.awt.geom.AffineTransform)>
<java.util.regex.Matcher: int end()>
<sun.reflect.UnsafeQualifiedStaticCharacterFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<javax.swing.text.AbstractDocument: void updateBidi(javax.swing.text.AbstractDocument$DefaultDocumentEvent)>
<sun.java2d.pipe.Region: boolean intersectsQuickCheck(sun.java2d.pipe.Region)>
<java.awt.EventQueue: long getMostRecentEventTime()>
<java.awt.Container: int getTopmostComponentIndex()>
<java.awt.event.ActionEvent: long getWhen()>
<sun.util.calendar.CalendarDate: int getMillis()>
<java.util.HashMap: void <init>(int)>
<javax.swing.ArrayTable: java.lang.Object remove(java.lang.Object)>
<java.lang.Long: java.lang.String toString(long)>
<java.util.regex.Pattern$Start: void <init>(java.util.regex.Pattern$Node)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult implFlush(java.nio.CharBuffer)>
<java.lang.reflect.Modifier: java.lang.String toString(int)>
<java.awt.Container: int getComponentCount()>
<java.util.ResourceBundle$Control: java.lang.String toResourceName(java.lang.String,java.lang.String)>
<java.awt.event.InvocationEvent: void <init>(java.lang.Object,java.lang.Runnable,java.lang.Object,boolean)>
<java.util.HashMap: void createEntry(int,java.lang.Object,java.lang.Object,int)>
<java.text.DecimalFormatSymbols: char getPatternSeparator()>
<sun.util.calendar.AbstractCalendar: long getTime(sun.util.calendar.CalendarDate)>
<javax.swing.text.JTextComponent: void updateUI()>
<java.text.BreakIterator: void setText(java.lang.String)>
<java.awt.Dialog: boolean isModal()>
<java.awt.Frame: void setTitle(java.lang.String)>
<sun.reflect.DelegatingMethodAccessorImpl: void <init>(sun.reflect.MethodAccessorImpl)>
<java.lang.StringBuilder: void getChars(int,int,char[],int)>
<java.util.regex.Pattern: java.util.regex.Pattern$Node atom()>
<java.util.logging.Logger: void finest(java.lang.String)>
<java.awt.event.MouseEvent: int getXOnScreen()>
<java.util.Date: sun.util.calendar.BaseCalendar$Date normalize()>
<sun.reflect.UnsafeObjectFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<java.util.regex.ASCII: boolean isSpace(int)>
<java.lang.String: int indexOf(int)>
<java.awt.Component: boolean isAutoFocusTransferOnDisposal()>
<sun.util.LocaleServiceProviderPool: boolean isJRESupported(java.util.Locale)>
<sun.awt.SunToolkit: void wakeupEventQueue(java.awt.EventQueue,boolean)>
<java.util.Formatter$FormatSpecifier: int precision(java.lang.String)>
<java.awt.Component: void invalidate()>
<java.awt.event.InvocationEvent: void <init>(java.lang.Object,int,java.lang.Runnable,java.lang.Object,boolean)>
<javax.swing.JComponent: void setRequestFocusEnabled(boolean)>
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>
<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form,int)>
<java.awt.geom.AffineTransform: boolean isIdentity()>
<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] getTable()>
<sun.reflect.Label: void bind()>
<java.io.DataInputStream: int readInt()>
<java.util.TimeZone: java.util.TimeZone parseCustomTimeZone(java.lang.String)>
<java.lang.ThreadLocal$ThreadLocalMap: java.lang.ThreadLocal$ThreadLocalMap$Entry getEntry(java.lang.ThreadLocal)>
<java.util.Currency: java.util.Currency getInstance(java.lang.String,int,int)>
<java.awt.Component: void processComponentEvent(java.awt.event.ComponentEvent)>
<sun.swing.AccessibleMethod: java.lang.Object invokeNoChecked(java.lang.Object,java.lang.Object[])>
<javax.swing.JComponent: void setPreferredSize(java.awt.Dimension)>
<javax.swing.text.AbstractDocument: void handleRemove(int,int)>
<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar getLocalGregorianCalendar(java.lang.String)>
<sun.reflect.UnsafeQualifiedCharacterFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<java.util.regex.Pattern: int peekPastLine()>
<javax.swing.text.Utilities: boolean isComposedTextElement(javax.swing.text.Document,int)>
<javax.swing.UIDefaults: java.awt.Color getColor(java.lang.Object)>
<java.net.InetAddress: java.lang.String getHostAddress()>
<java.awt.datatransfer.MimeType: boolean isTokenChar(char)>
<java.util.concurrent.ConcurrentHashMap$HashEntry: void setNext(java.util.concurrent.ConcurrentHashMap$HashEntry)>
<sun.reflect.DelegatingConstructorAccessorImpl: void setDelegate(sun.reflect.ConstructorAccessorImpl)>
<java.awt.Dialog: void unblockWindow(java.awt.Window)>
<java.util.LinkedList: java.lang.Object getFirst()>
<sun.reflect.UnsafeQualifiedObjectFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<java.beans.ChangeListenerMap: java.util.EventListener extract(java.util.EventListener)>
<java.awt.image.Raster: int getWidth()>
<java.util.regex.Pattern$BackRef: void <init>(int)>
<sun.util.calendar.BaseCalendar$Date: sun.util.calendar.BaseCalendar$Date setNormalizedDate(int,int,int)>
<java.awt.Component: boolean postsOldMouseEvents()>
<java.util.Arrays$ArrayList: void <init>(java.lang.Object[])>
<java.awt.Window$1DisposeAction: void run()>
<java.awt.image.DirectColorModel: int getRedMask()>
<java.awt.Container: void decreaseComponentCount(java.awt.Component)>
<java.awt.Component: void dispatchEvent(java.awt.AWTEvent)>
<java.lang.Class: boolean arrayContentsEq(java.lang.Object[],java.lang.Object[])>
<java.lang.Class$ReflectionData: void <init>(int)>
<sun.util.resources.LocaleData: sun.util.resources.OpenListResourceBundle getCurrencyNames(java.util.Locale)>
<java.util.TimeZone$1: void <init>(java.lang.String)>
<java.util.Calendar: void updateTime()>
<java.lang.StringBuilder: java.lang.StringBuilder append(int)>
<sun.font.FontManager: boolean isComplexText(char[],int,int)>
<javax.swing.TransferHandler: void <init>()>
<sun.misc.FloatingDecimal: void <init>(double)>
<sun.reflect.ClassFileAssembler: void opc_i2d()>
<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>
<java.awt.Component: boolean gotFocus(java.awt.Event,java.lang.Object)>
<java.util.logging.LogManager$5: void <init>(java.util.logging.Logger,java.util.logging.Level)>
<java.io.FilterInputStream: int read(byte[])>
<java.lang.ClassLoader: void <init>(java.lang.Void,java.lang.ClassLoader)>
<java.awt.Component: java.awt.Toolkit getToolkitImpl()>
<java.awt.EventQueue: void postEvent(java.awt.AWTEvent,int)>
<java.lang.Double: double parseDouble(java.lang.String)>
<javax.swing.JPopupMenu: boolean getDefaultLightWeightPopupEnabled()>
<java.lang.String: int length()>
<sun.misc.VM: boolean allowArraySyntax()>
<javax.swing.UIDefaults: void <init>()>
<java.util.logging.LogManager$3: void <init>(java.util.logging.LogManager,java.util.logging.Logger,java.util.logging.Logger)>
<javax.swing.JTextArea: javax.swing.text.Document createDefaultModel()>
<java.util.regex.Pattern: boolean isLineSeparator(int)>
<java.util.SimpleTimeZone: int getOffset(long)>
<java.awt.Component: boolean transferFocusBackward(boolean)>
<java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>
<java.util.Locale: void <init>(java.lang.String,java.lang.String)>
<sun.misc.FloatingDecimal: void <init>(boolean,int,char[],int,boolean)>
<java.util.LinkedList: boolean remove(java.lang.Object)>
<java.io.File: boolean isDirectory()>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty family(boolean)>
<java.text.DecimalFormat: int getMinimumFractionDigits()>
<sun.util.calendar.BaseCalendar: int getMonthLength(int,int)>
<sun.awt.util.IdentityArrayList: boolean add(java.lang.Object)>
<java.net.URL: boolean isValidProtocol(java.lang.String)>
<sun.reflect.UnsafeQualifiedStaticObjectFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<java.awt.AWTEventMulticaster: java.awt.event.KeyListener remove(java.awt.event.KeyListener,java.awt.event.KeyListener)>
<java.awt.Component: java.awt.Dimension size()>
<java.util.regex.Matcher: int end(int)>
<java.awt.Component: void mixOnShowing()>
<java.awt.datatransfer.MimeTypeParameterList: void set(java.lang.String,java.lang.String)>
<java.lang.Shutdown: void sequence()>
<java.lang.CharacterData: char[] toUpperCaseCharArray(int)>
<sun.awt.SunToolkit: void awtLock()>
<sun.font.AttributeValues: void setFamily(java.lang.String)>
<java.awt.Component: boolean containsFocus()>
<java.lang.ThreadLocal$ThreadLocalMap: void <init>(java.lang.ThreadLocal,java.lang.Object)>
<sun.reflect.ClassFileAssembler: void opc_checkcast(short)>
<java.lang.AssertionError: void <init>(long)>
<sun.awt.EmbeddedFrame: java.applet.Applet getAppletIfAncestorOf(java.awt.Component)>
<java.awt.im.InputContext: void dispatchEvent(java.awt.AWTEvent)>
<java.util.regex.ASCII: boolean isLower(int)>
<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>
<java.io.FilePermission: int getMask(java.lang.String)>
<java.awt.event.ActionEvent: int getModifiers()>
<java.util.StringTokenizer: void setMaxDelimCodePoint()>
<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.nio.charset.CharsetDecoder: void implReset()>
<javax.swing.JLabel: void <init>()>
<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String,boolean)>
<java.io.PrintStream: void println(java.lang.String)>
<java.awt.image.ColorModel: java.lang.Object getDataElements(int,java.lang.Object)>
<java.awt.dnd.DropTarget: void <init>(java.awt.Component,int,java.awt.dnd.DropTargetListener,boolean,java.awt.datatransfer.FlavorMap)>
<java.lang.SecurityManager: void checkExit(int)>
<sun.util.calendar.ZoneInfo: boolean isDirty()>
<sun.font.AttributeValues: boolean equals(java.lang.Object,java.lang.Object)>
<java.security.AccessControlContext: void <init>(java.security.ProtectionDomain[],boolean)>
<java.util.HashMap$Values: void <init>(java.util.HashMap,java.util.HashMap$1)>
<java.util.PriorityQueue: void siftDownUsingComparator(int,java.lang.Object)>
<sun.awt.HeadlessToolkit: java.awt.peer.KeyboardFocusManagerPeer createKeyboardFocusManagerPeer(java.awt.KeyboardFocusManager)>
<java.util.PriorityQueue: void siftUpUsingComparator(int,java.lang.Object)>
<java.lang.Character: int codePointAtImpl(char[],int,int)>
<java.lang.Character: int digit(int,int)>
<javax.swing.RepaintManager: void doubleBufferingChanged(javax.swing.JRootPane)>
<java.lang.AbstractStringBuilder: int length()>
<sun.util.resources.LocaleData: java.util.ResourceBundle getCalendarData(java.util.Locale)>
<java.util.EventObject: java.lang.Object getSource()>
<java.awt.Component: void applyCompoundShape(sun.java2d.pipe.Region)>
<java.lang.AssertionError: void <init>(java.lang.Object)>
<java.awt.Component: void hide()>
<javax.swing.text.StyleContext$SmallAttributeSet: void updateResolveParent()>
<javax.swing.undo.CompoundEdit: boolean addEdit(javax.swing.undo.UndoableEdit)>
<java.awt.image.BufferedImage: int getRGB(int,int)>
<java.text.BreakIterator: java.lang.Object clone()>
<java.security.PrivilegedActionException: java.lang.Exception getException()>
<java.awt.Component: java.awt.Point getLocationOnScreen()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void <init>()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean release(int)>
<sun.java2d.SunGraphics2D: void validateColor()>
<java.text.BreakIterator: int getInt(byte[],int)>
<javax.swing.plaf.metal.MetalLookAndFeel: boolean isWindows()>
<java.awt.Menu: void addNotify()>
<java.text.AttributedString: java.text.AttributedCharacterIterator getIterator()>
<sun.text.normalizer.NormalizerBase: java.lang.String normalize(java.lang.String,java.text.Normalizer$Form)>
<sun.util.calendar.ZoneInfo: void <init>(java.lang.String,int)>
<java.awt.KeyboardFocusManager: java.awt.Component getGlobalFocusOwner()>
<java.awt.Rectangle: boolean contains(int,int,int,int)>
<javax.swing.JScrollPane: void setViewportView(java.awt.Component)>
<java.awt.Component: void setBounds(int,int,int,int)>
<javax.swing.JScrollPane: void updateUI()>
<java.nio.charset.IllegalCharsetNameException: void <init>(java.lang.String)>
<java.io.FileReader: void <init>(java.io.File)>
<java.awt.image.BufferedImage: int getType()>
<sun.awt.SunToolkit: sun.awt.AppContext getAppContext(java.lang.Object)>
<javax.swing.JPanel: void setUI(javax.swing.plaf.PanelUI)>
<java.util.regex.Pattern: void addFlag()>
<java.lang.Math: double abs(double)>
<java.awt.datatransfer.SystemFlavorMap$1: void <init>(java.awt.datatransfer.SystemFlavorMap)>
<sun.awt.im.InputContext: java.awt.im.spi.InputMethod getInputMethodInstance()>
<java.util.HashMap: java.lang.Object getForNullKey()>
<sun.java2d.loops.FillPath: sun.java2d.loops.FillPath locate(sun.java2d.loops.SurfaceType,sun.java2d.loops.CompositeType,sun.java2d.loops.SurfaceType)>
<javax.swing.border.AbstractBorder: void <init>()>
<java.awt.event.InputEvent: boolean canAccessSystemClipboard()>
<java.util.HashMap$KeySet: void <init>(java.util.HashMap)>
<java.util.BitSet: boolean get(int)>
<java.awt.event.KeyEvent: int getKeyCode()>
<java.awt.image.DirectColorModel: int getGreenMask()>
<javax.accessibility.AccessibleContext: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>
<javax.swing.text.GapVector: void resize(int)>
<java.lang.String: void <init>(byte[],int,int,java.lang.String)>
<java.text.Format: java.text.AttributedCharacterIterator createAttributedCharacterIterator(java.text.AttributedCharacterIterator,java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>
<java.lang.StringBuilder: void setLength(int)>
<java.io.File: java.lang.String[] list()>
<java.lang.StringBuilder: java.lang.String toString()>
<sun.nio.cs.StreamEncoder: boolean isOpen()>
<java.io.LineNumberReader: java.lang.String readLine()>
<javax.swing.text.StyleContext: javax.swing.text.MutableAttributeSet getMutableAttributeSet(javax.swing.text.AttributeSet)>
<sun.security.util.Debug: boolean isOn(java.lang.String)>
<java.lang.Character: void toSurrogates(int,char[],int)>
<java.text.NumberFormat: java.text.NumberFormat getIntegerInstance(java.util.Locale)>
<sun.text.CompactByteArray: void <init>(short[],byte[])>
<java.text.DecimalFormatSymbols: char getGroupingSeparator()>
<java.lang.Class$EnclosingMethodInfo: void <init>(java.lang.Object[],java.lang.Class$1)>
<java.lang.Shutdown: void exit(int)>
<java.awt.HeadlessException: void <init>()>
<java.text.SimpleDateFormat: void encode(int,int,java.lang.StringBuilder)>
<sun.font.AttributeValues: void updateDerivedTransforms()>
<java.awt.event.MouseEvent: void <init>(java.awt.Component,int,long,int,int,int,int,int,int,boolean,int)>
<java.awt.Component: void reshape(int,int,int,int)>
<java.beans.PropertyChangeEvent: java.lang.Object getOldValue()>
<java.util.PriorityQueue: void siftDownComparable(int,java.lang.Object)>
<java.lang.reflect.Field: java.lang.Class getType()>
<java.util.HashMap$Entry: void recordRemoval(java.util.HashMap)>
<javax.swing.JScrollPane: javax.swing.JViewport createViewport()>
<java.text.SimpleDateFormat: java.lang.String getKey()>
<sun.text.normalizer.Trie: int getRawOffset(int,char)>
<javax.swing.AbstractButton: void setContentAreaFilled(boolean)>
<sun.java2d.pipe.Region: sun.java2d.pipe.RegionIterator getIterator()>
<java.util.logging.LogManager: java.util.logging.LogManager$LoggerContext getUserContext()>
<java.util.ArrayList: java.lang.Object get(int)>
<java.awt.Component: java.awt.Container getTraversalRoot()>
<javax.swing.JComponent: int shouldDebugGraphics()>
<sun.reflect.MethodAccessorGenerator: java.lang.String buildInternalSignature()>
<java.lang.String: java.lang.String[] split(java.lang.String,int)>
<java.awt.Container: void setFont(java.awt.Font)>
<java.lang.Class$3: void <init>()>
<java.security.AccessControlContext$1: void <init>(java.security.AccessControlContext,sun.security.util.Debug,java.security.ProtectionDomain)>
<java.awt.Window: java.awt.Window getOwner()>
<java.util.Stack: java.lang.Object push(java.lang.Object)>
<java.lang.String: int hashCode()>
<java.text.StringCharacterIterator: void <init>(java.lang.String)>
<java.awt.Component: void processKeyEvent(java.awt.event.KeyEvent)>
<java.util.ResourceBundle$CacheKey: long access$700(java.util.ResourceBundle$CacheKey)>
<java.util.StringTokenizer: int skipDelimiters(int)>
<sun.reflect.ClassFileAssembler: void opc_sipush(short)>
<sun.java2d.pipe.PixelToShapeConverter: void <init>(sun.java2d.pipe.ShapeDrawPipe)>
<javax.swing.text.Utilities: boolean isComposedTextElement(javax.swing.text.Element)>
<javax.swing.JComponent: void computeVisibleRect(java.awt.Component,java.awt.Rectangle)>
<java.lang.ClassLoader: void <init>(java.lang.ClassLoader)>
<javax.swing.AbstractButton: javax.swing.ButtonModel getModel()>
<java.text.NumberFormat$NumberFormatGetter: java.text.NumberFormat$NumberFormatGetter access$000()>
<java.awt.Container: boolean hasLightweightDescendants()>
<java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)>
<javax.swing.text.SegmentCache$CachedSegment: void <init>(javax.swing.text.SegmentCache$1)>
<java.awt.Component: java.awt.Container getParent()>
<java.awt.Container: void setFocusTraversalKeys(int,java.util.Set)>
<java.nio.HeapByteBuffer: void <init>(byte[],int,int)>
<java.awt.Component: java.awt.Container getNativeContainer()>
<java.awt.geom.AffineTransform: double getTranslateX()>
<sun.util.calendar.ZoneInfoFile: byte[] readZoneInfoFile(java.lang.String)>
<java.util.AbstractSequentialList: java.util.Iterator iterator()>
<sun.misc.URLClassPath$3: void <init>(sun.misc.URLClassPath,java.net.URL)>
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>
<java.util.regex.Pattern$1: void <init>(java.util.regex.Pattern,java.lang.Character$UnicodeBlock)>
<java.util.concurrent.atomic.AtomicLong: void set(long)>
<java.lang.String: int indexOf(java.lang.String,int)>
<java.nio.Buffer: int limit()>
<java.awt.Component: boolean isMinimumSizeSet()>
<java.awt.event.WindowAdapter: void <init>()>
<java.awt.geom.AffineTransform: void <init>()>
<javax.swing.text.SimpleAttributeSet: void <init>(javax.swing.text.AttributeSet)>
<java.awt.Component: int getSiblingIndexBelow()>
<javax.swing.UnsupportedLookAndFeelException: void <init>(java.lang.String)>
<java.nio.charset.Charset: java.nio.charset.Charset lookup2(java.lang.String)>
<java.util.concurrent.atomic.AtomicInteger: int getAndAdd(int)>
<javax.swing.plaf.ComponentUI: void uninstallUI(javax.swing.JComponent)>
<java.io.BufferedInputStream: void <init>(java.io.InputStream)>
<sun.text.SupplementaryCharacterData: void <init>(int[])>
<java.awt.image.ColorModel: java.awt.color.ColorSpace getColorSpace()>
<javax.swing.TransferHandler: java.awt.dnd.DropTargetListener getDropTargetListener()>
<java.util.Formatter$Flags: java.util.Formatter$Flags parse(char)>
<java.awt.Rectangle: void setBounds(java.awt.Rectangle)>
<sun.reflect.MethodAccessorGenerator: sun.reflect.MethodAccessor generateMethod(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],int)>
<sun.awt.im.InputMethodLocator: sun.awt.im.InputMethodLocator deriveLocator(java.util.Locale)>
<javax.swing.Timer: java.util.concurrent.locks.Lock getLock()>
<java.util.concurrent.locks.ReentrantLock$Sync: boolean nonfairTryAcquire(int)>
<sun.awt.SunToolkit: void flushPendingEvents()>
<javax.swing.JFrame: void setRootPaneCheckingEnabled(boolean)>
<java.lang.Math: double toRadians(double)>
<java.nio.charset.CharsetDecoder: void implOnMalformedInput(java.nio.charset.CodingErrorAction)>
<java.lang.Class: java.lang.reflect.Field getField0(java.lang.String)>
<javax.swing.plaf.metal.DefaultMetalTheme$FontDelegate: void <init>()>
<java.io.BufferedWriter: void flushBuffer()>
<java.lang.Character: boolean isLetterOrDigit(char)>
<java.lang.ClassLoader: java.lang.Void checkCreateClassLoader()>
<java.util.logging.Logger: java.util.logging.Logger demandLogger(java.lang.String,java.lang.String,java.lang.Class)>
<java.io.InputStreamReader: void <init>(java.io.InputStream)>
<java.security.Policy: java.security.PermissionCollection getPermissions(java.security.ProtectionDomain)>
<java.awt.Window: void setClientSize(int,int)>
<sun.misc.SoftCache: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.awt.event.InputEvent: int getModifiers()>
<javax.swing.UIDefaults: java.lang.Object put(java.lang.Object,java.lang.Object)>
<java.awt.event.MouseWheelEvent: void <init>(java.awt.Component,int,long,int,int,int,int,int,int,boolean,int,int,int)>
<java.lang.ThreadLocal: void createMap(java.lang.Thread,java.lang.Object)>
<java.lang.Class: java.lang.String getName()>
<java.awt.Window: boolean isFocusableWindow()>
<java.io.Reader: void <init>(java.lang.Object)>
<sun.util.calendar.CalendarDate: int getDayOfMonth()>
<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>
<sun.awt.image.BufImgSurfaceData: void initSolidLoops()>
<java.util.regex.Pattern: int peekPastWhitespace(int)>
<java.lang.ClassCastException: void <init>(java.lang.String)>
<java.awt.Component: void setPreferredSize(java.awt.Dimension)>
<java.awt.EventQueue: void uncacheEQItem(java.awt.EventQueueItem)>
<java.util.Formatter$FormatSpecifier: java.lang.String toString()>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(java.lang.StringBuffer)>
<java.awt.EventQueue$4: void <init>(java.awt.EventQueue)>
<sun.java2d.SurfaceManagerFactory: sun.awt.image.VolatileSurfaceManager createVolatileManager(sun.awt.image.SunVolatileImage,java.lang.Object)>
<java.awt.Menu: java.awt.MenuItem getItem(int)>
<java.util.concurrent.atomic.AtomicBoolean: void <init>(boolean)>
<sun.java2d.StateTrackableDelegate: sun.java2d.StateTrackableDelegate createInstance(sun.java2d.StateTrackable$State)>
<java.util.logging.LogRecord: void setResourceBundle(java.util.ResourceBundle)>
<java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int)>
<javax.swing.JComponent: void adjustPaintFlags()>
<java.util.LinkedList: java.lang.Object removeFirst()>
<java.awt.Component: void processMouseWheelEvent(java.awt.event.MouseWheelEvent)>
<java.beans.PropertyChangeEvent: java.lang.String getPropertyName()>
<java.awt.MenuComponent: java.lang.Object getTreeLock()>
<java.util.concurrent.atomic.AtomicInteger: boolean compareAndSet(int,int)>
<javax.swing.JComponent: boolean isPainting()>
<java.util.TimeZone: void <init>()>
<java.util.Vector: void <init>(int)>
<java.lang.reflect.InvocationTargetException: void <init>(java.lang.Throwable)>
<java.util.concurrent.locks.ReentrantReadWriteLock: java.util.concurrent.locks.ReentrantReadWriteLock$Sync access$000(java.util.concurrent.locks.ReentrantReadWriteLock)>
<javax.swing.JRootPane: javax.swing.JLayeredPane createLayeredPane()>
<java.lang.ClassLoader: void resolveClass(java.lang.Class)>
<java.util.Calendar: int internalGet(int)>
<javax.swing.text.AbstractDocument$BranchElement: int getElementCount()>
<java.text.FieldPosition: void <init>(int)>
<java.util.regex.Matcher: int getTextLength()>
<sun.misc.URLClassPath: void push(java.net.URL[])>
<javax.swing.JLabel: int getDisplayedMnemonic()>
<sun.misc.FDBigInt: void <init>(int[],int)>
<java.lang.Character: boolean isLetter(int)>
<sun.awt.AppContext: sun.awt.AppContext getAppContext()>
<java.awt.AWTEventMulticaster: java.awt.event.MouseMotionListener add(java.awt.event.MouseMotionListener,java.awt.event.MouseMotionListener)>
<javax.swing.AbstractButton: int checkHorizontalKey(int,java.lang.String)>
<java.util.ResourceBundle: java.util.ResourceBundle getBundleImpl(java.lang.String,java.util.Locale,java.lang.ClassLoader,java.util.ResourceBundle$Control)>
<sun.text.normalizer.NormalizerImpl: long getNorm32(int)>
<java.awt.image.Raster: java.lang.Object getDataElements(int,int,java.lang.Object)>
<java.awt.image.ColorModel: java.awt.image.WritableRaster createCompatibleWritableRaster(int,int)>
<java.util.regex.Pattern: void mark(int)>
<java.util.Currency: java.util.Currency getInstance(java.lang.String)>
<java.net.SocketPermission: int getMask(java.lang.String)>
<java.util.ArrayList$Itr: void <init>(java.util.ArrayList,java.util.ArrayList$1)>
<sun.awt.PeerEvent: long getFlags()>
<java.beans.PropertyChangeSupport: void firePropertyChange(java.lang.String,int,int)>
<sun.awt.SunToolkit: java.awt.EventQueue getSystemEventQueueImplPP(sun.awt.AppContext)>
<java.awt.Container: void recursiveApplyCurrentShape()>
<java.util.AbstractSequentialList: void <init>()>
<java.util.concurrent.ConcurrentHashMap$Segment: java.util.concurrent.ConcurrentHashMap$HashEntry scanAndLockForPut(java.lang.Object,int,java.lang.Object)>
<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>
<java.awt.event.WindowEvent: void <init>(java.awt.Window,int)>
<java.lang.IllegalStateException: void <init>(java.lang.String)>
<java.lang.Double: java.lang.Double valueOf(double)>
<sun.nio.cs.StreamDecoder: void <init>(java.io.InputStream,java.lang.Object,java.nio.charset.CharsetDecoder)>
<java.text.NumberFormat: void setMaximumFractionDigits(int)>
<java.text.AttributedString: void createRunAttributeDataVectors()>
<java.util.regex.Pattern$NotBehindS: void <init>(java.util.regex.Pattern$Node,int,int)>
<java.util.Date: sun.util.calendar.BaseCalendar getCalendarSystem(long)>
<java.util.logging.Logger: void checkPermission()>
<java.net.URL: void <init>(java.lang.String)>
<java.lang.Class: boolean isLocalOrAnonymousClass()>
<sun.reflect.ClassFileAssembler: void emitConstantPoolMethodref(short,short)>
<java.text.DateFormatSymbols: java.text.DateFormatSymbols getInstance(java.util.Locale)>
<java.util.AbstractMap: void <init>()>
<java.io.FileDescriptor: void <init>()>
<java.text.SimpleDateFormat: void initializeCalendar(java.util.Locale)>
<sun.awt.image.SunVolatileImage: sun.awt.image.VolatileSurfaceManager createSurfaceManager(java.lang.Object,java.awt.ImageCapabilities)>
<java.io.File: void <init>(java.lang.String)>
<java.awt.Component: boolean isDisplayable()>
<java.lang.Object: void <init>()>
<java.awt.datatransfer.MimeTypeParameterList: boolean isTokenChar(char)>
<javax.swing.undo.AbstractUndoableEdit: void <init>()>
<java.util.regex.Pattern$SliceNode: void <init>(int[])>
<java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale)>
<java.text.BreakIterator: java.text.BreakIterator getWordInstance(java.util.Locale)>
<java.util.Locale: java.util.Locale getInstance(java.lang.String,java.lang.String,java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.StringBuilder)>
<javax.swing.text.GapVector: void replace(int,int,java.lang.Object,int)>
<java.util.Calendar: void adjustStamp()>
<java.awt.SentEvent: void <init>(java.awt.AWTEvent,sun.awt.AppContext)>
<java.util.AbstractList$Itr: void <init>(java.util.AbstractList)>
<java.lang.String: void <init>()>
<java.awt.AWTEvent: int getID()>
<java.text.RuleBasedBreakIterator$1: void <init>(java.text.RuleBasedBreakIterator,java.lang.String)>
<javax.swing.text.AbstractDocument$BidiElement: void <init>(javax.swing.text.AbstractDocument,javax.swing.text.Element,int,int,int)>
<java.awt.MenuComponent: void removeNotify()>
<java.security.AccessControlContext: boolean containsAllPDs(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>
<java.awt.Component: void processHierarchyBoundsEvent(java.awt.event.HierarchyEvent)>
<javax.swing.RepaintManager$PaintManager: void <init>()>
<java.util.HashMap: java.util.HashMap$Entry removeEntryForKey(java.lang.Object)>
<java.util.HashMap: void transfer(java.util.HashMap$Entry[])>
<sun.reflect.ClassFileAssembler: void opc_swap()>
<java.awt.event.MouseWheelEvent: int getWheelRotation()>
<java.util.HashSet: boolean isEmpty()>
<sun.java2d.Disposer: void addRecord(java.lang.Object,sun.java2d.DisposerRecord)>
<java.net.Inet6Address$Inet6AddressHolder: void <init>(java.net.Inet6Address)>
<java.util.ResourceBundle$CacheKey: java.lang.Object clone()>
<sun.awt.util.IdentityArrayList: boolean remove(java.lang.Object)>
<sun.java2d.pipe.Region: sun.java2d.pipe.Region getInstanceXYXY(int,int,int,int)>
<java.util.concurrent.locks.ReentrantLock: boolean tryLock()>
<sun.awt.image.IntegerComponentRaster: int getPixelStride()>
<java.awt.Component: int createHierarchyEvents(int,java.awt.Component,java.awt.Container,long,boolean)>
<sun.awt.image.VolatileSurfaceManager: void initContents()>
<java.awt.Component: boolean dispatchMouseWheelToAncestor(java.awt.event.MouseWheelEvent)>
<java.awt.Window: java.awt.Component setTemporaryLostComponent(java.awt.Component)>
<java.awt.KeyboardFocusManager: java.awt.SequencedEvent getCurrentSequencedEvent()>
<javax.swing.text.AbstractDocument: int getLength()>
<javax.swing.JPanel: void <init>(java.awt.LayoutManager,boolean)>
<javax.swing.DebugGraphics: int debugComponentCount()>
<java.awt.BorderLayout: void <init>(int,int)>
<java.lang.ThreadLocal$ThreadLocalMap$Entry: void <init>(java.lang.ThreadLocal,java.lang.Object)>
<java.util.ResourceBundle$CacheKey: java.lang.Throwable access$400(java.util.ResourceBundle$CacheKey)>
<sun.nio.cs.StreamEncoder: void <init>(java.io.OutputStream,java.lang.Object,java.nio.charset.CharsetEncoder)>
<java.lang.Math: int min(int,int)>
<sun.java2d.SurfaceData: int pixelFor(int)>
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>
<sun.java2d.loops.GraphicsPrimitiveMgr$PrimitiveSpec: void <init>()>
<java.awt.Component: void setBoundsOp(int)>
<java.io.BufferedWriter: void <init>(java.io.Writer)>
<java.util.ResourceBundle$CacheKey: java.util.ResourceBundle$CacheKey setLocale(java.util.Locale)>
<java.awt.DefaultKeyboardFocusManager: void <init>()>
<sun.font.AttributeValues: boolean i_equals(sun.font.EAttribute,sun.font.AttributeValues)>
<java.lang.Class: java.lang.reflect.Method searchMethods(java.lang.reflect.Method[],java.lang.String,java.lang.Class[])>
<java.lang.NoSuchFieldException: void <init>(java.lang.String)>
<java.awt.AWTEventMulticaster: java.awt.event.ComponentListener add(java.awt.event.ComponentListener,java.awt.event.ComponentListener)>
<java.awt.Component: java.awt.Dimension getSize()>
<sun.java2d.pipe.Region: boolean isInsideXYXY(int,int,int,int)>
<sun.font.FontManager: boolean isNonSimpleChar(char)>
<java.text.DecimalFormat: void setMinimumIntegerDigits(int)>
<sun.util.calendar.CalendarUtils: int mod(int,int)>
<java.util.Arrays: void swap(java.lang.Object[],int,int)>
<sun.reflect.ClassFileAssembler: void opc_f2d()>
<java.awt.image.ColorModel: boolean isAlphaPremultiplied()>
<java.lang.ThreadLocal: int access$400(java.lang.ThreadLocal)>
<java.util.logging.Logger: void finer(java.lang.String)>
<java.util.regex.ASCII: boolean isUpper(int)>
<java.awt.geom.AffineTransform: double getScaleY()>
<sun.java2d.StateTrackableDelegate: void <init>(sun.java2d.StateTrackable$State)>
<javax.swing.JRootPane: void updateUI()>
<javax.swing.TimerQueue: void removeTimer(javax.swing.Timer)>
<java.util.HashMap: boolean containsKey(java.lang.Object)>
<sun.awt.image.VSyncedBSManager$SingleVSyncedBSMgr: void <init>(sun.awt.image.VSyncedBSManager$1)>
<javax.swing.JComponent: void recycleRectangle(java.awt.Rectangle)>
<java.awt.datatransfer.MimeType: java.lang.String getBaseType()>
<javax.swing.JFrame: javax.swing.JRootPane createRootPane()>
<java.awt.Window$WindowDisposerRecord: void <init>(sun.awt.AppContext,java.awt.Window)>
<java.text.BreakIterator$1: void <init>(java.lang.String,java.util.Locale)>
<sun.java2d.pipe.LoopPipe: sun.java2d.pipe.ShapeSpanIterator getFillSSI(sun.java2d.SunGraphics2D)>
<javax.swing.TransferHandler$DropHandler: void <init>(javax.swing.TransferHandler$1)>
<java.text.AttributedString$AttributedStringIterator: void <init>(java.text.AttributedString,java.text.AttributedCharacterIterator$Attribute[],int,int)>
<java.awt.image.Raster: java.awt.image.SampleModel getSampleModel()>
<java.lang.Class: java.lang.reflect.Field[] privateGetDeclaredFields(boolean)>
<javax.swing.JScrollPane: int getHorizontalScrollBarPolicy()>
<javax.swing.ScrollPaneLayout: void <init>()>
<java.awt.Font: void <init>(java.lang.String,int,int)>
<java.util.Stack: boolean empty()>
<sun.java2d.pipe.Region: void appendSpans(sun.java2d.pipe.SpanIterator)>
<javax.swing.RepaintManager: java.awt.Image getOffscreenBuffer(java.awt.Component,int,int)>
<sun.java2d.loops.GraphicsPrimitive: boolean tracingEnabled()>
<java.text.BreakIterator$BreakIteratorGetter: java.text.BreakIterator$BreakIteratorGetter access$000()>
<java.awt.datatransfer.MimeTypeParameterList: java.lang.String quote(java.lang.String)>
<java.nio.charset.Charset: boolean atBugLevel(java.lang.String)>
<java.awt.Rectangle: boolean equals(java.lang.Object)>
<java.awt.Window: void addToWindowList()>
<java.lang.ref.ReferenceQueue$Lock: void <init>(java.lang.ref.ReferenceQueue$1)>
<sun.reflect.ClassFileAssembler: void opc_astore_3()>
<java.util.ResourceBundle$BundleReference: java.util.ResourceBundle$CacheKey getCacheKey()>
<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<sun.security.provider.PolicyFile: void <init>()>
<sun.reflect.ClassFileAssembler: void <init>()>
<java.io.FilePermission: void <init>(java.lang.String,java.lang.String)>
<java.lang.NoClassDefFoundError: void <init>(java.lang.String)>
<java.util.Calendar: void clear()>
<java.util.Arrays: int binarySearch0(java.lang.Object[],int,int,java.lang.Object,java.util.Comparator)>
<java.util.ResourceBundle: void endLoading(java.util.ResourceBundle$CacheKey)>
<java.util.logging.LogManager: void loadLoggerHandlers(java.util.logging.Logger,java.lang.String,java.lang.String)>
<java.util.HashSet: void <init>(java.util.Collection)>
<java.lang.Class: java.lang.Class getDeclaringClass()>
<java.text.DecimalFormatSymbols: char getMinusSign()>
<sun.awt.image.BufImgSurfaceData: sun.java2d.SurfaceData createDataBC(java.awt.image.BufferedImage,sun.java2d.loops.SurfaceType,int)>
<java.util.logging.LogManager$6: void <init>(java.util.logging.Logger,java.util.logging.Logger)>
<java.util.FormatFlagsConversionMismatchException: void <init>(java.lang.String,char)>
<javax.swing.JScrollPane: void setHorizontalScrollBarPolicy(int)>
<java.util.Arrays: void mergeSort(java.lang.Object[],java.lang.Object[],int,int,int,java.util.Comparator)>
<java.net.Inet6Address: int access$000(byte[],java.net.NetworkInterface)>
<java.util.LinkedHashSet: void <init>()>
<java.util.regex.Pattern: int countChars(java.lang.CharSequence,int,int)>
<java.awt.image.Raster: int getNumDataElements()>
<sun.awt.image.SunWritableRaster: sun.java2d.StateTrackableDelegate stealTrackable(java.awt.image.DataBuffer)>
<java.text.ChoiceFormat: java.lang.String[] doubleArraySize(java.lang.String[])>
<java.util.ResourceBundle$CacheKey: void setCause(java.lang.Throwable)>
<sun.java2d.loops.GraphicsPrimitiveMgr: sun.java2d.loops.GraphicsPrimitive locate(sun.java2d.loops.GraphicsPrimitiveMgr$PrimitiveSpec)>
<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>
<sun.reflect.NativeConstructorAccessorImpl: void setParent(sun.reflect.DelegatingConstructorAccessorImpl)>
<java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)>
<sun.util.LocaleServiceProviderPool: void <init>(java.lang.Class)>
<java.lang.Class: java.lang.Object newInstance()>
<sun.misc.SoftCache: java.lang.Object fill(java.lang.Object)>
<java.lang.Character: char[] toChars(int)>
<java.lang.String: char[] toCharArray()>
<sun.misc.FDBigInt: boolean dataInRangeIsZero(int,int,sun.misc.FDBigInt)>
<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>
<java.awt.Window: void hide()>
<java.util.concurrent.ConcurrentHashMap: int hash(int)>
<java.lang.Float: float parseFloat(java.lang.String)>
<java.awt.image.ColorModel: int[] getComponentSize()>
<sun.reflect.ClassFileAssembler: void emitConstantPoolNameAndType(short,short)>
<javax.swing.JFrame: void setDefaultCloseOperation(int)>
<java.io.DataOutputStream: void <init>(java.io.OutputStream)>
<javax.swing.RepaintManager$PaintManager: void copyArea(javax.swing.JComponent,java.awt.Graphics,int,int,int,int,int,int,boolean)>
<javax.swing.text.AbstractDocument: void fireUndoableEditUpdate(javax.swing.event.UndoableEditEvent)>
<javax.swing.JRootPane: java.awt.Component createGlassPane()>
<sun.awt.image.SurfaceManager: void setManager(java.awt.Image,sun.awt.image.SurfaceManager)>
<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()>
<java.lang.Exception: void <init>(java.lang.String)>
<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$HashEntry entryAt(java.util.concurrent.ConcurrentHashMap$HashEntry[],int)>
<java.security.AccessControlContext: void calculateFields(java.security.AccessControlContext,java.security.AccessControlContext,java.security.Permission[])>
<java.lang.String: void <init>(java.lang.String)>
<java.util.HashMap: int hash(int)>
<java.lang.String: boolean contains(java.lang.CharSequence)>
<java.awt.Component: boolean mouseDrag(java.awt.Event,int,int)>
<java.lang.ConditionalSpecialCasing: boolean isBeforeDot(java.lang.String,int)>
<javax.swing.RepaintManager: javax.swing.RepaintManager currentManager(java.awt.Component)>
<java.lang.Shutdown: void halt(int)>
<javax.swing.SwingUtilities: boolean isEventDispatchThread()>
<sun.reflect.ClassFileAssembler: void opc_i2l()>
<javax.swing.text.GapVector: void shiftEnd(int)>
<sun.font.AttributeValues: void defineAll(int)>
<sun.awt.image.SunVolatileImage: int getWidth()>
<java.lang.String: int lastIndexOf(int)>
<java.lang.ref.SoftReference: void <init>(java.lang.Object)>
<java.util.regex.Pattern$UnixDollar: void <init>(boolean)>
<java.util.concurrent.atomic.AtomicInteger: void <init>()>
<java.lang.SecurityException: void <init>(java.lang.String)>
<java.util.logging.Logger: java.lang.String getResourceBundleName()>
<sun.reflect.AccessorGenerator: void emitCommonConstantPoolEntries()>
<java.lang.Double: void <init>(double)>
<java.util.SimpleTimeZone: long getStart(sun.util.calendar.BaseCalendar,sun.util.calendar.BaseCalendar$Date,int)>
<java.util.logging.Logger: void <init>(java.lang.String,java.lang.String,java.lang.Class,boolean)>
<sun.java2d.loops.GraphicsPrimitive: int getPrimTypeID()>
<java.util.concurrent.locks.ReentrantReadWriteLock$FairSync: void <init>()>
<java.lang.NullPointerException: void <init>()>
<sun.util.calendar.AbstractCalendar: void setEras(sun.util.calendar.Era[])>
<java.lang.StringBuilder: java.lang.StringBuilder appendCodePoint(int)>
<javax.swing.JRootPane: void setGlassPane(java.awt.Component)>
<sun.misc.Resource: void <init>()>
<java.awt.Window: void setModalBlocked(java.awt.Dialog,boolean,boolean)>
<java.util.regex.Pattern$NotBehind: void <init>(java.util.regex.Pattern$Node,int,int)>
<java.awt.Component: boolean keyUp(java.awt.Event,int)>
<java.awt.event.FocusEvent: void <init>(java.awt.Component,int,boolean,java.awt.Component)>
<java.awt.image.ColorModel: int getRed(java.lang.Object)>
<java.util.regex.Pattern$BmpCharProperty: void <init>()>
<java.awt.geom.AffineTransform: java.awt.geom.Point2D deltaTransform(java.awt.geom.Point2D,java.awt.geom.Point2D)>
<java.lang.AbstractStringBuilder: java.lang.String substring(int,int)>
<java.lang.Thread: void setPriority(int)>
<java.lang.Throwable: void <init>()>
<javax.swing.JViewport: java.awt.LayoutManager createLayoutManager()>
<java.awt.datatransfer.MimeTypeParameterList: java.lang.String toString()>
<java.util.regex.Pattern: void normalize()>
<java.awt.event.MouseWheelEvent: int getScrollAmount()>
<javax.swing.JComponent: java.awt.Graphics safelyGetGraphics(java.awt.Component,java.awt.Component)>
<java.lang.Character: boolean isLowerCase(int)>
<java.util.ResourceBundle$Control: boolean needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)>
<java.util.Stack: void <init>()>
<java.io.FilterReader: void <init>(java.io.Reader)>
<java.util.regex.Pattern$Ctype: void <init>(int)>
<java.awt.EventQueue: int eventToCacheIndex(java.awt.AWTEvent)>
<java.io.PrintStream: void println(java.lang.Object)>
<javax.swing.RepaintManager: void resetVolatileDoubleBuffer(java.awt.GraphicsConfiguration)>
<sun.misc.FDBigInt: sun.misc.FDBigInt add(sun.misc.FDBigInt)>
<sun.misc.URLClassPath: void <init>(java.net.URL[],java.net.URLStreamHandlerFactory)>
<sun.misc.FDBigInt: int normalizeMe()>
<java.lang.StringCoding: void set(java.lang.ThreadLocal,java.lang.Object)>
<javax.swing.DebugGraphicsInfo: void <init>()>
<javax.swing.JFrame: void remove(java.awt.Component)>
<java.awt.Event: char getKeyEventChar()>
<sun.reflect.UnsafeStaticFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<java.util.SimpleTimeZone: int getRawOffset()>
<java.awt.geom.AffineTransform: double getShearY()>
<sun.util.resources.LocaleData: java.util.Locale[] getAvailableLocales()>
<java.awt.Toolkit: java.awt.EventQueue getEventQueue()>
<java.io.BufferedWriter: void <init>(java.io.Writer,int)>
<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>
<java.text.AttributedString: void <init>(java.text.AttributedCharacterIterator,int,int,java.text.AttributedCharacterIterator$Attribute[])>
<java.awt.Component: void processEvent(java.awt.AWTEvent)>
<javax.swing.RepaintManager: void scheduleProcessingRunnable()>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onMalformedInput(java.nio.charset.CodingErrorAction)>
<java.awt.geom.AffineTransform: int getType()>
<java.util.Formatter$Conversion: boolean isGeneral(char)>
<javax.swing.text.StyleContext: javax.swing.text.StyleContext$SmallAttributeSet createSmallAttributeSet(javax.swing.text.AttributeSet)>
<java.lang.Runtime: java.lang.Runtime getRuntime()>
<java.awt.Window: boolean isModalBlocked()>
<java.awt.KeyboardFocusManager: void checkReplaceKFMPermission()>
<java.awt.datatransfer.MimeTypeParameterList: java.lang.String get(java.lang.String)>
<java.io.BufferedReader: void close()>
<java.text.NumberFormat: int getMinimumIntegerDigits()>
<java.lang.Character: boolean isJavaIdentifierStart(int)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult flush(java.nio.CharBuffer)>
<java.nio.Buffer: java.nio.Buffer flip()>
<java.lang.System: java.lang.SecurityManager getSecurityManager()>
<sun.misc.FDBigInt: void <init>(int)>
<java.lang.reflect.Method: int getModifiers()>
<sun.awt.AppContext: java.lang.Object remove(java.lang.Object)>
<java.nio.ByteBuffer: byte[] array()>
<java.lang.Character$UnicodeBlock: java.lang.Character$UnicodeBlock forName(java.lang.String)>
<sun.misc.URLClassPath$Loader: java.net.URL[] getClassPath()>
<java.awt.AWTEventMulticaster: java.util.EventListener addInternal(java.util.EventListener,java.util.EventListener)>
<java.lang.StringIndexOutOfBoundsException: void <init>()>
<java.lang.reflect.Field: int getModifiers()>
<java.util.AbstractList: java.lang.String outOfBoundsMsg(int)>
<java.awt.KeyboardFocusManager: java.awt.Component getFocusOwner()>
<javax.swing.AbstractButton: void setEnabled(boolean)>
<sun.reflect.ClassFileAssembler: void opc_invokevirtual(short,int,int)>
<javax.swing.JComponent: javax.swing.ArrayTable getClientProperties()>
<java.lang.Integer: void getChars(int,int,char[])>
<javax.swing.JScrollPane: javax.swing.JViewport getViewport()>
<sun.reflect.ClassFileAssembler: void opc_aload_0()>
<javax.swing.JPopupMenu: void setInvoker(java.awt.Component)>
<java.util.Hashtable: void <init>()>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean compareAndSetState(int,int)>
<java.text.FieldPosition: void setBeginIndex(int)>
<sun.java2d.pipe.ShapeSpanIterator: void setOutputArea(sun.java2d.pipe.Region)>
<sun.awt.image.ByteComponentRaster: byte[] getDataStorage()>
<java.util.logging.Logger: void fine(java.lang.String)>
<java.awt.Component: void setFont(java.awt.Font)>
<java.awt.datatransfer.DataFlavor: java.lang.Class tryToLoadClass(java.lang.String,java.lang.ClassLoader)>
<java.lang.Class: java.lang.String getSimpleBinaryName()>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setDayOfMonth(int)>
<sun.swing.AccessibleMethod$AccessMethodAction: void <init>(java.lang.Class,java.lang.String,java.lang.Class[])>
<sun.java2d.loops.CompositeType: sun.java2d.loops.CompositeType getSuperType()>
<java.awt.Container: boolean isFocusCycleRoot()>
<java.awt.Container: void recursiveSubtractAndApplyShape(sun.java2d.pipe.Region,int,int)>
<javax.swing.text.Segment: char first()>
<java.util.concurrent.locks.ReentrantReadWriteLock$Sync: void <init>()>
<java.awt.KeyboardFocusManager: void initPeer()>
<sun.util.calendar.Gregorian: sun.util.calendar.Gregorian$Date newCalendarDate(java.util.TimeZone)>
<java.lang.StringBuilder: int length()>
<java.lang.Class$1: void <init>(java.lang.Class,java.lang.reflect.Constructor)>
<javax.swing.UIDefaults: void <init>(int,float)>
<java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)>
<sun.security.util.Debug: sun.security.util.Debug getInstance(java.lang.String)>
<javax.swing.RepaintManager$ProcessingRunnable: void <init>(javax.swing.RepaintManager)>
<java.util.regex.Pattern$Ques: void <init>(java.util.regex.Pattern$Node,int)>
<java.util.HashSet: java.util.Iterator iterator()>
<java.util.logging.LogManager$LogNode: void <init>(java.util.logging.LogManager$LogNode,java.util.logging.LogManager$LoggerContext)>
<java.awt.dnd.DropTarget: void addNotify(java.awt.peer.ComponentPeer)>
<java.text.DecimalFormatSymbols: char getZeroDigit()>
<java.util.concurrent.CopyOnWriteArrayList: java.lang.Object[] getArray()>
<java.lang.ThreadLocal$ThreadLocalMap: java.lang.ThreadLocal$ThreadLocalMap$Entry access$000(java.lang.ThreadLocal$ThreadLocalMap,java.lang.ThreadLocal)>
<java.awt.EventQueue: boolean coalesceMouseEvent(java.awt.event.MouseEvent)>
<sun.java2d.loops.FillRect: sun.java2d.loops.FillRect locate(sun.java2d.loops.SurfaceType,sun.java2d.loops.CompositeType,sun.java2d.loops.SurfaceType)>
<sun.reflect.ReflectionFactory: sun.reflect.LangReflectAccess langReflectAccess()>
<java.text.RuleBasedBreakIterator: byte[] readFile(java.lang.String)>
<sun.reflect.ClassFileAssembler: void incStack()>
<java.util.regex.Pattern: void unread()>
<java.lang.String: java.lang.String valueOf(int)>
<java.util.logging.Level: int access$100(java.util.logging.Level)>
<sun.awt.image.VSyncedBSManager$NoLimitVSyncBSMgr: void <init>(sun.awt.image.VSyncedBSManager$1)>
<java.io.PrintWriter: void ensureOpen()>
<java.util.regex.Pattern: boolean isSurrogate(int)>
<java.util.logging.LogManager: void access$900(java.util.logging.Logger,java.util.logging.Logger)>
<java.awt.image.ColorModel: int getRGB(java.lang.Object)>
<java.awt.Component: boolean isFocusTraversable()>
<java.awt.Container: void layout()>
<java.util.SimpleTimeZone: void <init>(int,java.lang.String,int,int,int,int,int,int,int,int,int,int,int)>
<javax.swing.MultiUIDefaults: void <init>(javax.swing.UIDefaults[])>
<javax.swing.SwingUtilities: boolean getSuppressDropTarget()>
<java.lang.ConditionalSpecialCasing: boolean isAfterSoftDotted(java.lang.String,int)>
<sun.reflect.Reflection: java.lang.Class getCallerClass(int)>
<javax.swing.ToolTipManager$insideTimerAction: void <init>(javax.swing.ToolTipManager)>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty bitsOrSingle(java.util.regex.Pattern$BitClass,int)>
<java.io.DataInputStream: java.lang.String readUTF(java.io.DataInput)>
<java.lang.Integer: int stringSize(int)>
<java.util.logging.LogManager: java.util.logging.Logger getLogger(java.lang.String)>
<sun.awt.image.BufImgSurfaceData: sun.java2d.SurfaceData createDataSC(java.awt.image.BufferedImage,sun.java2d.loops.SurfaceType,java.awt.image.IndexColorModel)>
<sun.awt.image.SunVolatileImage: java.awt.Color getBackground()>
<java.lang.ThreadLocal$ThreadLocalMap: void replaceStaleEntry(java.lang.ThreadLocal,java.lang.Object,int)>
<java.text.DecimalFormatSymbols: java.lang.String getInternationalCurrencySymbol()>
<java.net.URL: java.io.InputStream openStream()>
<java.awt.Frame: void init(java.lang.String,java.awt.GraphicsConfiguration)>
<java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)>
<javax.swing.text.StyleContext: javax.swing.text.StyleContext getDefaultStyleContext()>
<java.lang.reflect.Method: sun.reflect.MethodAccessor getMethodAccessor()>
<java.util.concurrent.ConcurrentHashMap: java.util.concurrent.ConcurrentHashMap$Segment segmentForHash(int)>
<java.awt.event.ComponentEvent: void <init>(java.awt.Component,int)>
<java.awt.geom.NoninvertibleTransformException: void <init>(java.lang.String)>
<javax.swing.Timer: void <init>(int,java.awt.event.ActionListener)>
<java.lang.Float: java.lang.Float valueOf(float)>
<java.awt.event.KeyEvent: void setNewModifiers()>
<java.awt.KeyboardFocusManager: java.awt.AWTEvent retargetFocusEvent(java.awt.AWTEvent)>
<java.awt.KeyboardFocusManager: void clearMarkers()>
<java.io.StringReader: void <init>(java.lang.String)>
<java.util.regex.Pattern: java.util.regex.Pattern$Node newSlice(int[],int,boolean)>
<sun.java2d.pipe.Region: sun.java2d.pipe.Region getInstance(int[])>
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String,java.lang.Throwable)>
<java.awt.event.HierarchyEvent: void <init>(java.awt.Component,int,java.awt.Component,java.awt.Container,long)>
<java.awt.AWTError: void <init>(java.lang.String)>
<javax.swing.JFrame: void <init>()>
<java.awt.Container: void addImpl(java.awt.Component,java.lang.Object,int)>
<java.lang.String: void <init>(int,int,char[])>
<java.security.Policy$1: void <init>()>
<java.awt.Component: java.awt.peer.ComponentPeer getPeer()>
<java.io.FileReader: void <init>(java.lang.String)>
<java.awt.Window: void doDispose()>
<java.util.concurrent.locks.AbstractOwnableSynchronizer: void setExclusiveOwnerThread(java.lang.Thread)>
<java.lang.StringCoding: int access$000(int,float)>
<javax.swing.AbstractButton: int getMnemonic()>
<sun.java2d.xr.XRVolatileSurfaceManager: void <init>(sun.awt.image.SunVolatileImage,java.lang.Object)>
<java.awt.Event: void <init>(java.lang.Object,int,java.lang.Object)>
<javax.swing.JScrollBar$ModelListener: void <init>(javax.swing.JScrollBar)>
<java.lang.Throwable: void printStackTraceAsCause(java.io.PrintStream,java.lang.StackTraceElement[])>
<javax.swing.SwingPaintEventDispatcher: void <init>()>
<java.util.HashMap: java.util.HashMap$Entry getEntry(java.lang.Object)>
<javax.swing.text.AbstractDocument: void removeUpdate(javax.swing.text.AbstractDocument$DefaultDocumentEvent)>
<java.text.MessageFormat: java.lang.StringBuffer subformat(java.lang.Object[],java.lang.StringBuffer,java.text.FieldPosition,java.util.List)>
<javax.swing.AbstractButton: void updateDisplayedMnemonicIndex(java.lang.String,int)>
<sun.reflect.MethodAccessorGenerator: sun.reflect.MagicAccessorImpl generate(java.lang.Class,java.lang.String,java.lang.Class[],java.lang.Class,java.lang.Class[],int,boolean,boolean,java.lang.Class)>
<javax.swing.RepaintManager$PaintManager: boolean paint(javax.swing.JComponent,javax.swing.JComponent,java.awt.Graphics,int,int,int,int)>
<java.text.AttributedString$AttributedStringIterator: void updateRunInfo()>
<java.util.logging.Logger: java.util.logging.Handler[] accessCheckedHandlers()>
<sun.util.calendar.CalendarDate: int getMonth()>
<java.util.regex.Pattern$CharPropertyNames: java.util.regex.Pattern$CharProperty charPropertyFor(java.lang.String)>
<java.util.regex.Pattern$GroupTail: void <init>(int,int)>
<sun.reflect.UnsafeQualifiedStaticShortFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<javax.swing.JComponent: void paintToOffscreen(java.awt.Graphics,int,int,int,int,int,int)>
<java.util.Locale: java.util.Locale getDefault()>
<java.text.DecimalFormat: void setMaximumIntegerDigits(int)>
<java.awt.Component: java.util.Set getFocusTraversalKeys_NoIDCheck(int)>
<sun.reflect.UnsafeStaticBooleanFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<java.util.concurrent.ConcurrentHashMap$Segment: void rehash(java.util.concurrent.ConcurrentHashMap$HashEntry)>
<java.util.logging.Logger: void updateEffectiveLevel()>
<java.util.ResourceBundle$CacheKey: java.lang.ClassLoader getLoader()>
<java.awt.event.MouseEvent: int getX()>
<java.text.BreakIterator$BreakIteratorCache: void <init>(java.util.Locale,java.text.BreakIterator)>
<java.util.regex.Pattern$CharProperty: void <init>(java.util.regex.Pattern$1)>
<sun.awt.im.InputMethodLocator: void <init>(java.awt.im.spi.InputMethodDescriptor,java.lang.ClassLoader,java.util.Locale)>
<javax.swing.JLabel: java.lang.String getText()>
<java.util.AbstractSet: void <init>()>
<java.text.MessageFormat: void applyPattern(java.lang.String)>
<sun.reflect.misc.ReflectUtil: void checkProxyPackageAccess(java.lang.Class)>
<java.net.URL: void <init>(java.net.URL,java.lang.String)>
<java.lang.ref.WeakReference: void <init>(java.lang.Object)>
<javax.swing.event.EventListenerList: void <init>()>
<sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>
<java.util.Vector: void ensureCapacityHelper(int)>
<java.lang.Integer: java.lang.Integer valueOf(int)>
<java.awt.Component: java.awt.AWTEvent coalesceEvents(java.awt.AWTEvent,java.awt.AWTEvent)>
<sun.reflect.MethodAccessorGenerator: int numNonPrimitiveParameterTypes()>
<javax.swing.JViewport: boolean computeBlit(int,int,java.awt.Point,java.awt.Point,java.awt.Dimension,java.awt.Rectangle)>
<java.io.PrintStream: void println()>
<java.util.Date: void <init>(long)>
<java.awt.datatransfer.MimeType: java.lang.String toString()>
<java.lang.String: boolean isEmpty()>
<sun.reflect.UnsafeStaticObjectFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<java.util.logging.Logger: java.util.logging.Handler[] getHandlers()>
<java.lang.Math: int round(float)>
<sun.util.LocaleServiceProviderPool: sun.util.LocaleServiceProviderPool getPool(java.lang.Class)>
<javax.swing.SwingUtilities: java.awt.Component getRoot(java.awt.Component)>
<java.util.Arrays: int[] copyOf(int[],int)>
<java.lang.ref.Reference: void <init>(java.lang.Object)>
<java.awt.EventQueue: boolean coalesceOtherEvent(java.awt.AWTEvent,int)>
<sun.awt.AppContext$3: void <init>()>
<java.util.HashMap$KeySet: void <init>(java.util.HashMap,java.util.HashMap$1)>
<sun.font.FontManager: boolean isComplexCharCode(int)>
<sun.util.CoreResourceBundleControl: sun.util.CoreResourceBundleControl getRBControlInstance(java.lang.String)>
<java.text.BreakIterator: void <init>()>
<java.nio.ReadOnlyBufferException: void <init>()>
<sun.misc.SoftCache: void processQueue()>
<java.io.PrintStream: void print(char)>
<sun.awt.image.SunVolatileImage: java.awt.Font getFont()>
<java.text.BreakIterator: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>
<java.text.NumberFormat: java.text.NumberFormat getInstance(java.util.Locale,int)>
<javax.swing.UIDefaults: void firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)>
<java.util.DuplicateFormatFlagsException: void <init>(java.lang.String)>
<java.awt.Container: void validate()>
<java.nio.charset.CoderResult: void throwException()>
<java.awt.AWTKeyStroke: java.awt.AWTKeyStroke getAWTKeyStroke(java.lang.String)>
<java.awt.Image: void <init>()>
<java.awt.Frame: void setUndecorated(boolean)>
<java.util.ResourceBundle$CacheKey: long access$602(java.util.ResourceBundle$CacheKey,long)>
<java.lang.StackTraceElement: boolean equals(java.lang.Object)>
<sun.reflect.UnsafeStaticShortFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<java.awt.Cursor: java.awt.Cursor getPredefinedCursor(int)>
<java.lang.SecurityManager: java.lang.String[] getPackages(java.lang.String)>
<java.lang.StringBuilder: java.lang.StringBuilder append(char)>
<javax.swing.plaf.metal.MetalLookAndFeel: void setCurrentTheme(javax.swing.plaf.metal.MetalTheme)>
<java.awt.geom.Rectangle2D: void <init>()>
<java.util.regex.Pattern$Loop: void <init>(int,int)>
<javax.swing.ArrayTable: void shrink()>
<sun.misc.FDBigInt: sun.misc.FDBigInt mult(int)>
<javax.swing.JComponent: boolean isPaintingOrigin()>
<java.awt.EventQueue: boolean isDispatchThread()>
<java.lang.reflect.Method: java.lang.Class getCallerClass()>
<java.awt.GraphicsConfiguration: java.awt.image.VolatileImage createCompatibleVolatileImage(int,int,java.awt.ImageCapabilities,int)>
<java.lang.Math: double sin(double)>
<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>
<sun.reflect.Label$PatchInfo: void <init>(sun.reflect.ClassFileAssembler,short,short,int)>
<sun.awt.image.VSyncedBSManager: sun.awt.image.VSyncedBSManager getInstance(boolean)>
<java.util.LinkedList: int size()>
<java.io.FileInputStream: void <init>(java.io.File)>
<javax.swing.UIManager: void initializeAuxiliaryLAFs(java.util.Properties)>
<java.util.logging.LogManager: void readPrimordialConfiguration()>
<javax.swing.JComponent: int getY()>
<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>
<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>
<java.io.FileDescriptor: int incrementAndGetUseCount()>
<sun.reflect.ReflectionFactory: java.lang.reflect.Field copyField(java.lang.reflect.Field)>
<java.text.DecimalFormat: int getMinimumIntegerDigits()>
<java.util.LinkedList: void <init>()>
<sun.java2d.pipe.Region: sun.java2d.pipe.Region getTranslatedRegion(int,int)>
<sun.util.calendar.CalendarDate: void setDaylightSaving(int)>
<sun.java2d.loops.GraphicsPrimitiveMgr$PrimitiveSpec: void <init>(sun.java2d.loops.GraphicsPrimitiveMgr$1)>
<sun.util.calendar.ZoneInfoFile: sun.util.calendar.ZoneInfo getCustomTimeZone(java.lang.String,int)>
<java.util.logging.Logger: void log(java.util.logging.Level,java.lang.String)>
<java.lang.Boolean: boolean equals(java.lang.Object)>
<java.util.HashSet: void <init>()>
<java.util.Properties: java.lang.String loadConvert(char[],int,int,char[])>
<java.awt.image.ColorModel: int getAlpha(java.lang.Object)>
<java.util.Formatter$Flags: int valueOf()>
<java.awt.Component: void enableInputMethods(boolean)>
<java.awt.Component: java.awt.Dimension minimumSize()>
<sun.awt.image.ByteComponentRaster: int getDataOffset(int)>
<javax.swing.JComponent: void uninstallUIAndProperties()>
<java.util.TimeZone: java.lang.Object clone()>
<java.util.regex.Pattern$2: void <init>(int,int)>
<javax.swing.Timer$DoPostEvent: void <init>(javax.swing.Timer)>
<javax.swing.text.GapContent: void <init>()>
<java.io.File: void <init>(java.lang.String,int)>
<sun.util.calendar.AbstractCalendar: void <init>()>
<java.util.SimpleTimeZone: void decodeRules()>
<javax.swing.JTextField: javax.swing.text.Document createDefaultModel()>
<java.lang.ThreadLocal$ThreadLocalMap: void expungeStaleEntries()>
<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>
<java.beans.PropertyChangeEvent: java.lang.Object getNewValue()>
<sun.text.Normalizer: int getCombiningClass(int)>
<java.util.Hashtable: void <init>(int,float)>
<java.util.HashSet: void <init>(int,float,boolean)>
<javax.swing.JComponent: void printBorder(java.awt.Graphics)>
<sun.util.calendar.CalendarDate: void <init>()>
<java.util.regex.Pattern: java.util.regex.Pattern$CharProperty intersection(java.util.regex.Pattern$CharProperty,java.util.regex.Pattern$CharProperty)>
<java.util.Date: long getTimeImpl()>
<sun.awt.dnd.SunDropTargetContextPeer$EventDispatcher: void dispatchExitEvent(sun.awt.dnd.SunDropTargetEvent)>
<java.io.BufferedReader: void <init>(java.io.Reader,int)>
<java.util.ResourceBundle$CacheKey: void setFormat(java.lang.String)>
<sun.misc.URLClassPath: sun.misc.URLClassPath$Loader getLoader(java.net.URL)>
<javax.swing.BufferStrategyPaintManager: void <init>()>
<sun.util.calendar.AbstractCalendar: long getDayOfWeekDateOnOrBefore(long,int)>
<java.util.Date: sun.util.calendar.BaseCalendar getCalendarSystem(int)>
<sun.util.LocaleServiceProviderPool: java.util.Locale findProviderLocale(java.util.Locale,java.util.Locale)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void setState(int)>
<javax.swing.text.SimpleAttributeSet: void addAttributes(javax.swing.text.AttributeSet)>
<java.awt.datatransfer.MimeType: java.lang.String getPrimaryType()>
<java.awt.Window: java.lang.Object access$1200(java.awt.Window)>
<javax.swing.ArrayTable: java.lang.Object[] getKeys(java.lang.Object[])>
<java.awt.image.ColorModel: int getComponentSize(int)>
<sun.awt.EventQueueItem: void <init>(java.awt.AWTEvent)>
<java.lang.Thread: int getPriority()>
<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>
<sun.awt.SunToolkit: void awtUnlock()>
<java.text.DecimalFormat: java.lang.String expandAffix(java.lang.String,java.lang.StringBuffer)>
<java.text.NumberFormat: void <init>()>
<javax.swing.text.Segment: void <init>()>
<sun.awt.im.InputContext: void disableNativeIM()>
<java.util.StringTokenizer: boolean hasMoreElements()>
<javax.swing.ToolTipManager$stillInsideTimerAction: void <init>(javax.swing.ToolTipManager)>
<java.awt.event.ItemEvent: int getStateChange()>
<java.util.regex.Pattern: void subFlag()>
<java.lang.StringCoding$StringDecoder: char[] decode(byte[],int,int)>
<java.lang.Character: boolean isSupplementaryCodePoint(int)>
<java.lang.SecurityManager$1: void <init>(java.lang.SecurityManager)>
<java.util.Currency: void <init>(java.lang.String,int,int)>
<java.awt.EventQueueItem: void <init>(java.awt.AWTEvent)>
<sun.awt.dnd.SunDropTargetContextPeer$EventDispatcher: void dispatchEnterEvent(sun.awt.dnd.SunDropTargetEvent)>
<sun.reflect.UnsafeStaticFloatFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<java.awt.KeyboardFocusManager: void setDefaultFocusTraversalPolicy(java.awt.FocusTraversalPolicy)>
<java.text.BreakDictionary: void <init>(java.lang.String)>
<javax.swing.AbstractButton$Handler: void <init>(javax.swing.AbstractButton)>
<java.util.concurrent.ConcurrentHashMap$HashEntry: void <init>(int,java.lang.Object,java.lang.Object,java.util.concurrent.ConcurrentHashMap$HashEntry)>
<javax.swing.JProgressBar: void setString(java.lang.String)>
<sun.awt.AppContext: java.lang.Object put(java.lang.Object,java.lang.Object)>
<javax.swing.RepaintManager: void paint(javax.swing.JComponent,javax.swing.JComponent,java.awt.Graphics,int,int,int,int)>
<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>
<java.security.PermissionCollection: void <init>()>
<java.security.AccessControlContext: java.security.ProtectionDomain[] combine(java.security.ProtectionDomain[],java.security.ProtectionDomain[])>
<java.lang.ThreadLocal: int nextHashCode()>
<java.awt.event.InvocationEvent: java.lang.Throwable getThrowable()>
<sun.util.calendar.ZoneInfoFile: java.lang.String toCustomID(int)>
<java.io.FileOutputStream: void <init>(java.lang.String)>
<java.lang.StringBuilder: char charAt(int)>
<java.awt.Component: void enableEvents(long)>
<javax.swing.SwingUtilities: java.lang.Class loadSystemClass(java.lang.String)>
<java.awt.geom.AffineTransform: java.awt.geom.AffineTransform getRotateInstance(double,double)>
<java.lang.StringBuilder: void <init>()>
<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>
<java.lang.Character: boolean isJavaIdentifierStart(char)>
<javax.swing.TimerQueue$1: void <init>(javax.swing.TimerQueue,java.lang.ThreadGroup)>
<java.lang.Boolean: boolean toBoolean(java.lang.String)>
<java.awt.image.BufferedImage: void coerceData(boolean)>
<sun.reflect.ClassFileAssembler: void emitShort(short)>
<java.beans.PropertyChangeSupport: void addPropertyChangeListener(java.beans.PropertyChangeListener)>
<java.awt.VKCollection: void <init>()>
<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>
<javax.swing.text.AbstractDocument: byte[] calculateBidiLevels(int,int)>
<javax.swing.JComponent: void setInheritsPopupMenu(boolean)>
<java.util.Locale: java.lang.String toLowerCase(java.lang.String)>
<java.awt.Component: java.lang.Object getChangeSupportLock()>
<javax.swing.JComponent: boolean isOptimizedDrawingEnabled()>
<java.text.DictionaryBasedBreakIterator: void prepareCategoryFlags(byte[])>
<java.util.logging.Level$KnownLevel: void <init>(java.util.logging.Level)>
<java.awt.Component: boolean isValid()>
<sun.security.util.Debug: void println(java.lang.String)>
<java.awt.Component: void processHierarchyEvent(java.awt.event.HierarchyEvent)>
<java.util.SimpleTimeZone: void <init>(int,java.lang.String,int,int,int,int,int,int,int,int,int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: int getState()>
<java.util.regex.Pattern$Branch: void add(java.util.regex.Pattern$Node)>
<javax.swing.UIManager: javax.swing.LookAndFeel getMultiLookAndFeel()>
<java.util.regex.Pattern: int countCodePoints(java.lang.CharSequence)>
<java.awt.Component: boolean eventTypeEnabled(int)>
<javax.swing.JFrame: void setRootPane(javax.swing.JRootPane)>
<java.lang.reflect.Field: int getInt(java.lang.Object)>
<java.awt.KeyboardFocusManager: void handleException(java.lang.Throwable)>
<javax.swing.JRootPane: java.awt.Container getContentPane()>
<java.util.TimeZone: java.util.TimeZone getDefaultRef()>
<java.lang.Character: boolean isLetterOrDigit(int)>
<java.util.Formatter$Conversion: boolean isCharacter(char)>
<java.awt.Container: void proxyEnableEvents(long)>
<java.util.regex.Pattern$BehindS: void <init>(java.util.regex.Pattern$Node,int,int)>
<sun.nio.cs.StreamDecoder: void close()>
<sun.reflect.ClassFileAssembler: void opc_areturn()>
<java.awt.Component: void repaint()>
<java.util.Currency: int getMainTableEntry(char,char)>
<java.util.StringTokenizer: void <init>(java.lang.String)>
<javax.swing.JRootPane: void setContentPane(java.awt.Container)>
<javax.swing.DebugGraphics: boolean debugLog()>
<java.lang.reflect.Modifier: boolean isStatic(int)>
<java.net.URL: java.lang.String toString()>
<java.util.ArrayList: void clear()>
<javax.swing.ToolTipManager: void <init>()>
<sun.java2d.pipe.Region: void appendSpan(int[])>
<java.lang.ref.ReferenceQueue: java.lang.ref.Reference poll()>
<sun.awt.SunToolkit: void postEvent(sun.awt.AppContext,java.awt.AWTEvent)>
<java.text.DateFormat: java.text.DateFormat get(int,int,int,java.util.Locale)>
<javax.swing.plaf.metal.DefaultMetalTheme: void install()>
<java.util.regex.Matcher: int groupCount()>
<java.util.Hashtable$Enumerator: void <init>(java.util.Hashtable,int,boolean)>
<javax.swing.text.StyleContext$FontKey: void setValue(java.lang.String,int,int)>
<java.util.Arrays: boolean equals(byte[],byte[])>
<sun.awt.X11GraphicsDevice: java.lang.Object getProxyKeyFor(sun.java2d.loops.SurfaceType)>
<java.awt.Window: boolean getFocusableWindowState()>
<sun.reflect.UnsafeStaticByteFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<java.awt.Component: void checkTreeLock()>
<javax.swing.JViewport: void removeChangeListener(javax.swing.event.ChangeListener)>
<java.awt.AWTEventMulticaster: void <init>(java.util.EventListener,java.util.EventListener)>
<java.awt.datatransfer.SystemFlavorMap: void parseAndStoreReader(java.io.BufferedReader)>
<java.io.FileNotFoundException: void <init>(java.lang.String)>
<java.awt.Component: boolean isShowing()>
<java.lang.AbstractStringBuilder: char charAt(int)>
<java.lang.Throwable: java.lang.Throwable getCause()>
<java.lang.reflect.Modifier: boolean isVolatile(int)>
<javax.swing.SwingUtilities: int findDisplayedMnemonicIndex(java.lang.String,int)>
<java.util.WeakHashMap$Entry: void <init>(java.lang.Object,java.lang.Object,java.lang.ref.ReferenceQueue,int,java.util.WeakHashMap$Entry)>
<javax.swing.DebugGraphics: boolean isDrawingBuffer()>
<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Throwable)>
<java.lang.Thread: void checkAccess()>
<javax.swing.JViewport: void setViewPosition(java.awt.Point)>
<javax.swing.TransferHandler: void <init>(java.lang.String)>
<java.util.Formatter$FormatSpecifier: void <init>(java.util.Formatter,java.util.Formatter,java.lang.String[])>
<java.awt.datatransfer.DataFlavor: java.lang.String getParameter(java.lang.String)>
<javax.swing.JScrollPane: void setVerticalScrollBar(javax.swing.JScrollBar)>
<sun.awt.image.BufImgSurfaceData: sun.java2d.SurfaceData createData(java.awt.image.BufferedImage)>
<java.util.AbstractCollection: void <init>()>
<sun.misc.SoftCache$ValueCell: java.lang.Object access$100(sun.misc.SoftCache$ValueCell)>
<javax.swing.TransferHandler$TransferSupport: void <init>(java.awt.Component,java.awt.dnd.DropTargetEvent,javax.swing.TransferHandler$1)>
<java.util.Formatter: java.util.Formatter$FormatString[] parse(java.lang.String)>
<sun.font.AttributeValues: java.awt.geom.AffineTransform extractXRotation(java.awt.geom.AffineTransform,boolean)>
<java.util.zip.ZipEntry: long dosToJavaTime(long)>
<java.util.ResourceBundle: java.util.ResourceBundle loadBundle(java.util.ResourceBundle$CacheKey,java.util.List,java.util.ResourceBundle$Control,boolean)>
<sun.reflect.UnsafeQualifiedDoubleFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<java.awt.KeyboardFocusManager: boolean isAutoFocusTransferEnabledFor(java.awt.Component)>
<java.io.DataInputStream: int read(byte[])>
<javax.swing.JButton: void <init>(java.lang.String,javax.swing.Icon)>
<javax.swing.text.SegmentCache: javax.swing.text.SegmentCache getSharedInstance()>
<java.util.ResourceBundle: void <init>()>
<javax.swing.LookAndFeel: void initialize()>
<java.lang.ThreadLocal$ThreadLocalMap: void setThreshold(int)>
<java.lang.Class: java.lang.ClassLoader getClassLoader()>
<java.lang.String: char charAt(int)>
<java.lang.Character: boolean isLetter(char)>
<sun.java2d.pipe.Region: boolean isEmpty()>
<java.lang.StringCoding$StringDecoder: java.lang.String charsetName()>
<java.lang.IllegalThreadStateException: void <init>()>
<javax.swing.text.Segment: char next()>
<java.nio.charset.UnmappableCharacterException: void <init>(int)>
<java.util.regex.Pattern: java.util.regex.Pattern$Node ref(int)>
<sun.reflect.MethodAccessorGenerator: void emitInvoke()>
<java.lang.ClassLoader: java.lang.ClassLoader getParent()>
<java.awt.event.PaintEvent: java.awt.Rectangle getUpdateRect()>
<sun.misc.FloatingDecimal: float floatValue()>
<java.awt.Component: java.awt.Point getLocation()>
<java.net.MalformedURLException: void <init>(java.lang.String)>
<java.util.PropertyPermission: int getMask(java.lang.String)>
<java.util.Collections$SynchronizedRandomAccessList: void <init>(java.util.List)>
<java.util.concurrent.DelayQueue: boolean remove(java.lang.Object)>
<java.util.regex.PatternSyntaxException: void <init>(java.lang.String,java.lang.String,int)>
<java.awt.Container: void dispatchEventToSelf(java.awt.AWTEvent)>
<sun.awt.image.VSyncedBSManager$NoLimitVSyncBSMgr: void <init>()>
<sun.reflect.AccessorGenerator: boolean isPrimitive(java.lang.Class)>
<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject: void <init>(java.util.concurrent.locks.AbstractQueuedSynchronizer)>
<sun.util.calendar.AbstractCalendar: long getTimeOfDay(sun.util.calendar.CalendarDate)>
<java.lang.ClassLoader: boolean checkName(java.lang.String)>
<javax.swing.JLabel: void updateUI()>
<javax.swing.UIManager: void setLookAndFeel(javax.swing.LookAndFeel)>
<java.util.UnknownFormatConversionException: void <init>(java.lang.String)>
<javax.swing.InternalFrameFocusTraversalPolicy: void <init>()>
<sun.reflect.MethodAccessorGenerator: boolean isInterface()>
<java.awt.Component: boolean isMixingNeeded()>
<sun.reflect.UnsafeQualifiedFloatFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<java.lang.Thread: java.lang.ClassLoader getContextClassLoader()>
<sun.awt.image.BufImgSurfaceData: void <init>(java.awt.image.DataBuffer,java.awt.image.BufferedImage,sun.java2d.loops.SurfaceType)>
<javax.swing.AbstractButton: void setUIProperty(java.lang.String,java.lang.Object)>
<java.util.ArrayList: void ensureCapacity(int)>
<java.lang.SecurityManager: void checkConnect(java.lang.String,int)>
<sun.awt.image.BytePackedRaster: int getDataBitOffset()>
<java.awt.GraphicsEnvironment: void checkHeadless()>
<sun.java2d.loops.DrawGlyphListAA: sun.java2d.loops.DrawGlyphListAA locate(sun.java2d.loops.SurfaceType,sun.java2d.loops.CompositeType,sun.java2d.loops.SurfaceType)>
<java.awt.datatransfer.MimeType: void <init>(java.lang.String)>
<java.lang.Thread: boolean isDaemon()>
<java.util.ArrayList: java.lang.Object elementData(int)>
<java.util.logging.Logger: java.lang.String getEffectiveResourceBundleName()>
<sun.reflect.AccessorGenerator: short add(short,short)>
<java.awt.Component: void initializeFocusTraversalKeys()>
<sun.reflect.UnsafeQualifiedStaticDoubleFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<java.lang.ThreadLocal$ThreadLocalMap: void access$100(java.lang.ThreadLocal$ThreadLocalMap,java.lang.ThreadLocal,java.lang.Object)>
<java.text.NumberFormat: int getMaximumIntegerDigits()>
<java.awt.datatransfer.SystemFlavorMap: java.lang.String loadConvert(java.lang.String)>
<sun.reflect.ReflectionFactory: sun.reflect.MethodAccessor newMethodAccessor(java.lang.reflect.Method)>
<java.awt.datatransfer.MimeTypeParameterList: java.lang.String unquote(java.lang.String)>
<sun.text.normalizer.NormalizerImpl: int getCombiningClass(int)>
<java.awt.datatransfer.MimeType: void parse(java.lang.String)>
<java.text.MessageFormat: void append(java.lang.StringBuffer,java.text.CharacterIterator)>
<sun.awt.image.SunVolatileImage: java.awt.GraphicsConfiguration getGraphicsConfig()>
<sun.reflect.UnsafeDoubleFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<sun.java2d.SunGraphics2D: void setDevClip(java.awt.Rectangle)>
<java.util.ResourceBundle$CacheKey: java.util.Locale getLocale()>
<javax.swing.JComponent: void putClientProperty(java.lang.Object,java.lang.Object)>
<java.util.logging.Logger: java.lang.String getName()>
<java.awt.Component: java.awt.Color getForeground()>
<java.awt.AWTEvent: boolean isConsumed()>
<java.awt.Component: java.awt.GraphicsConfiguration getGraphicsConfiguration()>
<java.io.InputStream: void close()>
<java.awt.Frame: void <init>()>
<java.lang.System: void exit(int)>
<javax.swing.UIDefaults: void getUIError(java.lang.String)>
<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>
<java.lang.ThreadLocal$ThreadLocalMap: int nextIndex(int,int)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: boolean compareAndSetWaitStatus(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node,int,int)>
<javax.swing.JPopupMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>
<javax.swing.JRootPane: java.awt.LayoutManager createRootLayout()>
<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>()>
<java.io.File: void deleteOnExit()>
<javax.swing.JComponent: javax.swing.border.Border getBorder()>
<javax.swing.JComponent: void paint(java.awt.Graphics)>
<java.io.File: void <init>(java.lang.String,java.io.File)>
<java.util.logging.LogRecord: void setResourceBundleName(java.lang.String)>
<java.util.TimeZone: int getOffset(long)>
<java.util.regex.Pattern$CharProperty: void <init>()>
<java.util.ResourceBundle$CacheKey: java.lang.String getFormat()>
<sun.awt.image.ByteComponentRaster: int getScanlineStride()>
<java.security.PrivilegedActionException: java.lang.Throwable getCause()>
<java.text.DecimalFormatSymbols: void <init>(java.util.Locale)>
<java.text.ChoiceFormat: double nextDouble(double)>
<java.util.Formatter: void checkText(java.lang.String)>
<javax.swing.JComponent: void setCreatedDoubleBuffer(boolean)>
<sun.security.x509.X509CertImpl: byte[] getEncodedInternal()>
<java.awt.LightweightDispatcher: void dispose()>
<javax.swing.JComponent: boolean rectangleIsObscured(int,int,int,int)>
<sun.reflect.ClassFileAssembler: void emitConstantPoolInterfaceMethodref(short,short)>
<java.text.DecimalFormat: void setDecimalSeparatorAlwaysShown(boolean)>
<java.lang.String: boolean endsWith(java.lang.String)>
<javax.swing.JScrollPane: void setViewport(javax.swing.JViewport)>
<java.util.Date: sun.util.calendar.BaseCalendar$Date normalize(sun.util.calendar.BaseCalendar$Date)>
<java.nio.charset.Charset: java.nio.charset.Charset lookupViaProviders(java.lang.String)>
<java.awt.Component: void mixOnReshaping()>
<java.awt.Component: boolean isFocusOwner()>
<sun.awt.image.IntegerComponentRaster: int[] getDataStorage()>
<java.lang.reflect.Field: sun.reflect.FieldAccessor acquireFieldAccessor(boolean)>
<java.awt.dnd.DropTarget: void <init>(java.awt.Component,int,java.awt.dnd.DropTargetListener)>
<sun.reflect.Reflection: java.lang.reflect.Method[] filterMethods(java.lang.Class,java.lang.reflect.Method[])>
<java.awt.EventQueue: void postEventPrivate(java.awt.AWTEvent)>
<javax.swing.JFrame: javax.swing.JRootPane getRootPane()>
<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>
<java.awt.image.ComponentSampleModel: int[] getBandOffsets()>
<java.awt.Component: java.awt.Rectangle getBounds()>
<java.nio.Buffer: java.nio.Buffer limit(int)>
<java.lang.Character: boolean isValidCodePoint(int)>
<javax.swing.DebugGraphics: void <init>(java.awt.Graphics)>
<javax.swing.text.AbstractDocument$DefaultDocumentEvent: int getOffset()>
<sun.util.calendar.LocalGregorianCalendar: sun.util.calendar.LocalGregorianCalendar$Date newCalendarDate(java.util.TimeZone)>
<sun.java2d.pipe.Region: sun.java2d.pipe.Region getIntersection(java.awt.Rectangle)>
<java.awt.Component: void processFocusEvent(java.awt.event.FocusEvent)>
<javax.swing.JComponent: java.lang.Object getClientProperty(java.lang.Object)>
<java.net.NetworkInterface: java.net.InetAddress[] access$000(java.net.NetworkInterface)>
<java.util.ArrayList: java.util.Iterator iterator()>
<sun.font.AttributeValues: boolean equals(sun.font.AttributeValues)>
<sun.awt.datatransfer.DataTransferer$1: void <init>(java.lang.String)>
<java.lang.Character: int toCodePoint(char,char)>
<javax.swing.text.JTextComponent: void <init>()>
<java.security.AccessControlContext: java.security.AccessControlContext optimize()>
<java.util.Arrays: java.lang.Object[] copyOf(java.lang.Object[],int,java.lang.Class)>
<sun.nio.cs.StreamEncoder: void writeBytes()>
<sun.reflect.ClassFileAssembler: void opc_ifeq(sun.reflect.Label)>
<javax.swing.text.AbstractDocument$BranchElement: javax.swing.text.Element getElement(int)>
<java.awt.Component: void repaint(long,int,int,int,int)>
<sun.reflect.UnsafeQualifiedBooleanFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setZone(java.util.TimeZone)>
<sun.java2d.SurfaceData: void <init>(sun.java2d.loops.SurfaceType,java.awt.image.ColorModel)>
<java.awt.Component: boolean isRecursivelyVisible()>
<java.util.Formatter: void <init>()>
<sun.reflect.ClassFileAssembler: void opc_ifnull(sun.reflect.Label)>
<java.util.Calendar: boolean isLenient()>
<javax.swing.JComponent: void setAutoscrolls(boolean)>
<sun.awt.util.IdentityArrayList: void fastRemove(int)>
<javax.swing.JComponent: void setTransferHandler(javax.swing.TransferHandler)>
<java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
<java.awt.Container: java.awt.LayoutManager getLayout()>
<java.util.regex.Matcher: java.lang.String quoteReplacement(java.lang.String)>
<java.awt.Component: boolean isMaximumSizeSet()>
<java.lang.reflect.Constructor: sun.reflect.ConstructorAccessor getConstructorAccessor()>
<javax.swing.JRadioButton: void <init>(java.lang.String,javax.swing.Icon,boolean)>
<java.util.concurrent.ConcurrentHashMap$Segment: java.lang.Object put(java.lang.Object,int,java.lang.Object,boolean)>
<java.security.AccessControlException: void <init>(java.lang.String,java.security.Permission)>
<sun.java2d.pipe.Region: sun.java2d.pipe.SpanIterator getSpanIterator()>
<sun.reflect.UnsafeFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<java.text.SimpleDateFormat: void parseAmbiguousDatesAsAfter(java.util.Date)>
<javax.swing.JScrollBar: void setUI(javax.swing.plaf.ScrollBarUI)>
<java.awt.event.PaintEvent: void <init>(java.awt.Component,int,java.awt.Rectangle)>
<sun.reflect.ClassFileAssembler: void opc_invokestatic(short,int,int)>
<java.util.regex.Pattern$LastMatch: void <init>()>
<java.util.ResourceBundle$Control$1: void <init>(java.util.ResourceBundle$Control,boolean,java.lang.ClassLoader,java.lang.String)>
<java.awt.GraphicsEnvironment$1: void <init>()>
<java.awt.event.ActionEvent: java.lang.String getActionCommand()>
<java.awt.MenuItem: void addNotify()>
<java.awt.GraphicsDevice: void setFullScreenWindow(java.awt.Window)>
<java.awt.event.WindowEvent: void <init>(java.awt.Window,int,java.awt.Window,int,int)>
<java.net.SocketPermission: int[] parsePort(java.lang.String)>
<java.security.ProtectionDomain: java.security.PermissionCollection getPermissions()>
<sun.java2d.pipe.Region: int dimAdd(int,int)>
<java.awt.Container: void setLayout(java.awt.LayoutManager)>
<sun.java2d.x11.X11VolatileSurfaceManager: void <init>(sun.awt.image.SunVolatileImage,java.lang.Object)>
<java.awt.GraphicsConfiguration: java.awt.image.BufferedImage createCompatibleImage(int,int,int)>
<java.lang.Integer: java.lang.String toHexString(int)>
<java.lang.Character: char forDigit(int,int)>
<javax.swing.text.AbstractDocument$AbstractElement: void addAttribute(java.lang.Object,java.lang.Object)>
<sun.java2d.pipe.Region: sun.java2d.pipe.Region getSafeTranslatedRegion(int,int)>
<java.lang.Character: boolean isDigit(int)>
<java.awt.Event: int getOldEventKey(java.awt.event.KeyEvent)>
<java.lang.Double: boolean isNaN(double)>
<java.util.Formatter$FormatSpecifier: void checkGeneral()>
<java.awt.Component: void processMouseEvent(java.awt.event.MouseEvent)>
<java.awt.Graphics2D: void <init>()>
<java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)>
<java.lang.Long: java.lang.Long valueOf(long)>
<java.awt.Toolkit: java.awt.peer.LightweightPeer createComponent(java.awt.Component)>
<java.awt.AWTEventMulticaster: java.awt.event.MouseMotionListener remove(java.awt.event.MouseMotionListener,java.awt.event.MouseMotionListener)>
<java.util.Formatter$FormatSpecifier: char conversion(java.lang.String)>
<java.util.concurrent.locks.ReentrantLock: void <init>()>
<java.awt.Dimension: void <init>(java.awt.Dimension)>
<java.lang.ThreadLocal: java.lang.Object childValue(java.lang.Object)>
<sun.util.calendar.AbstractCalendar: long getTimeOfDayValue(sun.util.calendar.CalendarDate)>
<java.awt.Rectangle: void setBounds(int,int,int,int)>
<java.text.FieldPosition: java.text.Format$Field getFieldAttribute()>
<java.io.ByteArrayOutputStream: void <init>()>
<sun.awt.image.SunVolatileImage: int getHeight()>
<javax.swing.RepaintManager: javax.swing.RepaintManager currentManager(javax.swing.JComponent)>
<java.lang.CharacterData: java.lang.CharacterData of(int)>
<sun.reflect.ClassFileAssembler: void <init>(sun.reflect.ByteVector)>
<java.awt.AWTKeyStroke: java.lang.Class getAWTKeyStrokeClass()>
<java.awt.Component: java.awt.Toolkit getToolkit()>
<java.lang.Long: long parseLong(java.lang.String,int)>
<java.util.concurrent.locks.ReentrantLock$NonfairSync: void <init>()>
<java.util.concurrent.atomic.AtomicLong: boolean compareAndSet(long,long)>
<java.util.concurrent.ConcurrentHashMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>
<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>
<java.awt.geom.Point2D$Float: void <init>()>
<javax.swing.text.StateInvariantError: void <init>(java.lang.String)>
<java.util.regex.Pattern$TreeInfo: void <init>()>
<sun.awt.SunToolkit: java.awt.Window getContainingWindow(java.awt.Component)>
<java.security.Permissions: void add(java.security.Permission)>
<java.awt.Component: void enable(boolean)>
<java.util.regex.Pattern$Begin: void <init>()>
<sun.security.provider.PolicyFile: void initStaticPolicy(sun.security.provider.PolicyFile$PolicyInfo)>
<java.awt.KeyboardFocusManager: void setGlobalCurrentFocusCycleRoot(java.awt.Container)>
<java.lang.Throwable: void <init>(java.lang.Throwable)>
<java.util.regex.Pattern$8: void <init>(java.util.regex.Pattern$CharProperty,java.util.regex.Pattern$CharProperty)>
<java.lang.StringCoding: int scale(int,float)>
<java.util.logging.Logger: boolean getUseParentHandlers()>
<javax.swing.JComponent: java.util.Locale getDefaultLocale()>
<javax.swing.JScrollPane: void setVerticalScrollBarPolicy(int)>
<java.util.HashMap: void resize(int)>
<sun.awt.image.VolatileSurfaceManager: void <init>(sun.awt.image.SunVolatileImage,java.lang.Object)>
<java.beans.PropertyChangeSupport: void removePropertyChangeListener(java.beans.PropertyChangeListener)>
<java.awt.Component: void notifyNewBounds(boolean,boolean)>
<javax.swing.ArrayTable: int size()>
<java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
<sun.misc.Launcher$1: void <init>(java.lang.String)>
<java.lang.ref.PhantomReference: void <init>(java.lang.Object,java.lang.ref.ReferenceQueue)>
<java.awt.Window: boolean isShowing()>
<java.util.MissingResourceException: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<sun.reflect.ClassFileAssembler: void opc_dup()>
<java.util.EmptyStackException: void <init>()>
<java.util.ResourceBundle: java.lang.String[] getStringArray(java.lang.String)>
<sun.awt.image.ShortComponentRaster: int getScanlineStride()>
<sun.awt.dnd.SunDropTargetContextPeer$EventDispatcher: void dispatchEvent(sun.awt.dnd.SunDropTargetEvent)>
<sun.misc.FDBigInt: void multaddMe(int,int)>
<java.lang.String: void <init>(char[],int,int)>
<java.io.BufferedInputStream: void close()>
<sun.reflect.ClassFileAssembler: void opc_aload_3()>
<java.util.ArrayList: void <init>()>
<sun.misc.Launcher: java.lang.ClassLoader getClassLoader()>
<java.text.DateFormatSymbols: void initializeData(java.util.Locale)>
<java.lang.RuntimeException: void <init>(java.lang.String)>
<java.util.concurrent.atomic.AtomicReference: void set(java.lang.Object)>
<java.awt.Window: java.awt.Window getOwner_NoClientCode()>
<sun.reflect.MethodAccessorImpl: void <init>()>
<java.awt.event.MouseEvent: void setOldModifiers()>
<java.awt.event.MouseAdapter: void <init>()>
<java.io.DataInputStream: long readLong()>
<java.net.URL: void checkSpecifyHandler(java.lang.SecurityManager)>
<java.util.Arrays: char[] copyOfRange(char[],int,int)>
<javax.swing.AbstractButton: void setText(java.lang.String)>
<javax.swing.text.DocumentFilter: void replace(javax.swing.text.DocumentFilter$FilterBypass,int,int,java.lang.String,javax.swing.text.AttributeSet)>
<sun.awt.image.ShortComponentRaster: int getDataOffset(int)>
<sun.font.AttributeValues: java.awt.geom.AffineTransform extractRotation(java.awt.geom.Point2D$Double,java.awt.geom.AffineTransform,boolean)>
<javax.swing.text.AbstractDocument$DefaultDocumentEvent: boolean addEdit(javax.swing.undo.UndoableEdit)>
<java.util.regex.ASCII: int toDigit(int)>
<java.util.Properties: void <init>(java.util.Properties)>
<java.lang.String: boolean equals(java.lang.Object)>
<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>
<java.net.Inet6Address: int getScopeId()>
<java.io.Writer: void write(java.lang.String,int,int)>
<java.io.EOFException: void <init>(java.lang.String)>
<sun.awt.KeyboardFocusManagerPeerImpl: void <init>(java.awt.KeyboardFocusManager)>
<java.util.concurrent.locks.ReentrantReadWriteLock: void <init>(boolean)>
<java.awt.Window: void <init>()>
<javax.swing.text.StyleContext: javax.swing.text.AttributeSet getImmutableUniqueSet()>
<javax.swing.text.StyleContext$NamedStyle: void setName(java.lang.String)>
<java.awt.Component: boolean postEvent(java.awt.Event)>
<java.util.regex.Pattern$Curly: void <init>(java.util.regex.Pattern$Node,int,int,int)>
<java.awt.Component: void firePropertyChange(java.lang.String,boolean,boolean)>
<javax.swing.JScrollPane: javax.swing.JViewport getColumnHeader()>
<java.awt.EventQueue$1AWTInvocationLock: void <init>()>
<java.util.HashMap: java.util.Set keySet()>
<java.text.Normalizer: java.lang.String normalize(java.lang.CharSequence,java.text.Normalizer$Form)>
<java.awt.Window$1DisposeAction: void <init>(java.awt.Window)>
<java.util.Arrays: java.util.List asList(java.lang.Object[])>
<java.awt.Component: boolean isCoalescingEnabled()>
<java.util.regex.Pattern: int next()>
<java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock: void <init>(java.util.concurrent.locks.ReentrantReadWriteLock)>
<javax.swing.UIManager: void initializeSystemDefaults(java.util.Properties)>
<java.awt.geom.Dimension2D: void <init>()>
<java.text.BreakDictionary: void readDictionaryFile(java.lang.String)>
<javax.swing.AbstractButton: void setModel(javax.swing.ButtonModel)>
<java.lang.reflect.Field: java.lang.String getName()>
<sun.java2d.loops.RenderLoops: void <init>()>
<java.awt.dnd.DropTarget: void setDefaultActions(int)>
<java.lang.ref.ReferenceQueue: java.lang.ref.Reference reallyPoll()>
<javax.swing.UIManager$3: void <init>()>
<sun.awt.dnd.SunDropTargetContextPeer: int access$000(sun.awt.dnd.SunDropTargetContextPeer)>
<java.io.File: java.io.File generateFile(java.lang.String,java.lang.String,java.io.File)>
<java.util.logging.Logger: java.lang.ClassLoader getCallersClassLoader()>
<java.text.Format: java.text.AttributedCharacterIterator formatToCharacterIterator(java.lang.Object)>
<javax.swing.DefaultButtonModel: void fireStateChanged()>
<java.util.regex.Pattern$Bound: void <init>(int)>
<javax.swing.JViewport$ViewListener: void <init>(javax.swing.JViewport)>
<java.lang.String: int codePointBefore(int)>
<java.awt.Container: boolean hasHeavyweightDescendants()>
<java.util.WeakHashMap: java.lang.Object maskNull(java.lang.Object)>
<javax.swing.JViewport: void blitDoubleBuffered(javax.swing.JComponent,java.awt.Graphics,int,int,int,int,int,int,int,int,int,int)>
<java.lang.Long: int stringSize(long)>
<java.io.Reader: void <init>()>
<java.io.PrintWriter: void <init>(java.io.OutputStream)>
<java.lang.Integer: java.lang.String toString(int,int)>
<java.awt.Window: void setLocationRelativeTo(java.awt.Component)>
<java.lang.Character: boolean isUpperCase(int)>
<java.awt.Component: java.awt.Point getLocationOnScreen_NoTreeLock()>
<java.util.BitSet: int wordIndex(int)>
<java.util.TimeZone: java.util.TimeZone getTimeZone(java.lang.String,boolean)>
<java.lang.SystemClassLoaderAction: void <init>(java.lang.ClassLoader)>
<java.text.DecimalFormat: void setMaximumFractionDigits(int)>
<sun.java2d.loops.CompositeType: int getUniqueID()>
<sun.util.calendar.ZoneInfo: void <init>(java.lang.String,int,int,int,long[],int[],int[],boolean)>
<java.util.StringTokenizer: boolean hasMoreTokens()>
<sun.font.AttributeValues: void setSize(float)>
<java.text.DigitList: void <init>()>
<javax.swing.text.AbstractDocument: javax.swing.text.Element createBranchElement(javax.swing.text.Element,javax.swing.text.AttributeSet)>
<sun.awt.image.ShortComponentRaster: short[] getDataStorage()>
<javax.swing.JComponent: int getWidth()>
<sun.util.calendar.AbstractCalendar: sun.util.calendar.CalendarDate getNthDayOfWeek(int,int,sun.util.calendar.CalendarDate)>
<java.lang.StringCoding$StringDecoder: java.lang.String requestedCharsetName()>
<java.util.regex.Pattern$UnixDot: void <init>()>
<java.awt.AWTEventMulticaster: java.util.EventListener remove(java.util.EventListener)>
<java.io.DataOutputStream: void writeInt(int)>
<java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
<sun.reflect.UnsafeStaticLongFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<javax.swing.JTextArea: void <init>(javax.swing.text.Document,java.lang.String,int,int)>
<java.util.Calendar: java.util.Calendar getInstance(java.util.TimeZone,java.util.Locale)>
<java.util.PriorityQueue: void siftUpComparable(int,java.lang.Object)>
<javax.swing.JMenuItem: void setAccelerator(javax.swing.KeyStroke)>
<javax.swing.undo.CompoundEdit: void end()>
<java.lang.Integer: int parseInt(java.lang.String)>
<java.lang.Object: java.lang.String toString()>
<java.util.Formatter$Flags: void <init>(int)>
<java.util.regex.Pattern$SingleS: void <init>(int)>
<java.util.regex.Pattern$Single: void <init>(int)>
<javax.swing.UIManager: javax.swing.plaf.ComponentUI getUI(javax.swing.JComponent)>
<sun.awt.MostRecentKeyValue: void <init>(java.lang.Object,java.lang.Object)>
<java.awt.Component: java.awt.Point location()>
<java.util.AbstractList: java.util.ListIterator listIterator()>
<sun.util.calendar.ZoneInfo: int getOffsetsByWall(long,int[])>
<javax.swing.JTextField: void setDocument(javax.swing.text.Document)>
<java.net.Inet6Address: boolean differentLocalAddressTypes(byte[],byte[])>
<javax.swing.JScrollPane$AccessibleJScrollPane: void resetViewPort()>
<java.awt.Container: java.util.Set getFocusTraversalKeys(int)>
<javax.swing.LookAndFeel: void uninitialize()>
<sun.security.util.Debug: void <init>()>
<java.io.PrintWriter: void <init>(java.io.Writer,boolean)>
<java.awt.Container: void remove(java.awt.Component)>
<javax.swing.text.GapVector: int getNewArraySize(int)>
<sun.util.LocaleServiceProviderPool: java.lang.Object getLocalizedObject(sun.util.LocaleServiceProviderPool$LocalizedObjectGetter,java.util.Locale,sun.util.resources.OpenListResourceBundle,java.lang.String,java.lang.Object[])>
<sun.reflect.UnsafeBooleanFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<java.awt.Container: java.awt.Dimension getPreferredSize()>
<java.util.regex.Pattern$Dot: void <init>()>
<java.awt.image.ColorModel: boolean hasAlpha()>
<java.lang.RuntimeException: void <init>()>
<sun.reflect.BootstrapConstructorAccessorImpl: void <init>(java.lang.reflect.Constructor)>
<java.awt.GraphicsCallback$PeerPrintCallback: java.awt.GraphicsCallback$PeerPrintCallback getInstance()>
<java.awt.Toolkit$2: void <init>()>
<java.util.concurrent.locks.ReentrantLock: java.util.concurrent.locks.Condition newCondition()>
<javax.swing.text.AbstractDocument: java.lang.Object getProperty(java.lang.Object)>
<java.util.regex.Pattern: boolean findSupplementary(int,int)>
<javax.swing.KeyStroke: javax.swing.KeyStroke getKeyStroke(int,int)>
<sun.reflect.ByteVectorImpl: void <init>(int)>
<java.awt.Component: int countHierarchyMembers()>
<java.lang.StringBuffer: void <init>()>
<java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale,java.lang.ClassLoader)>
<java.text.DecimalFormatSymbols: char getPerMill()>
<sun.java2d.SunGraphics2D: void setDevClip(int,int,int,int)>
<java.util.regex.Matcher: boolean search(int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(long)>
<java.util.regex.ASCII: int getType(int)>
<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
<java.util.regex.Pattern: int parsePastLine()>
<sun.java2d.loops.DrawGlyphList: sun.java2d.loops.DrawGlyphList locate(sun.java2d.loops.SurfaceType,sun.java2d.loops.CompositeType,sun.java2d.loops.SurfaceType)>
<javax.swing.JComponent: java.awt.Graphics getComponentGraphics(java.awt.Graphics)>
<java.util.regex.Matcher: java.lang.CharSequence getSubSequence(int,int)>
<sun.reflect.AccessorGenerator: java.lang.String internalize(java.lang.String)>
<sun.awt.AWTAccessor: sun.awt.AWTAccessor$ComponentAccessor getComponentAccessor()>
<java.util.HashMap$Entry: void <init>(int,java.lang.Object,java.lang.Object,java.util.HashMap$Entry)>
<java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
<javax.swing.JToggleButton$ToggleButtonModel: void <init>()>
<java.awt.Component: void <init>()>
<sun.awt.image.VSyncedBSManager: void <init>()>
<java.nio.channels.spi.AbstractInterruptibleChannel: void close()>
<java.nio.charset.CharsetEncoder: void implOnUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<java.awt.Window: java.awt.Toolkit getToolkit()>
<java.lang.String: java.lang.String toLowerCase()>
<javax.swing.JRadioButton: void <init>()>
<java.awt.Component: boolean lostFocus(java.awt.Event,java.lang.Object)>
<java.awt.dnd.InvalidDnDOperationException: void <init>()>
<java.nio.charset.CharsetDecoder: java.nio.charset.CharsetDecoder onUnmappableCharacter(java.nio.charset.CodingErrorAction)>
<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
<javax.swing.event.MouseInputAdapter: void <init>()>
<javax.swing.TransferHandler: java.awt.dnd.DropTargetListener access$200()>
<java.lang.ThreadLocal$ThreadLocalMap: void <init>(java.lang.ThreadLocal$ThreadLocalMap)>
<java.util.Formatter$FixedString: void <init>(java.util.Formatter,java.lang.String)>
<javax.swing.text.AbstractDocument: void <init>(javax.swing.text.AbstractDocument$Content,javax.swing.text.AbstractDocument$AttributeContext)>
<java.util.Arrays: int binarySearch(java.lang.Object[],java.lang.Object,java.util.Comparator)>
<java.nio.HeapCharBuffer: void <init>(char[],int,int)>
<java.awt.Container: void add(java.awt.Component,java.lang.Object)>
<javax.swing.JComboBox: void setModel(javax.swing.ComboBoxModel)>
<javax.swing.JViewport: void addChangeListener(javax.swing.event.ChangeListener)>
<javax.swing.RepaintManager: void setPaintManager(javax.swing.RepaintManager$PaintManager)>
<java.net.SocketPermission: java.lang.String getHost(java.lang.String)>
<java.awt.Component: void updateCursorImmediately()>
<javax.swing.JScrollPane: void setUI(javax.swing.plaf.ScrollPaneUI)>
<java.util.concurrent.locks.ReentrantReadWriteLock$NonfairSync: void <init>()>
<javax.swing.text.JTextComponent: javax.swing.text.Document getDocument()>
<sun.java2d.x11.X11Renderer: void <init>()>
<java.awt.Component: void print(java.awt.Graphics)>
<java.io.File: java.lang.String getParent()>
<java.security.PermissionsHash: void <init>()>
<java.awt.KeyboardFocusManager: java.awt.KeyboardFocusManager getCurrentKeyboardFocusManager()>
<java.security.Permission: java.lang.String getName()>
<sun.reflect.Reflection: boolean isSameClassPackage(java.lang.ClassLoader,java.lang.String,java.lang.ClassLoader,java.lang.String)>
<java.awt.Container: void recursiveSubtractAndApplyShape(sun.java2d.pipe.Region,int)>
<java.util.Formatter$Flags: java.lang.String toString()>
<sun.reflect.ReflectionFactory$GetReflectionFactoryAction: void <init>()>
<javax.swing.JComponent: void setDefaultLocale(java.util.Locale)>
<java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>
<java.lang.ConditionalSpecialCasing: boolean isFinalCased(java.lang.String,int,java.util.Locale)>
<java.util.concurrent.locks.AbstractQueuedSynchronizer: void unparkSuccessor(java.util.concurrent.locks.AbstractQueuedSynchronizer$Node)>
<java.net.Inet6Address: void <init>(java.lang.String,byte[])>
<javax.swing.AbstractButton: void setRolloverEnabled(boolean)>
<sun.awt.util.IdentityArrayList: void ensureCapacity(int)>
<java.awt.Frame: void <init>(java.lang.String)>
<sun.awt.image.VolatileSurfaceManager: void initialize()>
<java.util.HashMap: java.lang.Object putForNullKey(java.lang.Object)>
<javax.swing.JComponent: void setOpaque(boolean)>
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
<java.awt.event.ComponentAdapter: void <init>()>
<javax.swing.text.GapVector: void shiftGap(int)>
<java.lang.ClassLoader: void checkClassLoaderPermission(java.lang.ClassLoader,java.lang.Class)>
<java.lang.StringCoding: char[] decode(java.lang.String,byte[],int,int)>
<java.lang.SecurityManager: void checkSystemClipboardAccess()>
<java.awt.Component: void firePropertyChange(java.lang.String,int,int)>
<java.util.logging.Level: java.lang.String access$000(java.util.logging.Level)>
<sun.awt.util.IdentityArrayList: boolean contains(java.lang.Object)>
<sun.reflect.UnsafeByteFieldAccessorImpl: void <init>(java.lang.reflect.Field)>
<java.io.OutputStream: void flush()>
<java.text.AttributedString: int length()>
<sun.util.calendar.BaseCalendar: void <init>()>
<java.awt.Component: void clearCurrentFocusCycleRootOnHide()>
<java.awt.Component: sun.java2d.pipe.Region getNormalShape()>
<sun.util.calendar.CalendarDate: sun.util.calendar.CalendarDate setTimeOfDay(int,int,int,int)>
<sun.awt.image.VSyncedBSManager$SingleVSyncedBSMgr: void <init>()>
<javax.swing.JComponent: void paintChildren(java.awt.Graphics)>
<javax.swing.ToolTipManager$outsideTimerAction: void <init>(javax.swing.ToolTipManager)>
<java.lang.Character: int toUpperCaseEx(int)>
<javax.swing.text.StyleContext$NamedStyle: void <init>(javax.swing.text.StyleContext,java.lang.String,javax.swing.text.Style)>
<java.lang.reflect.Modifier: boolean isFinal(int)>
<java.awt.event.FocusEvent: boolean isTemporary()>
<java.awt.EventQueue: void initDispatchThread()>
<javax.swing.JComponent: void setDoubleBuffered(boolean)>
<java.awt.geom.AffineTransform: void setToRotation(double,double)>
<java.awt.Component: java.lang.Object getTreeLock()>
<javax.swing.JViewport: void paintView(java.awt.Graphics)>
<java.lang.reflect.Constructor: java.lang.Class[] getExceptionTypes()>
<sun.misc.FpUtils: double rawCopySign(double,double)>
<java.util.regex.Pattern$LazyLoop: void <init>(int,int)>
<java.lang.ClassLoader: java.net.URL getBootstrapResource(java.lang.String)>
<java.util.FormatterClosedException: void <init>()>
<javax.swing.JInternalFrame: java.awt.Container getContentPane()>
<java.security.BasicPermission: void <init>(java.lang.String)>
<java.text.RuleBasedBreakIterator: void setAdditionalData(byte[])>
<java.util.logging.Logger: void log(java.util.logging.LogRecord)>
<java.text.DateFormatSymbols$DateFormatSymbolsGetter: java.text.DateFormatSymbols$DateFormatSymbolsGetter access$000()>
<java.util.regex.Pattern$CharProperty: java.util.regex.Pattern$CharProperty complement()>
<java.lang.ConditionalSpecialCasing$Entry: java.lang.String getLanguage()>
<sun.awt.image.SunVolatileImage: void <init>(java.awt.GraphicsConfiguration,int,int,int,java.awt.ImageCapabilities)>
<java.util.Calendar: void setWeekCountData(java.util.Locale)>
<sun.reflect.UnsafeQualifiedLongFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<java.net.InetAddress$InetAddressHolder: void <init>()>
<sun.reflect.InstantiationExceptionConstructorAccessorImpl: void <init>(java.lang.String)>
<javax.swing.JPasswordField: boolean customSetUIProperty(java.lang.String,java.lang.Object)>
<java.lang.Runtime: void exit(int)>
<sun.reflect.ReflectionFactory: java.lang.reflect.Method copyMethod(java.lang.reflect.Method)>
<java.util.logging.Level: int intValue()>
<sun.awt.image.BytePackedRaster: byte[] getDataStorage()>
<java.lang.Float: void <init>(float)>
<java.text.BreakDictionary$1: void <init>(java.text.BreakDictionary,java.lang.String)>
<javax.swing.UIManager$LAFState: void <init>(javax.swing.UIManager$1)>
<java.awt.event.KeyEvent: char getKeyChar()>
<javax.swing.JComponent: void printChildren(java.awt.Graphics)>
<java.util.GregorianCalendar: void <init>(java.util.TimeZone,java.util.Locale)>
<java.util.ResourceBundle$Control: long getTimeToLive(java.lang.String,java.util.Locale)>
<java.awt.Container: void setFocusTraversalPolicy(java.awt.FocusTraversalPolicy)>
<javax.swing.JComponent: void firePropertyChange(java.lang.String,boolean,boolean)>
<java.lang.Math: int max(int,int)>
<sun.text.normalizer.UTF16: char getLeadSurrogate(int)>
<java.lang.ThreadGroup: void add(java.lang.Thread)>
<java.awt.Window: void setVisible(boolean)>
<javax.swing.JRootPane$1: void <init>(javax.swing.JRootPane)>
<javax.swing.UIManager: java.lang.String makeInstalledLAFKey(java.lang.String,java.lang.String)>
<java.util.Hashtable: java.util.Enumeration getEnumeration(int)>
<java.util.ArrayList$SubList: void <init>(java.util.ArrayList,java.util.AbstractList,int,int,int)>
<sun.java2d.pipe.ShapeSpanIterator: void <init>(boolean)>
<sun.java2d.SunGraphicsEnvironment: java.awt.Rectangle getUsableBounds(java.awt.GraphicsDevice)>
<java.awt.Toolkit: void loadAssistiveTechnologies()>
<javax.swing.text.AbstractDocument$BranchElement: int getEndOffset()>
<java.util.logging.LogManager: void doSetParent(java.util.logging.Logger,java.util.logging.Logger)>
<javax.swing.RepaintManager$PaintManager: java.awt.Image getValidImage(java.awt.Image)>
<java.text.NumberFormat: java.lang.Object clone()>
<java.lang.InstantiationException: void <init>(java.lang.String)>
<java.awt.Dimension: void <init>(int,int)>
<sun.awt.im.InputMethodLocator: java.util.Locale getLocale()>
<javax.swing.JFrame: boolean isDefaultLookAndFeelDecorated()>
<java.lang.Class: java.lang.reflect.Field getField(java.lang.String)>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder append(int)>
<sun.util.calendar.CalendarDate: boolean isNormalized()>
<java.awt.Window: void removeNotify()>
<javax.swing.JScrollBar$ModelListener: void <init>(javax.swing.JScrollBar,javax.swing.JScrollBar$1)>
<java.util.concurrent.ConcurrentHashMap: void setEntryAt(java.util.concurrent.ConcurrentHashMap$HashEntry[],int,java.util.concurrent.ConcurrentHashMap$HashEntry)>
<java.util.SimpleTimeZone: boolean inDaylightTime(java.util.Date)>
<java.lang.Math: float abs(float)>
<java.util.LinkedList: boolean add(java.lang.Object)>
<java.util.StringTokenizer: int countTokens()>
<java.util.concurrent.locks.AbstractOwnableSynchronizer: java.lang.Thread getExclusiveOwnerThread()>
<java.lang.Integer: void <init>(int)>
<javax.swing.JMenu: javax.swing.JMenuItem add(javax.swing.JMenuItem)>
<java.awt.EventQueue: void removeSourceEvents(java.lang.Object,boolean)>
<java.awt.KeyboardFocusManager: java.awt.Window markClearGlobalFocusOwner()>
<java.lang.Math: int abs(int)>
<java.io.FileOutputStream: void <init>(java.io.File)>
<java.lang.Class: java.lang.Object[] getEnumConstantsShared()>
<sun.util.calendar.ZoneInfo: int getOffsets(long,int[])>
<sun.util.calendar.LocalGregorianCalendar$Date: void <init>(java.util.TimeZone)>
<java.text.SimpleDateFormat: void <init>(java.lang.String)>
<sun.reflect.UnsafeQualifiedStaticByteFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<javax.swing.text.StyleConstants: int getBidiLevel(javax.swing.text.AttributeSet)>
<java.awt.Component: void removePropertyChangeListener(java.beans.PropertyChangeListener)>
<java.lang.AssertionError: void <init>(java.lang.String)>
<sun.reflect.ByteVectorFactory: sun.reflect.ByteVector create()>
<java.lang.ref.ReferenceQueue: void <init>()>
<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object,int,int)>
<java.awt.Rectangle: void reshape(int,int,int,int)>
<java.awt.KeyboardFocusManager: boolean removeFirstRequest()>
<java.util.ResourceBundle: boolean isValidBundle(java.util.ResourceBundle)>
<sun.java2d.pipe.Region: sun.java2d.pipe.Region getIntersectionXYXY(int,int,int,int)>
<java.util.regex.Pattern: java.util.regex.PatternSyntaxException error(java.lang.String)>
<javax.swing.JComponent: java.awt.Graphics safelyGetGraphics(java.awt.Component)>
<java.awt.Rectangle: void <init>(int,int,int,int)>
<java.awt.geom.Rectangle2D: boolean intersects(double,double,double,double)>
<javax.swing.JComponent: int getObscuredState(int,int,int,int,int)>
<java.util.ArrayList: void <init>(int)>
<java.security.UnresolvedPermission: java.security.Permission resolve(java.security.Permission,java.security.cert.Certificate[])>
<java.awt.KeyboardFocusManager: boolean focusedWindowChanged(java.awt.Component,java.awt.Component)>
<java.util.regex.Pattern: java.lang.String[] producePermutations(java.lang.String)>
<javax.swing.AbstractButton: void doClick(int)>
<java.util.logging.LogManager$LoggerContext: void removeLogger(java.lang.String)>
<java.nio.charset.CoderResult$Cache: java.nio.charset.CoderResult access$200(java.nio.charset.CoderResult$Cache,int)>
<javax.swing.UIManager: void initializeInstalledLAFs(java.util.Properties)>
<javax.swing.JMenu: javax.swing.JMenu$WinListener createWinListener(javax.swing.JPopupMenu)>
<sun.misc.FDBigInt: void <init>(long)>
<sun.awt.image.SunVolatileImage: void <init>(java.awt.Component,java.awt.GraphicsConfiguration,int,int,java.lang.Object,int,java.awt.ImageCapabilities,int)>
<sun.java2d.loops.DrawGlyphListLCD: sun.java2d.loops.DrawGlyphListLCD locate(sun.java2d.loops.SurfaceType,sun.java2d.loops.CompositeType,sun.java2d.loops.SurfaceType)>
<java.io.PrintWriter: void println(java.lang.String)>
<java.util.regex.Pattern$7: void <init>(java.util.regex.Pattern$CharProperty,java.util.regex.Pattern$CharProperty)>
<sun.reflect.ClassFileAssembler: short getMaxLocals()>
<java.lang.reflect.Modifier: boolean isPublic(int)>
<java.security.Policy: boolean isSet()>
<java.awt.KeyboardFocusManager: void checkKFMSecurity()>
<java.lang.reflect.Field: void checkAccess(java.lang.Class,java.lang.Class,java.lang.Object,int)>
<java.util.IllegalFormatWidthException: void <init>(int)>
<javax.swing.JViewport: void updateUI()>
<javax.swing.RepaintManager$ProcessingRunnable: void <init>(javax.swing.RepaintManager,javax.swing.RepaintManager$1)>
<java.nio.charset.Charset: void checkName(java.lang.String)>
<sun.reflect.misc.ReflectUtil: void checkProxyPackageAccess(java.lang.ClassLoader,java.lang.Class[])>
<java.awt.Component: int getSiblingIndexAbove()>
<java.lang.ClassLoader: boolean needsClassLoaderPermissionCheck(java.lang.ClassLoader,java.lang.ClassLoader)>
<java.lang.reflect.Field: void setBoolean(java.lang.Object,boolean)>
<java.awt.Component: boolean mouseMove(java.awt.Event,int,int)>
<java.util.IllegalFormatException: void <init>()>
<java.awt.Container: void adjustListeningChildren(long,int)>
<java.lang.ConditionalSpecialCasing: boolean isCased(int)>
<java.awt.Insets: void <init>(int,int,int,int)>
<sun.nio.cs.StreamEncoder: void implFlushBuffer()>
<java.awt.Component: boolean checkCoalescing()>
<sun.reflect.MethodAccessorGenerator: sun.reflect.ConstructorAccessor generateConstructor(java.lang.Class,java.lang.Class[],java.lang.Class[],int)>
<sun.reflect.UnsafeQualifiedIntegerFieldAccessorImpl: void <init>(java.lang.reflect.Field,boolean)>
<javax.swing.TimerQueue: javax.swing.TimerQueue sharedInstance()>
<sun.misc.FDBigInt: sun.misc.FDBigInt mult(sun.misc.FDBigInt)>
<java.awt.Component: void invalidateIfValid()>
<java.lang.Math: double floor(double)>
<java.lang.Long: long longValue()>
<javax.swing.JViewport: javax.swing.JViewport$ViewListener createViewListener()>
<java.lang.String: java.lang.String trim()>
<java.awt.KeyboardFocusManager: void fireVetoableChange(java.lang.String,java.lang.Object,java.lang.Object)>
<java.awt.dnd.DropTarget: java.awt.dnd.DropTargetContext getDropTargetContext()>
<java.lang.AbstractStringBuilder: java.lang.AbstractStringBuilder delete(int,int)>
<sun.misc.FloatingDecimal: int getHexDigit(java.lang.String,int)>
<java.beans.PropertyChangeListenerProxy: java.lang.String getPropertyName()>
<sun.misc.Launcher: sun.misc.URLClassPath getBootstrapClassPath()>
<java.lang.String: void getChars(int,int,char[],int)>
<java.nio.charset.CharsetDecoder: java.nio.charset.CoderResult decode(java.nio.ByteBuffer,java.nio.CharBuffer,boolean)>
<javax.swing.LookAndFeel: boolean getSupportsWindowDecorations()>
<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>
<java.lang.RuntimePermission: void <init>(java.lang.String)>
<sun.java2d.loops.CompositeType: boolean equals(java.lang.Object)>
<sun.misc.SoftCache$ValueCell: boolean access$000(sun.misc.SoftCache$ValueCell)>
<sun.util.calendar.CalendarDate: java.util.TimeZone getZone()>
<sun.awt.HeadlessToolkit: java.awt.Toolkit getUnderlyingToolkit()>
<sun.awt.dnd.SunDropTargetContextPeer$EventDispatcher: void dispatchDropEvent(sun.awt.dnd.SunDropTargetEvent)>
<java.awt.event.MouseEvent: int getYOnScreen()>
<java.awt.Component: int getBoundsOp()>
<javax.swing.Autoscroller: void _stop(javax.swing.JComponent)>
<javax.swing.AbstractButton: void <init>()>
<java.text.AttributedString: void <init>(java.lang.String)>
<javax.swing.plaf.metal.DefaultMetalTheme: void <init>()>
<sun.reflect.ClassFileAssembler: void opc_invokeinterface(short,int,byte,int)>
<java.awt.Component: boolean isRequestFocusAccepted(boolean,boolean,sun.awt.CausedFocusEvent$Cause)>
<java.nio.charset.CoderResult: boolean isMalformed()>
<java.lang.StringIndexOutOfBoundsException: void <init>(java.lang.String)>
<sun.reflect.ClassFileAssembler: void opc_aaload()>
<java.nio.charset.CoderMalfunctionError: void <init>(java.lang.Exception)>
<java.security.GeneralSecurityException: void <init>(java.lang.String)>
<javax.swing.text.AbstractDocument: javax.swing.text.DocumentFilter$FilterBypass getFilterBypass()>
<java.util.Calendar: void <init>(java.util.TimeZone,java.util.Locale)>
<sun.util.calendar.CalendarDate: void setZoneOffset(int)>
<java.util.Hashtable: void <init>(int)>
<sun.util.resources.LocaleData: java.util.ResourceBundle getBundle(java.lang.String,java.util.Locale)>
<java.awt.event.InvocationEvent: void <init>(java.lang.Object,java.lang.Runnable)>
<java.lang.Character: char charValue()>
<java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)>
<sun.util.LocaleServiceProviderPool$NullProvider: sun.util.LocaleServiceProviderPool$NullProvider access$200()>
<java.lang.ThreadLocal$ThreadLocalMap: void set(java.lang.ThreadLocal,java.lang.Object)>
<java.util.logging.Logger: void config(java.lang.String)>
<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>
<java.awt.SequencedEvent: void dispose()>
<java.io.InputStreamReader: void close()>
<java.security.Policy: void initPolicy(java.security.Policy)>
<java.text.SimpleDateFormat: boolean isGregorianCalendar()>
<javax.swing.LookAndFeel: java.lang.String toString()>
<java.nio.Bits: java.nio.ByteOrder byteOrder()>
<java.util.ResourceBundle: java.lang.ref.ReferenceQueue access$200()>
<java.lang.ThreadGroup: int getMaxPriority()>
<java.net.Inet6Address: boolean isLinkLocalAddress(byte[])>
<java.util.Locale: java.lang.String getVariant()>
<java.util.AbstractList: void <init>()>
<java.lang.reflect.Method: void setMethodAccessor(sun.reflect.MethodAccessor)>
<javax.swing.UIManager$LookAndFeelInfo: void <init>(java.lang.String,java.lang.String)>
<java.lang.reflect.Field: sun.reflect.FieldAccessor getFieldAccessor(boolean)>
<java.lang.Thread$1: void <init>(java.lang.Class)>
<java.awt.Component: java.awt.Container getContainer()>
<java.awt.AWTKeyStroke: java.lang.reflect.Constructor getCtor(java.lang.Class)>
<java.io.FilterInputStream: int read()>
<java.util.Vector: void <init>()>
<java.util.SimpleTimeZone: long getEnd(sun.util.calendar.BaseCalendar,sun.util.calendar.BaseCalendar$Date,int)>
<java.awt.geom.AffineTransform: double getTranslateY()>
<java.awt.Component: int getWidth()>
<sun.java2d.SurfaceData: void setBlitProxyKey(java.lang.Object)>
<java.util.Calendar: void set(int,int,int,int,int,int)>
<java.lang.Long: long parseLong(java.lang.String)>
<java.lang.StringCoding$StringDecoder: void <init>(java.nio.charset.Charset,java.lang.String,java.lang.StringCoding$1)>
<java.awt.dnd.DropTargetDragEvent: java.awt.Point getLocation()>
<java.awt.Font: sun.font.AttributeValues getAttributeValues()>
<java.awt.Component: sun.java2d.pipe.Region calculateCurrentShape()>
<sun.util.calendar.ZoneInfoFile: java.lang.String getFileName(java.lang.String)>
<java.beans.PropertyChangeSupport: void removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)>
<java.util.LinkedList$Entry: void <init>(java.lang.Object,java.util.LinkedList$Entry,java.util.LinkedList$Entry)>
<sun.misc.FloatingDecimal: void <init>(float)>
<java.lang.StringCoding: java.lang.Object deref(java.lang.ThreadLocal)>
<java.awt.AWTKeyStroke: java.awt.AWTKeyStroke getAWTKeyStroke(int,int)>
<java.text.DecimalFormat: void expandAffixes()>
<sun.reflect.ClassFileAssembler: void opc_new(short)>
<sun.java2d.SurfaceData: void <init>(sun.java2d.StateTrackable$State,sun.java2d.loops.SurfaceType,java.awt.image.ColorModel)>
<java.awt.Component: void setFocusTraversalKeysEnabled(boolean)>
<java.awt.AWTEventMulticaster: java.awt.event.MouseListener remove(java.awt.event.MouseListener,java.awt.event.MouseListener)>
<java.awt.datatransfer.MimeType: java.lang.String getParameter(java.lang.String)>
<java.security.Policy: void addStaticPerms(java.security.PermissionCollection,java.security.PermissionCollection)>
<javax.swing.JTextField: void <init>(javax.swing.text.Document,java.lang.String,int)>
<java.beans.PropertyChangeSupport: void firePropertyChange(java.beans.PropertyChangeEvent)>
<java.lang.SecurityManager: void checkMemberAccess(java.lang.Class,int)>
<java.util.logging.LogManager$LoggerContext: java.util.logging.LogManager$LogNode getNode(java.lang.String)>
<java.awt.Insets: boolean equals(java.lang.Object)>
<sun.reflect.misc.MethodUtil: java.lang.Object invoke(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>
<java.lang.Float: boolean isNaN(float)>
<java.awt.Window: java.awt.GraphicsConfiguration getGraphicsConfiguration()>
<java.util.regex.Pattern: int o()>
<javax.swing.SwingUtilities: void invokeLater(java.lang.Runnable)>
<java.lang.StringIndexOutOfBoundsException: void <init>(int)>
<javax.swing.UIDefaults: java.lang.Class getUIClass(java.lang.String,java.lang.ClassLoader)>
<java.awt.AWTKeyStroke: char getKeyChar()>
<java.io.DataInputStream: java.lang.String readUTF()>
============= non Java Library Methods (954) ============= 
<org.sunflow.core.parser.RA3Parser: void <init>()>
<org.codehaus.janino.Parser: void verifyIdentifierIsConventionalClassOrInterfaceName(java.lang.String,org.codehaus.janino.Location)>
<org.codehaus.janino.util.ClassFile: java.lang.String getThisClassName()>
<org.codehaus.janino.Java$AmbiguousName: void <init>(org.codehaus.janino.Location,java.lang.String[],int)>
<org.sunflow.RenderObjectMap$RenderObjectHandle: boolean update(org.sunflow.core.ParameterList,org.sunflow.SunflowAPI)>
<org.sunflow.RenderObjectMap: org.sunflow.core.Shader lookupShader(java.lang.String)>
<org.codehaus.janino.tools.JGrep$Action: org.codehaus.janino.tools.JGrep$MethodInvocationAction getMethodInvocationAction(java.lang.String)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Rvalue parseDimExpr()>
<org.sunflow.RenderObjectMap$RenderObjectHandle: void <init>(org.sunflow.core.Instance,org.sunflow.RenderObjectMap$1)>
<org.codehaus.janino.util.enumerator.EnumeratorSet: void <init>(java.lang.Class,java.lang.String,java.lang.String)>
<org.sunflow.core.gi.InstantGI$PointLightStore: void store(org.sunflow.core.ShadingState,org.sunflow.math.Vector3,org.sunflow.image.Color,org.sunflow.image.Color)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Rvalue[] parseArguments()>
<org.sunflow.RenderObjectMap: void put(java.lang.String,org.sunflow.core.PrimitiveList)>
<org.sunflow.core.renderer.SimpleRenderer: void <init>()>
<org.sunflow.core.display.FrameDisplay: void <init>()>
<org.sunflow.core.light.TriangleMeshLight: org.sunflow.math.Point3 access$500(org.sunflow.core.light.TriangleMeshLight,int)>
<org.sunflow.core.ParameterList$Parameter: float getFloatValue()>
<org.sunflow.RenderObjectMap$RenderObjectHandle: org.sunflow.core.Shader getShader()>
<org.sunflow.core.Instance: void removeModifier(org.sunflow.core.Modifier)>
<org.codehaus.janino.Java$CompilationUnit: void setPackageDeclaration(org.codehaus.janino.Java$PackageDeclaration)>
<org.codehaus.janino.ExpressionEvaluator: java.lang.Class class$(java.lang.String)>
<org.codehaus.janino.Descriptor: boolean isArrayReference(java.lang.String)>
<org.sunflow.math.BoundingBox: org.sunflow.math.Point3 getCenter()>
<org.codehaus.janino.tools.Disassembler$9: void <init>(double,org.codehaus.janino.tools.Disassembler)>
<org.codehaus.janino.util.resource.ResourceFinder: void <init>()>
<org.codehaus.janino.Scanner$Token: org.codehaus.janino.Location getLocation()>
<org.sunflow.system.RenderGlobalsPanel: void initialize()>
<org.codehaus.janino.Java$SwitchStatement: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Rvalue,java.util.List)>
<org.codehaus.janino.ScriptEvaluator: java.lang.Object createFastEvaluator(org.codehaus.janino.ScriptEvaluator,java.lang.String,java.lang.String[],java.lang.Class)>
<SunflowGUI$12: void <init>(SunflowGUI)>
<org.sunflow.core.shader.IDShader: void <init>()>
<org.codehaus.janino.Compiler: java.lang.Class class$(java.lang.String)>
<org.sunflow.core.shader.PrimIDShader: void <init>()>
<org.codehaus.janino.Java$InterfaceDeclaration: void addConstantDeclaration(org.codehaus.janino.Java$FieldDeclaration)>
<org.sunflow.RenderObjectMap$RenderObjectHandle: org.sunflow.core.Options getOptions()>
<org.codehaus.janino.tools.JGrep: org.codehaus.janino.IClassLoader createJavacLikePathIClassLoader(java.io.File[],java.io.File[],java.io.File[])>
<org.codehaus.janino.Java$AbstractTypeBodyDeclaration: void setDeclaringType(org.codehaus.janino.Java$TypeDeclaration)>
<org.codehaus.janino.ClassBodyEvaluator: org.codehaus.janino.Java$PackageMemberClassDeclaration addPackageMemberClassDeclaration(org.codehaus.janino.Location,org.codehaus.janino.Java$CompilationUnit)>
<org.codehaus.janino.Parser: java.lang.String join(java.lang.String[],java.lang.String)>
<org.codehaus.janino.Java$ConstructorInvocation: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Rvalue[])>
<org.codehaus.janino.ScriptEvaluator: void cook(org.codehaus.janino.Scanner[])>
<org.sunflow.SunflowAPI: void build()>
<org.codehaus.janino.Parser: void parseInterfaceBody(org.codehaus.janino.Java$InterfaceDeclaration)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$PackageMemberTypeDeclaration parsePackageMemberTypeDeclaration()>
<org.sunflow.core.AccelerationStructureFactory: org.sunflow.core.AccelerationStructure create(java.lang.String,int,boolean)>
<org.codehaus.janino.tools.Disassembler$3: void <init>(short,short,org.codehaus.janino.tools.Disassembler)>
<org.codehaus.janino.Java$LocalVariableDeclarationStatement: void <init>(org.codehaus.janino.Location,short,org.codehaus.janino.Java$Type,org.codehaus.janino.Java$VariableDeclarator[])>
<org.codehaus.janino.Java$ClassLiteral: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Type)>
<org.sunflow.core.gi.IrradianceCacheGIEngine: void <init>(org.sunflow.core.Options)>
<org.codehaus.janino.Scanner$IdentifierToken: void <init>(org.codehaus.janino.Scanner,org.codehaus.janino.Scanner$1,java.lang.String)>
<org.codehaus.janino.tools.Disassembler$15: void <init>(short[],org.codehaus.janino.tools.Disassembler)>
<org.codehaus.janino.FilterWarningHandler: void <init>(org.codehaus.janino.util.StringPattern[],org.codehaus.janino.WarningHandler)>
<org.codehaus.janino.Parser: org.codehaus.janino.Location location()>
<org.sunflow.core.ParameterList: void addVectors(java.lang.String,org.sunflow.core.ParameterList$InterpolationType,float[])>
<org.sunflow.math.Matrix4: org.sunflow.math.Matrix4 scale(float,float,float)>
<org.codehaus.janino.samples.DemoBase: java.lang.String toString(java.lang.Object)>
<org.codehaus.janino.ClassBodyEvaluator: java.lang.Object createFastClassBodyEvaluator(org.codehaus.janino.Scanner,java.lang.Class,java.lang.ClassLoader)>
<org.sunflow.system.Timer: void <init>()>
<org.sunflow.util.FastHashMap$EntryIterator: void <init>(org.sunflow.util.FastHashMap,org.sunflow.util.FastHashMap$1)>
<org.codehaus.janino.tools.Disassembler$SourceFileAttribute: void <init>(org.codehaus.janino.tools.Disassembler,short)>
<org.sunflow.core.display.FastDisplay: void <init>()>
<org.sunflow.core.parser.RA2Parser: void <init>()>
<org.sunflow.core.photonmap.CausticPhotonMap: void store(org.sunflow.core.ShadingState,org.sunflow.math.Vector3,org.sunflow.image.Color,org.sunflow.image.Color)>
<org.codehaus.janino.Java$Assignment: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Lvalue,java.lang.String,org.codehaus.janino.Java$Rvalue)>
<org.sunflow.system.ImagePanel: void <init>()>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Rvalue[] parseArgumentList()>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$FunctionDeclarator$FormalParameter parseFormalParameter()>
<org.codehaus.janino.Java$Block: void addStatement(org.codehaus.janino.Java$BlockStatement)>
<org.sunflow.math.Matrix4: org.sunflow.math.Matrix4 multiply(org.sunflow.math.Matrix4)>
<org.sunflow.system.Parser: java.lang.String getNextToken()>
<org.codehaus.janino.samples.ClassBodyDemo: java.lang.Class class$(java.lang.String)>
<org.codehaus.janino.Java$Lvalue: void <init>(org.codehaus.janino.Location)>
<org.codehaus.janino.Java$LabeledStatement: void <init>(org.codehaus.janino.Location,java.lang.String,org.codehaus.janino.Java$Statement)>
<org.codehaus.janino.Parser: void parseClassBody(org.codehaus.janino.Java$ClassDeclaration)>
<org.sunflow.core.light.TriangleMeshLight: int[] access$100(org.sunflow.core.light.TriangleMeshLight)>
<org.sunflow.RenderObjectMap$RenderObjectHandle: boolean access$600(org.sunflow.RenderObjectMap$RenderObjectHandle,org.sunflow.core.ParameterList,org.sunflow.SunflowAPI)>
<org.codehaus.janino.util.ClassFile$FieldInfo: void store(java.io.DataOutputStream)>
<org.codehaus.janino.Parser: void eatToken()>
<org.sunflow.SunflowAPI: void geometry(java.lang.String,org.sunflow.core.PrimitiveList)>
<org.codehaus.janino.Scanner$IdentifierToken: void <init>(org.codehaus.janino.Scanner,java.lang.String)>
<org.sunflow.math.Vector3: float length()>
<org.sunflow.core.ParameterList$Parameter: org.sunflow.math.Vector3 access$1700(org.sunflow.core.ParameterList$Parameter)>
<org.codehaus.janino.util.iterator.ProducerIterator: void <init>(org.codehaus.janino.util.Producer)>
<org.codehaus.janino.Scanner$Token: java.lang.String getOperator()>
<org.codehaus.janino.Java$Instanceof: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Rvalue,org.codehaus.janino.Java$Type)>
<org.codehaus.janino.IClass: void <init>()>
<org.codehaus.janino.Java$Initializer: void <init>(org.codehaus.janino.Location,boolean,org.codehaus.janino.Java$Block)>
<org.sunflow.core.shader.MirrorShader: void <init>()>
<org.codehaus.janino.tools.Disassembler$13: void <init>(org.codehaus.janino.tools.Disassembler$AttributeInfo[],byte[],org.codehaus.janino.tools.Disassembler$ExceptionTableEntry[],short,short,org.codehaus.janino.tools.Disassembler)>
<org.sunflow.system.SearchPath: void addSearchPath(java.lang.String)>
<org.sunflow.core.LightServer: void showStats()>
<org.sunflow.util.FastHashMap$Entry: java.lang.Object getValue()>
<org.sunflow.Benchmark: void execute()>
<org.sunflow.RenderObjectMap$RenderObjectHandle: org.sunflow.core.Geometry access$400(org.sunflow.RenderObjectMap$RenderObjectHandle)>
<org.sunflow.core.Scene: org.sunflow.math.BoundingBox getBounds()>
<org.codehaus.janino.Location: java.lang.String getFileName()>
<org.sunflow.core.ParameterList$Parameter: void <init>(java.lang.String[])>
<org.sunflow.RenderObjectMap: void put(java.lang.String,org.sunflow.core.Tesselatable)>
<org.codehaus.janino.tools.Disassembler: org.codehaus.janino.tools.Disassembler$AttributeInfo readAttributeBody(java.lang.String,java.io.DataInputStream)>
<org.codehaus.janino.util.Benchmark: void beginReporting(java.lang.String)>
<org.codehaus.janino.util.resource.FileResourceFinder: void <init>()>
<org.codehaus.janino.Parser: void setWarningHandler(org.codehaus.janino.WarningHandler)>
<org.codehaus.janino.tools.Disassembler: void main(java.lang.String[])>
<org.sunflow.core.shader.WireframeShader: void <init>()>
<org.codehaus.janino.SimpleCompiler: java.lang.ClassLoader getClassLoader()>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Statement parseIfStatement()>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Statement parseSwitchStatement()>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Atom parseExclusiveOrExpression()>
<org.codehaus.janino.Scanner$LocatedException: java.lang.String getMessage()>
<org.codehaus.janino.Parser: java.lang.String readIdentifier()>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Statement parseLabeledStatement()>
<org.codehaus.janino.Compiler: org.codehaus.janino.IClassLoader createJavacLikePathIClassLoader(java.io.File[],java.io.File[],java.io.File[])>
<org.codehaus.janino.tools.Disassembler$7: void <init>(float,org.codehaus.janino.tools.Disassembler)>
<org.sunflow.core.Instance: void removeShader(org.sunflow.core.Shader)>
<org.codehaus.janino.ScriptEvaluator: void cook(org.codehaus.janino.Scanner)>
<org.codehaus.janino.tools.JGrep$JGrepIClassLoader: void <init>(org.codehaus.janino.tools.JGrep,org.codehaus.janino.IClassLoader)>
<org.codehaus.janino.tools.Disassembler$ExceptionTableEntry: void <init>(org.codehaus.janino.tools.Disassembler,short,short,short,short)>
<org.sunflow.core.ParameterList: void addBoolean(java.lang.String,boolean)>
<org.codehaus.janino.Java$AbstractTypeDeclaration: void addMemberTypeDeclaration(org.codehaus.janino.Java$MemberTypeDeclaration)>
<org.sunflow.SunflowAPI: org.sunflow.core.Instance lookupInstance(java.lang.String)>
<org.sunflow.core.parser.ShaveRibParser: void <init>()>
<org.codehaus.janino.UnicodeUnescapeReader: void main(java.lang.String[])>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$ArrayInitializerOrRvalue parseVariableInitializer()>
<org.sunflow.math.Matrix4: float transformPY(float,float,float)>
<org.codehaus.janino.tools.HprofScrubber: void dumpSamples(org.codehaus.janino.tools.HprofScrubber$Sample[],java.util.Map)>
<org.sunflow.util.FastHashMap$Entry: java.lang.Object access$200(org.sunflow.util.FastHashMap$Entry)>
<org.sunflow.core.ParameterList: void addFloats(java.lang.String,org.sunflow.core.ParameterList$InterpolationType,float[])>
<org.codehaus.janino.Java$PackageDeclaration: void <init>(org.codehaus.janino.Location,java.lang.String)>
<org.codehaus.janino.tools.JGrep: void <init>(org.codehaus.janino.IClassLoader,java.lang.String,boolean)>
<org.codehaus.janino.Java$SimpleType: void <init>(org.codehaus.janino.Location,org.codehaus.janino.IClass)>
<org.sunflow.util.FastHashMap$EntryIterator: boolean hasNext()>
<org.codehaus.janino.Java$AlternateConstructorInvocation: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Rvalue[])>
<org.codehaus.janino.util.resource.LazyMultiResourceFinder: void <init>(java.util.Iterator)>
<org.codehaus.janino.Java$NewInitializedArray: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$ArrayType,org.codehaus.janino.Java$ArrayInitializer)>
<org.sunflow.image.Color: org.sunflow.image.Color mul(float)>
<org.sunflow.core.ParameterList$Parameter: void <init>(int[],org.sunflow.core.ParameterList$1)>
<SunflowGUI$2: void <init>(SunflowGUI)>
<org.codehaus.janino.Mod: java.lang.String shortToString(short)>
<org.codehaus.janino.Java$1: void <init>(org.codehaus.janino.Java$BlockStatement)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Atom parseExpression()>
<org.codehaus.janino.util.CausedException: void <init>(java.lang.String)>
<org.sunflow.RenderObjectMap: boolean has(java.lang.String)>
<org.sunflow.core.photonmap.GlobalPhotonMap: void store(org.sunflow.core.ShadingState,org.sunflow.math.Vector3,org.sunflow.image.Color,org.sunflow.image.Color)>
<org.sunflow.RenderObjectMap$RenderObjectHandle: void <init>(org.sunflow.core.PrimitiveList,org.sunflow.RenderObjectMap$1)>
<org.sunflow.math.OrthoNormalBasis: void <init>()>
<org.sunflow.math.Vector3: void <init>(float,float,float)>
<org.sunflow.core.display.FileDisplay: void <init>(java.lang.String)>
<org.codehaus.janino.ScriptEvaluator: void fillBlock(int,org.codehaus.janino.Scanner,org.codehaus.janino.Java$Block)>
<org.codehaus.janino.Java$Literal: void <init>(org.codehaus.janino.Location,java.lang.Object)>
<org.sunflow.RenderObjectMap$RenderObjectHandle: java.lang.String typeName()>
<org.codehaus.janino.SimpleCompiler$AuxiliaryClassLoader: void <init>(java.lang.ClassLoader)>
<org.sunflow.core.InstanceList: void <init>()>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$NamedClassDeclaration parseClassDeclarationRest(java.lang.String,short,org.codehaus.janino.Parser$ClassDeclarationContext)>
<SunflowGUI$18: void <init>(SunflowGUI)>
<org.sunflow.math.Matrix4: org.sunflow.math.Matrix4 translation(float,float,float)>
<org.codehaus.janino.tools.JGrep: java.lang.Class class$(java.lang.String)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$ReferenceType[] parseReferenceTypeList()>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$BlockStatement parseForInit()>
<org.codehaus.janino.Java$PackageMemberInterfaceDeclaration: void <init>(org.codehaus.janino.Location,java.lang.String,short,java.lang.String,org.codehaus.janino.Java$Type[])>
<org.sunflow.math.Matrix4: org.sunflow.math.Matrix4 rotateY(float)>
<org.codehaus.janino.tools.Disassembler: void indent(java.lang.String)>
<org.codehaus.janino.ExpressionEvaluator: void <init>()>
<org.sunflow.system.RenderGlobalsPanel: void <init>()>
<org.codehaus.janino.tools.Disassembler$1: void <init>(short,org.codehaus.janino.tools.Disassembler)>
<org.sunflow.core.ParameterList$Parameter: void <init>(int[])>
<org.codehaus.janino.Scanner: org.codehaus.janino.Scanner$Token internalRead()>
<org.codehaus.janino.util.ClassFile: void storeAttributes(java.io.DataOutputStream,java.util.List)>
<org.sunflow.core.parser.SCParser: void <init>()>
<org.sunflow.core.LightServer: void setLights(org.sunflow.core.LightSource[])>
<org.codehaus.janino.tools.Disassembler: void indentln(java.lang.String)>
<org.codehaus.janino.util.resource.MultiResourceFinder: void <init>(java.util.Collection)>
<org.codehaus.janino.Java$BreakStatement: void <init>(org.codehaus.janino.Location,java.lang.String)>
<org.codehaus.janino.samples.DemoBase: java.lang.Class[] stringToTypes(java.lang.String)>
<org.codehaus.janino.UnparseVisitor: void <init>(java.io.Writer)>
<SunflowGUI$21: void <init>(SunflowGUI)>
<org.sunflow.core.ParameterList: float getFloat(java.lang.String,float)>
<org.sunflow.RenderObjectMap$RenderObjectHandle: void <init>(org.sunflow.core.Shader,org.sunflow.RenderObjectMap$1)>
<org.codehaus.janino.tools.Disassembler: org.codehaus.janino.tools.Disassembler$ConstantPoolInfo readConstantPoolInfo(java.io.DataInputStream)>
<org.sunflow.RenderObjectMap$RenderObjectHandle: void <init>(org.sunflow.core.Instance)>
<org.codehaus.janino.ClassBodyEvaluator: java.lang.Class compileToClass(org.codehaus.janino.Java$CompilationUnit,org.codehaus.janino.util.enumerator.EnumeratorSet,java.lang.String)>
<org.sunflow.RenderObjectMap$RenderObjectHandle: void <init>(org.sunflow.core.Camera,org.sunflow.RenderObjectMap$1)>
<org.codehaus.janino.tools.Disassembler: void disasmFieldInfo(java.io.DataInputStream)>
<org.codehaus.janino.Java$IfStatement: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Rvalue,org.codehaus.janino.Java$BlockStatement,org.codehaus.janino.Java$BlockStatement)>
<org.codehaus.janino.util.ClassFile: void storeShortArray(java.io.DataOutputStream,short[])>
<org.codehaus.janino.Parser$ParseException: void <init>(java.lang.String,org.codehaus.janino.Location)>
<org.sunflow.core.light.TriangleMeshLight: void init(java.lang.String,org.sunflow.SunflowAPI)>
<org.sunflow.Benchmark: void <init>(int,boolean,boolean,boolean,int)>
<org.codehaus.janino.ScriptEvaluator: void <init>()>
<org.sunflow.SunflowAPI: void parameter(java.lang.String,int)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Atom parseMultiplicativeExpression()>
<org.codehaus.janino.Java$ReturnStatement: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Rvalue)>
<org.codehaus.janino.Parser: void warning(java.lang.String,java.lang.String,org.codehaus.janino.Location)>
<org.codehaus.janino.util.iterator.DirectoryIterator: java.util.ArrayList newArrayList(java.lang.Object)>
<org.sunflow.RenderObjectMap: void put(java.lang.String,org.sunflow.core.Camera)>
<org.sunflow.core.ParameterList$Parameter: void <init>(int,org.sunflow.core.ParameterList$1)>
<org.codehaus.janino.Java$Atom: void <init>(org.codehaus.janino.Location)>
<org.codehaus.janino.util.ClassFile: void access$0(java.io.DataOutputStream,java.util.List)>
<org.codehaus.janino.Java$VariableDeclarator: void <init>(org.codehaus.janino.Location,java.lang.String,int,org.codehaus.janino.Java$ArrayInitializerOrRvalue)>
<org.sunflow.core.accel.KDTree: void <init>()>
<org.codehaus.janino.Scanner$Token: boolean isLiteral()>
<org.sunflow.core.ParameterList$Parameter: void <init>(boolean,org.sunflow.core.ParameterList$1)>
<org.sunflow.core.ParameterList$Parameter: void <init>(java.lang.String,org.sunflow.core.ParameterList$1)>
<org.codehaus.janino.Java$ForStatement: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$BlockStatement,org.codehaus.janino.Java$Rvalue,org.codehaus.janino.Java$Rvalue[],org.codehaus.janino.Java$BlockStatement)>
<org.sunflow.util.FastHashMap$Entry: void <init>(java.lang.Object,java.lang.Object)>
<org.codehaus.janino.Java$ConstructorInvocation: void setEnclosingScope(org.codehaus.janino.Java$Scope)>
<org.codehaus.janino.SimpleCompiler$AuxiliaryClassLoader: void addAuxiliaryClass(java.lang.Class)>
<org.codehaus.janino.Parser: void verifyIdentifierIsConventionalMethodName(java.lang.String,org.codehaus.janino.Location)>
<org.codehaus.janino.Java$ParenthesizedExpression: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Rvalue)>
<org.sunflow.core.light.TriangleMeshLight: int[] access$200(org.sunflow.core.light.TriangleMeshLight)>
<org.codehaus.janino.Java$DoStatement: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$BlockStatement,org.codehaus.janino.Java$Rvalue)>
<org.sunflow.SunflowAPI: boolean update(java.lang.String)>
<org.codehaus.janino.tools.JGrep$5: void <init>(java.util.List,org.codehaus.janino.UnitCompiler)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Type parseType()>
<org.codehaus.janino.Scanner: short access$4(org.codehaus.janino.Scanner)>
<org.codehaus.janino.util.Traverser$1: void <init>(org.codehaus.janino.util.Traverser)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$FunctionDeclarator$FormalParameter[] parseFormalParameters(org.codehaus.janino.Java$Scope)>
<org.sunflow.Benchmark: void kernelBegin()>
<org.codehaus.janino.ClassBodyEvaluator: void setClassName(java.lang.String)>
<org.sunflow.core.ParameterList$Parameter: int size()>
<org.codehaus.janino.Java$Rvalue: void <init>(org.codehaus.janino.Location)>
<SunflowGUI$20: void <init>(SunflowGUI)>
<org.sunflow.util.FastHashMap: org.sunflow.util.FastHashMap$Entry[] alloc(int)>
<org.sunflow.core.shader.QuickGrayShader: void <init>()>
<org.codehaus.janino.ClassBodyEvaluator: void <init>(org.codehaus.janino.Scanner,java.lang.String,java.lang.Class,java.lang.Class[],java.lang.ClassLoader)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Atom parseAndExpression()>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Statement parseThrowStatement()>
<org.sunflow.core.accel.KDTree: void <init>(int)>
<org.codehaus.janino.Java$BinaryOperation: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Rvalue,java.lang.String,org.codehaus.janino.Java$Rvalue)>
<org.codehaus.janino.Java$AbstractTypeDeclaration: void setEnclosingScope(org.codehaus.janino.Java$Scope)>
<org.sunflow.system.Parser: void checkNextToken(java.lang.String)>
<org.sunflow.core.accel.UniformGrid: void <init>()>
<org.sunflow.core.Scene: void setLightList(org.sunflow.core.LightSource[])>
<org.sunflow.core.shader.AmbientOcclusionShader: void <init>()>
<org.sunflow.system.Parser: void <init>(java.lang.String)>
<org.sunflow.core.ParameterList: void addIntegerArray(java.lang.String,int[])>
<org.codehaus.janino.Java$ExpressionStatement: void <init>(org.codehaus.janino.Java$Rvalue)>
<org.codehaus.janino.UnitCompiler$2: void <init>(org.codehaus.janino.UnitCompiler)>
<org.codehaus.janino.ScriptEvaluator: void setThrownExceptions(java.lang.Class[])>
<org.codehaus.janino.SimpleCompiler: org.codehaus.janino.Java$Type classToType(org.codehaus.janino.Location,java.lang.Class)>
<org.sunflow.core.ParameterList: void addTexCoords(java.lang.String,org.sunflow.core.ParameterList$InterpolationType,float[])>
<org.codehaus.janino.tools.JGrep: org.codehaus.janino.tools.JGrep$MethodInvocationTarget parseMethodInvocationPattern(java.lang.String)>
<org.codehaus.janino.Java$ContinueStatement: void <init>(org.codehaus.janino.Location,java.lang.String)>
<SunflowGUI$SceneTransferHandler: void <init>(SunflowGUI)>
<org.codehaus.janino.Compiler: boolean compile(java.io.File[])>
<org.codehaus.janino.util.ClassFile$MethodInfo: void store(java.io.DataOutputStream)>
<SunflowGUI$8: void <init>(SunflowGUI)>
<org.codehaus.janino.Java$MemberInterfaceDeclaration: void <init>(org.codehaus.janino.Location,java.lang.String,short,java.lang.String,org.codehaus.janino.Java$Type[])>
<org.codehaus.janino.Cookable: void cook(java.lang.String)>
<org.codehaus.janino.util.resource.PathResourceFinder$1: void <init>(java.util.Iterator)>
<org.codehaus.janino.Java$AbstractTypeDeclaration: void addDeclaredMethod(org.codehaus.janino.Java$MethodDeclarator)>
<org.codehaus.janino.tools.Disassembler: void <init>()>
<org.codehaus.janino.Parser: int parseBracketsOpt()>
<org.codehaus.janino.Compiler$2: void <init>(java.io.File)>
<org.codehaus.janino.Compiler: void main(java.lang.String[])>
<org.codehaus.janino.tools.Disassembler: void disasm(java.io.File)>
<org.sunflow.core.Scene: void setCamera(org.sunflow.core.Camera)>
<org.sunflow.core.Instance: void <init>()>
<org.sunflow.RenderObjectMap$RenderObjectHandle: void <init>(org.sunflow.core.LightSource)>
<org.sunflow.core.gi.PathTracingGIEngine: void <init>(org.sunflow.core.Options)>
<org.sunflow.image.RGBSpace: java.lang.String toString()>
<org.codehaus.janino.Java$FieldAccessExpression: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Atom,java.lang.String)>
<org.codehaus.janino.util.enumerator.EnumeratorSet: void <init>(java.lang.Class,java.lang.String)>
<org.codehaus.janino.Location: java.lang.String toString()>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Block parseMethodBody()>
<org.codehaus.janino.Cookable: void cook(java.lang.String,java.io.InputStream,java.lang.String)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Atom parseConditionalAndExpression()>
<org.codehaus.janino.ClassBodyEvaluator: java.lang.Class class$(java.lang.String)>
<org.codehaus.janino.ScriptEvaluator: java.lang.Object createFastEvaluator(org.codehaus.janino.ScriptEvaluator,org.codehaus.janino.Scanner,java.lang.String[],java.lang.Class)>
<org.codehaus.janino.Java$AbstractTypeBodyDeclaration: void <init>(org.codehaus.janino.Location,boolean)>
<org.sunflow.RenderObjectMap$RenderObjectHandle: org.sunflow.core.Camera getCamera()>
<org.codehaus.janino.Java$Statement: void <init>(org.codehaus.janino.Location)>
<org.codehaus.janino.Scanner$Token: void <init>(org.codehaus.janino.Scanner)>
<org.sunflow.system.Parser: void close()>
<org.sunflow.util.FastHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
<org.sunflow.system.Timer: void start()>
<org.sunflow.util.FastHashMap: void resize(int)>
<org.codehaus.janino.SimpleCompiler: void precook()>
<org.sunflow.core.LightServer: void <init>(org.sunflow.core.Scene)>
<org.codehaus.janino.tools.Disassembler$IndentPrintWriter: void println()>
<org.sunflow.core.ParameterList$Parameter: boolean getBoolValue()>
<org.codehaus.janino.Parser: boolean peekOperator(java.lang.String[])>
<org.sunflow.core.LightServer: void shadingCache(float)>
<org.sunflow.core.ParameterList$Parameter: boolean access$002(org.sunflow.core.ParameterList$Parameter,boolean)>
<org.codehaus.janino.Scanner: org.codehaus.janino.Scanner$Token read()>
<org.sunflow.util.FastHashMap: void <init>()>
<org.codehaus.janino.Descriptor: java.lang.String fromClassName(java.lang.String)>
<org.sunflow.core.renderer.BucketRenderer$BucketThread: void run()>
<org.sunflow.SunflowAPI: void reset()>
<org.codehaus.janino.Java$CatchClause: void setEnclosingTryStatement(org.codehaus.janino.Java$TryStatement)>
<org.codehaus.janino.Scanner$Token: boolean isKeyword(java.lang.String)>
<org.codehaus.janino.IClass: java.lang.String getDescriptor()>
<org.sunflow.core.Scene: void <init>()>
<org.sunflow.system.Timer: java.lang.String toString(double)>
<org.codehaus.janino.Scanner: void warning(java.lang.String,java.lang.String,org.codehaus.janino.Location)>
<org.codehaus.janino.tools.JGrep: void main(java.lang.String[])>
<org.codehaus.janino.ExpressionEvaluator: void setExpressionTypes(java.lang.Class[])>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Rvalue[] parseExpressionList()>
<org.sunflow.SunflowAPI: void parameter(java.lang.String,org.sunflow.image.Color)>
<org.sunflow.RenderObjectMap$RenderObjectHandle: org.sunflow.core.Geometry getGeometry()>
<org.codehaus.janino.Scanner$OperatorToken: void <init>(org.codehaus.janino.Scanner,java.lang.String)>
<org.sunflow.math.Matrix4: org.sunflow.math.Matrix4 rotateX(float)>
<org.sunflow.math.Vector3: org.sunflow.math.Vector3 cross(org.sunflow.math.Vector3,org.sunflow.math.Vector3,org.sunflow.math.Vector3)>
<org.codehaus.janino.SimpleCompiler: void <init>()>
<org.sunflow.core.renderer.ProgressiveRenderer$SmallBucketThread: void run()>
<org.codehaus.janino.util.StringPattern: org.codehaus.janino.util.StringPattern[] parseCombinedPattern(java.lang.String)>
<org.sunflow.core.light.DirectionalSpotlight: void <init>()>
<SunflowGUI$7: void <init>(SunflowGUI)>
<org.sunflow.SunflowAPI: void camera(java.lang.String,org.sunflow.core.CameraLens)>
<org.codehaus.janino.util.TeeReader: void <init>(java.io.Reader,java.io.Writer,boolean)>
<org.codehaus.janino.Java$MethodDeclarator: void <init>(org.codehaus.janino.Location,java.lang.String,short,org.codehaus.janino.Java$Type,java.lang.String,org.codehaus.janino.Java$FunctionDeclarator$FormalParameter[],org.codehaus.janino.Java$Type[],org.codehaus.janino.Java$Block)>
<org.codehaus.janino.tools.JGrep$4: void <init>(org.codehaus.janino.util.StringPattern[])>
<org.sunflow.core.renderer.BucketRenderer: void <init>()>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$ReferenceType parseReferenceType()>
<org.codehaus.janino.Java$Cast: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Type,org.codehaus.janino.Java$Rvalue)>
<org.codehaus.janino.Scanner: org.codehaus.janino.Scanner$LiteralToken stringToFloatLiteralToken(java.lang.String)>
<org.codehaus.janino.SimpleCompiler: java.lang.ClassLoader compileToClassLoader(org.codehaus.janino.Java$CompilationUnit,org.codehaus.janino.util.enumerator.EnumeratorSet)>
<org.codehaus.janino.Java$Atom: org.codehaus.janino.Java$Rvalue toRvalueOrPE()>
<org.codehaus.janino.Scanner$EOFToken: void <init>(org.codehaus.janino.Scanner)>
<org.sunflow.util.FastHashMap$Entry: boolean isRemoved()>
<org.sunflow.core.LightServer: void setShaderOverride(org.sunflow.core.Shader,boolean)>
<org.codehaus.janino.Java$LocalClassDeclarationStatement: void <init>(org.codehaus.janino.Java$LocalClassDeclaration)>
<SunflowGUI$15: void <init>(SunflowGUI)>
<org.codehaus.janino.Java$Block: void <init>(org.codehaus.janino.Location)>
<org.codehaus.janino.Cookable: void cook(java.lang.String,java.io.Reader)>
<org.codehaus.janino.SimpleCompiler: void setParentClassLoader(java.lang.ClassLoader,java.lang.Class[])>
<org.codehaus.janino.Java$Atom: org.codehaus.janino.Java$Rvalue toRvalue()>
<org.sunflow.core.InstanceList: int getNumPrimitives()>
<org.sunflow.RenderObjectMap$RenderObjectHandle: org.sunflow.core.LightSource access$700(org.sunflow.RenderObjectMap$RenderObjectHandle)>
<org.sunflow.SunflowAPI: org.sunflow.core.LightSource lookupLight(java.lang.String)>
<org.codehaus.janino.util.resource.JarDirectoriesResourceFinder: void <init>(java.io.File[])>
<org.sunflow.image.Color: void <init>(org.sunflow.image.Color)>
<org.codehaus.janino.samples.DemoBase: java.lang.Object createObject(java.lang.Class,java.lang.String)>
<org.sunflow.SunflowAPI: void parameter(java.lang.String,int[])>
<org.codehaus.janino.util.Traverser: void <init>()>
<org.sunflow.system.ImagePanel$ScrollZoomListener: void <init>(org.sunflow.system.ImagePanel)>
<org.codehaus.janino.Scanner: org.codehaus.janino.Scanner$Token peek()>
<org.sunflow.Benchmark: void <init>()>
<org.codehaus.janino.tools.Disassembler$LineNumberTableAttribute: void <init>(org.codehaus.janino.tools.Disassembler,short[])>
<org.codehaus.janino.Java$Rvalue: void setEnclosingBlockStatement(org.codehaus.janino.Java$BlockStatement)>
<org.codehaus.janino.Scanner: org.codehaus.janino.Scanner$Token scanNumericLiteral(int)>
<org.codehaus.janino.Location: void <init>(java.lang.String,short,short)>
<org.sunflow.core.ParameterList$Parameter: void <init>(org.sunflow.image.Color,org.sunflow.core.ParameterList$1)>
<org.sunflow.core.camera.PinholeLens: void update()>
<org.sunflow.Benchmark$BenchmarkScene: void sphere(java.lang.String,java.lang.String,float,float,float,float)>
<org.codehaus.janino.tools.Disassembler$IndentPrintWriter: void <init>(java.io.OutputStream)>
<org.codehaus.janino.tools.Disassembler$11: void <init>(short,org.codehaus.janino.tools.Disassembler$AttributeInfo[],short,short,org.codehaus.janino.tools.Disassembler)>
<org.codehaus.janino.util.ClassFile: void storeFields(java.io.DataOutputStream,java.util.List)>
<org.codehaus.janino.tools.Disassembler$IndentPrintWriter: void unindent()>
<org.sunflow.util.FastHashMap$Entry: java.lang.Object access$100(org.sunflow.util.FastHashMap$Entry)>
<org.sunflow.core.ParameterList: void <init>()>
<org.sunflow.RenderObjectMap$RenderObjectHandle: org.sunflow.core.Modifier access$300(org.sunflow.RenderObjectMap$RenderObjectHandle)>
<org.sunflow.util.FastHashMap: java.util.Iterator iterator()>
<org.codehaus.janino.tools.JGrep: void jGrep(java.util.Iterator,java.util.List)>
<org.codehaus.janino.Parser: boolean peekOperator(java.lang.String)>
<org.sunflow.util.FastHashMap: boolean containsKey(java.lang.Object)>
<org.sunflow.math.Matrix4: void <init>(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)>
<org.codehaus.janino.Java$CompilationUnit$SingleStaticImportDeclaration: void <init>(org.codehaus.janino.Location,java.lang.String[])>
<org.codehaus.janino.ClassBodyEvaluator: void cook(org.codehaus.janino.Scanner)>
<org.codehaus.janino.SimpleCompiler$AuxiliaryClassLoader: void access$0(org.codehaus.janino.SimpleCompiler$AuxiliaryClassLoader,java.lang.Class)>
<org.codehaus.janino.util.ClassFile: void storeConstantPool(java.io.DataOutputStream,java.util.List)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Statement parseEmptyStatement()>
<org.sunflow.core.renderer.SimpleRenderer$BucketThread: void run()>
<org.sunflow.core.Instance: boolean hasGeometry(org.sunflow.core.Geometry)>
<org.codehaus.janino.Java$CompilationUnit: void addPackageMemberTypeDeclaration(org.codehaus.janino.Java$PackageMemberTypeDeclaration)>
<org.codehaus.janino.tools.Disassembler: void disasmAttributeInfo(java.io.DataInputStream)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Atom parseAdditiveExpression()>
<org.sunflow.core.InstanceList: int getNumPrimitives(int)>
<org.sunflow.RenderObjectMap: void updateScene(org.sunflow.core.Scene)>
<org.codehaus.janino.Java$FieldDeclaration: void setDeclaringType(org.codehaus.janino.Java$TypeDeclaration)>
<org.codehaus.janino.IClass: org.codehaus.janino.IClass getArrayIClass(org.codehaus.janino.IClass)>
<org.codehaus.janino.util.ClassFile: java.lang.String getConstantClassName(short)>
<org.codehaus.janino.Parser: void parseClassBodyDeclaration(org.codehaus.janino.Java$ClassDeclaration)>
<org.sunflow.RenderObjectMap$RenderObjectHandle: void <init>(org.sunflow.core.LightSource,org.sunflow.RenderObjectMap$1)>
<org.codehaus.janino.Java$MethodInvocation: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Atom,java.lang.String,org.codehaus.janino.Java$Rvalue[])>
<org.sunflow.core.light.TriangleMeshLight: int[] access$000(org.sunflow.core.light.TriangleMeshLight)>
<org.codehaus.janino.tools.Disassembler$17: void <init>(org.codehaus.janino.tools.Disassembler)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$CompilationUnit parseCompilationUnit()>
<org.codehaus.janino.Scanner$LiteralToken: void <init>(org.codehaus.janino.Scanner,java.lang.Object)>
<org.codehaus.janino.util.iterator.MultiDimensionalIterator: void <init>(java.util.Iterator,int)>
<SunflowGUI$14: void <init>(SunflowGUI)>
<org.codehaus.janino.util.resource.JarDirectoriesResourceFinder$1: void <init>(java.util.Iterator)>
<org.codehaus.janino.Parser: void <init>(org.codehaus.janino.Scanner)>
<org.codehaus.janino.tools.Disassembler$16: void <init>(org.codehaus.janino.tools.Disassembler)>
<org.sunflow.core.ParameterList$Parameter: org.sunflow.image.Color getColor()>
<org.codehaus.janino.Compiler: void <init>(java.io.File[],java.io.File[],java.io.File[],java.io.File[],java.io.File,java.lang.String,boolean,org.codehaus.janino.util.enumerator.EnumeratorSet,org.codehaus.janino.util.StringPattern[],boolean)>
<org.sunflow.core.ParameterList$Parameter: void <init>(boolean)>
<org.sunflow.core.ParameterList: boolean getBoolean(java.lang.String,boolean)>
<SunflowGUI$SceneTransferHandler: void <init>(SunflowGUI,SunflowGUI$1)>
<org.codehaus.janino.Scanner$Token: boolean isKeyword()>
<org.sunflow.util.FastHashMap: java.lang.Object get(java.lang.Object)>
<org.sunflow.core.shader.ShinyDiffuseShader: void <init>()>
<org.codehaus.janino.util.ClassFile: void store(java.io.OutputStream)>
<org.sunflow.system.Parser: boolean getNextLine()>
<org.codehaus.janino.CachingJavaSourceClassLoader: void <init>(java.lang.ClassLoader,java.io.File[],java.lang.String,java.io.File,org.codehaus.janino.util.enumerator.EnumeratorSet)>
<org.sunflow.core.InstanceList: org.sunflow.math.BoundingBox getWorldBounds(org.sunflow.math.Matrix4)>
<org.codehaus.janino.Parser: boolean peekKeyword()>
<org.sunflow.core.parser.TriParser: void <init>()>
<org.sunflow.system.Timer: java.lang.String toString()>
<org.sunflow.core.gi.GIEngineFactory: org.sunflow.core.GIEngine create(org.sunflow.core.Options)>
<org.codehaus.janino.tools.Disassembler$ConstantPoolInfo: void <init>()>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Rvalue[] parseDimExprs()>
<org.codehaus.janino.Scanner: short access$3(org.codehaus.janino.Scanner)>
<org.sunflow.system.RenderGlobalsPanel: void main(java.lang.String[])>
<org.sunflow.core.ParameterList$Parameter: void <init>(float,org.sunflow.core.ParameterList$1)>
<org.sunflow.RenderObjectMap: void <init>()>
<org.sunflow.util.FastHashMap$Entry: java.lang.Object getKey()>
<org.codehaus.janino.SimpleCompiler$AuxiliaryClassLoader: void <init>(org.codehaus.janino.SimpleCompiler$2,java.lang.ClassLoader)>
<org.sunflow.core.ParameterList$Parameter: java.lang.String access$900(org.sunflow.core.ParameterList$Parameter)>
<org.sunflow.SunflowAPI: void options(java.lang.String)>
<org.codehaus.janino.Scanner$Token: boolean isOperator()>
<org.codehaus.janino.ScriptEvaluator: java.lang.Object evaluate(java.lang.Object[])>
<org.sunflow.RenderObjectMap: void remove(java.lang.String)>
<org.codehaus.janino.util.Benchmark$1: void <init>()>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$VariableDeclarator parseVariableDeclaratorRest(java.lang.String)>
<org.codehaus.janino.SimpleCompiler: void <init>(java.lang.String,java.io.InputStream)>
<org.codehaus.janino.util.resource.FileResource: void <init>(java.io.File)>
<org.sunflow.image.Color: org.sunflow.image.Color white()>
<org.sunflow.util.FastHashMap$EntryIterator: void inc()>
<org.codehaus.janino.util.resource.PathResourceFinder: void <init>(java.io.File[])>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Block parseBlock()>
<org.codehaus.janino.Parser: void readKeyword(java.lang.String)>
<org.codehaus.janino.Scanner: org.codehaus.janino.Location location()>
<org.codehaus.janino.Java$ReferenceType: void <init>(org.codehaus.janino.Location,java.lang.String[])>
<org.sunflow.math.Matrix4: float transformPZ(float,float,float)>
<org.codehaus.janino.Java$LocalClassDeclaration: void <init>(org.codehaus.janino.Location,java.lang.String,short,java.lang.String,org.codehaus.janino.Java$Type,org.codehaus.janino.Java$Type[])>
<org.sunflow.util.FastHashMap$EntryIterator: void <init>(org.sunflow.util.FastHashMap)>
<org.sunflow.core.ParameterList: boolean isValidParameter(java.lang.String,org.sunflow.core.ParameterList$ParameterType,org.sunflow.core.ParameterList$InterpolationType,int,org.sunflow.core.ParameterList$Parameter)>
<org.sunflow.core.light.TriangleMeshLight: org.sunflow.math.Point3 access$300(org.sunflow.core.light.TriangleMeshLight,int)>
<org.codehaus.janino.ScriptEvaluator: void setThrownExceptions(java.lang.Class[][])>
<org.sunflow.core.ParameterList$Parameter: org.sunflow.core.ParameterList$ParameterType access$2000(org.sunflow.core.ParameterList$Parameter)>
<org.sunflow.core.ParameterList: void add(java.lang.String,org.sunflow.core.ParameterList$Parameter)>
<org.sunflow.RenderObjectMap: org.sunflow.core.Options lookupOptions(java.lang.String)>
<org.codehaus.janino.SimpleCompiler: org.codehaus.janino.Java$Type[] classesToTypes(org.codehaus.janino.Location,java.lang.Class[])>
<org.sunflow.core.gi.AmbientOcclusionGIEngine: void <init>(org.sunflow.core.Options)>
<org.codehaus.janino.Java$Atom: org.codehaus.janino.Java$Type toType()>
<org.sunflow.core.LightServer$1: void <init>(org.sunflow.core.LightServer,int,int,int,float[],float,org.sunflow.core.PhotonStore)>
<org.codehaus.janino.Java$CompilationUnit$SingleTypeImportDeclaration: void <init>(org.codehaus.janino.Location,java.lang.String[])>
<SunflowGUI: void newFileMenuItemActionPerformed(java.awt.event.ActionEvent)>
<org.codehaus.janino.Java$AmbiguousName: void <init>(org.codehaus.janino.Location,java.lang.String[])>
<org.sunflow.util.FastHashMap: void remove(java.lang.Object)>
<org.codehaus.janino.Java$Crement: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Lvalue,java.lang.String)>
<org.sunflow.Benchmark$BenchmarkScene: void <init>(org.sunflow.Benchmark)>
<org.sunflow.system.BenchmarkFramework: void execute(org.sunflow.system.BenchmarkTest)>
<org.sunflow.SunflowAPI: void parameter(java.lang.String,org.sunflow.math.Matrix4)>
<org.codehaus.janino.tools.Disassembler: org.codehaus.janino.tools.Disassembler$AttributeInfo[] readAttributes(java.io.DataInputStream)>
<org.sunflow.math.BoundingBox: void <init>()>
<org.sunflow.math.Point3: org.sunflow.math.Point3 mid(org.sunflow.math.Point3,org.sunflow.math.Point3,org.sunflow.math.Point3)>
<org.codehaus.janino.JavaSourceClassLoader: void <init>(java.lang.ClassLoader,java.io.File[],java.lang.String,org.codehaus.janino.util.enumerator.EnumeratorSet)>
<org.sunflow.core.renderer.ProgressiveRenderer: void <init>()>
<org.codehaus.janino.Scanner$Token: java.lang.Object getLiteralValue()>
<org.codehaus.janino.Java$ClassDeclaration: void addConstructor(org.codehaus.janino.Java$ConstructorDeclarator)>
<org.sunflow.Benchmark: void kernelEnd()>
<org.sunflow.SunflowAPI: org.sunflow.core.Options lookupOptions(java.lang.String)>
<org.sunflow.core.light.TriangleMeshLight: org.sunflow.math.Point3 access$400(org.sunflow.core.light.TriangleMeshLight,int)>
<org.codehaus.janino.JavaSourceIClassLoader: void <init>(org.codehaus.janino.util.resource.ResourceFinder,java.lang.String,java.util.Set,org.codehaus.janino.IClassLoader)>
<org.codehaus.janino.Scanner$Token: boolean isOperator(java.lang.String)>
<org.codehaus.janino.Cookable: void <init>()>
<org.codehaus.janino.Scanner: void <init>(java.lang.String,java.io.InputStream)>
<org.codehaus.janino.samples.DeclarationCounter: void main(java.lang.String[])>
<org.codehaus.janino.samples.DemoBase: java.lang.Class class$(java.lang.String)>
<org.sunflow.math.Point3: org.sunflow.math.Vector3 normal(org.sunflow.math.Point3,org.sunflow.math.Point3,org.sunflow.math.Point3)>
<org.sunflow.RenderObjectMap$RenderObjectHandle: org.sunflow.core.Camera access$1600(org.sunflow.RenderObjectMap$RenderObjectHandle)>
<org.codehaus.janino.tools.Disassembler$10: void <init>(short,short,org.codehaus.janino.tools.Disassembler)>
<org.sunflow.core.Instance: int getNumPrimitives()>
<org.codehaus.janino.Java$NewClassInstance: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Rvalue,org.codehaus.janino.Java$Type,org.codehaus.janino.Java$Rvalue[])>
<org.codehaus.janino.util.ClassFile$AttributeInfo: void store(java.io.DataOutputStream)>
<org.sunflow.math.Matrix4: org.sunflow.math.Matrix4 rotateZ(float)>
<org.sunflow.RenderObjectMap$RenderObjectHandle: void <init>(org.sunflow.core.Options)>
<org.sunflow.core.Options: void <init>()>
<org.codehaus.janino.Parser: void verifyStringIsConventionalPackageName(java.lang.String,org.codehaus.janino.Location)>
<org.sunflow.system.Parser: java.lang.String fetchNextToken()>
<org.codehaus.janino.Scanner: void readNextChar()>
<org.sunflow.core.InstanceList: void <init>(org.sunflow.core.Instance[])>
<org.sunflow.system.Timer: long nanos()>
<org.codehaus.janino.ScriptEvaluator: void setMethodName(java.lang.String)>
<org.codehaus.janino.Java$ThrowStatement: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Rvalue)>
<org.sunflow.RenderObjectMap$RenderObjectHandle: void <init>(org.sunflow.core.Tesselatable,org.sunflow.RenderObjectMap$1)>
<org.codehaus.janino.Java$BooleanRvalue: void <init>(org.codehaus.janino.Location)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Statement parseContinueStatement()>
<org.codehaus.janino.util.Traverser: void traverseCompilationUnit(org.codehaus.janino.Java$CompilationUnit)>
<org.sunflow.SunflowAPI: org.sunflow.SunflowAPI create(java.lang.String,int)>
<SunflowGUI$4: void <init>(SunflowGUI)>
<org.sunflow.SunflowAPI: org.sunflow.core.Camera lookupCamera(java.lang.String)>
<org.sunflow.util.FastHashMap$Entry: void <init>(java.lang.Object,java.lang.Object,org.sunflow.util.FastHashMap$1)>
<org.sunflow.core.shader.GlassShader: void <init>()>
<org.sunflow.core.display.FileDisplay: void <init>(boolean)>
<org.codehaus.janino.Parser: void verifyIdentifierIsConventionalLocalVariableOrParameterName(java.lang.String,org.codehaus.janino.Location)>
<org.codehaus.janino.Compiler$SimpleWarningHandler: void <init>()>
<org.sunflow.Benchmark: int access$100(org.sunflow.Benchmark)>
<org.codehaus.janino.Java$Located: void throwParseException(java.lang.String)>
<org.codehaus.janino.tools.Disassembler$8: void <init>(long,org.codehaus.janino.tools.Disassembler)>
<org.codehaus.janino.samples.ScriptDemo: void main(java.lang.String[])>
<org.codehaus.janino.util.resource.PathResourceFinder: java.util.Iterator createIterator(java.util.Iterator)>
<org.codehaus.janino.Scanner: org.codehaus.janino.Scanner$LiteralToken stringToDoubleLiteralToken(java.lang.String)>
<org.sunflow.system.Timer: double seconds()>
<org.codehaus.janino.util.StringPattern: void <init>(java.lang.String)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Atom parseEqualityExpression()>
<org.sunflow.RenderObjectMap: org.sunflow.core.LightSource lookupLight(java.lang.String)>
<org.sunflow.util.FloatArray: float[] trim()>
<org.codehaus.janino.util.iterator.DirectoryIterator: java.util.Iterator traverseDirectories(java.io.File[],java.io.FilenameFilter,java.io.FilenameFilter)>
<org.codehaus.janino.Java$AbstractTypeDeclaration: void <init>(org.codehaus.janino.Location,short)>
<org.codehaus.janino.Java$Located: void <init>(org.codehaus.janino.Location)>
<org.sunflow.core.Geometry: void <init>(org.sunflow.core.Tesselatable)>
<org.sunflow.RenderObjectMap$RenderObjectHandle: org.sunflow.core.Instance access$200(org.sunflow.RenderObjectMap$RenderObjectHandle)>
<org.codehaus.janino.ClassLoaderIClassLoader: void <init>(java.lang.ClassLoader)>
<org.codehaus.janino.Java$BasicType: void <init>(org.codehaus.janino.Location,int)>
<org.codehaus.janino.Java$InterfaceDeclaration: void <init>(org.codehaus.janino.Location,java.lang.String,short,java.lang.String,org.codehaus.janino.Java$Type[])>
<org.sunflow.Benchmark$BenchmarkScene: void build()>
<org.sunflow.Benchmark: boolean access$000(org.sunflow.Benchmark)>
<org.sunflow.SunflowAPI: org.sunflow.core.Geometry lookupGeometry(java.lang.String)>
<org.sunflow.core.Geometry: org.sunflow.math.BoundingBox getWorldBounds(org.sunflow.math.Matrix4)>
<org.codehaus.janino.Java$FieldDeclaration: void <init>(org.codehaus.janino.Location,java.lang.String,short,org.codehaus.janino.Java$Type,org.codehaus.janino.Java$VariableDeclarator[])>
<org.sunflow.system.UI: void verbosity(int)>
<org.codehaus.janino.Java$ClassDeclaration: void addVariableDeclaratorOrInitializer(org.codehaus.janino.Java$TypeBodyDeclaration)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Statement parseDoStatement()>
<org.codehaus.janino.Java$MemberClassDeclaration: void <init>(org.codehaus.janino.Location,java.lang.String,short,java.lang.String,org.codehaus.janino.Java$Type,org.codehaus.janino.Java$Type[])>
<org.sunflow.core.Instance: org.sunflow.core.PrimitiveList getBakingPrimitives()>
<org.sunflow.RenderObjectMap$RenderObjectHandle: org.sunflow.core.Modifier getModifier()>
<org.codehaus.janino.Parser: boolean peekIdentifier()>
<org.codehaus.janino.JavaSourceClassLoader: void <init>(java.lang.ClassLoader,org.codehaus.janino.util.resource.ResourceFinder,java.lang.String,org.codehaus.janino.util.enumerator.EnumeratorSet)>
<org.codehaus.janino.ScriptEvaluator: void setParameters(java.lang.String[][],java.lang.Class[][])>
<org.codehaus.janino.util.Benchmark: void <init>(boolean)>
<org.sunflow.core.tesselatable.Gumbo: void <init>()>
<org.sunflow.core.ParameterList: void addString(java.lang.String,java.lang.String)>
<org.sunflow.core.ParameterList: void addFloat(java.lang.String,float)>
<org.codehaus.janino.Java$ClassDeclaration: void <init>(org.codehaus.janino.Location,short)>
<org.sunflow.core.ParameterList$Parameter: void <init>(float)>
<org.sunflow.SunflowAPI: void geometry(java.lang.String,org.sunflow.core.Tesselatable)>
<org.codehaus.janino.ClassBodyEvaluator: void setDefaultImports(java.lang.String[])>
<org.codehaus.janino.samples.ScriptDemo: void usage()>
<org.codehaus.janino.ClassBodyEvaluator: void <init>(java.lang.String)>
<org.codehaus.janino.tools.Disassembler$SourceRelatedAttributeInfo: void <init>()>
<org.codehaus.janino.SimpleCompiler: java.lang.Class class$(java.lang.String)>
<org.sunflow.system.Parser: float getNextFloat()>
<org.codehaus.janino.samples.ClassBodyDemo: java.lang.String readFileToString(java.lang.String)>
<org.codehaus.janino.Parser: boolean peekKeyword(java.lang.String[])>
<org.codehaus.janino.UnitCompiler: void setCompileErrorHandler(org.codehaus.janino.UnitCompiler$ErrorHandler)>
<org.codehaus.janino.ScriptEvaluator: org.codehaus.janino.Java$Block addMethodDeclarationAndBlock(org.codehaus.janino.Location,org.codehaus.janino.Java$ClassDeclaration,boolean,java.lang.Class,java.lang.String,java.lang.Class[],java.lang.String[],java.lang.Class[])>
<org.codehaus.janino.tools.HprofScrubber$Sample: void <init>(int,int)>
<org.sunflow.core.ParameterList: void clear(boolean)>
<org.codehaus.janino.IClass: org.codehaus.janino.IClass getArrayIClass2(org.codehaus.janino.IClass)>
<org.sunflow.system.ui.SilentInterface: void <init>()>
<org.sunflow.core.ParameterList: void addInteger(java.lang.String,int)>
<SunflowGUI$3: void <init>(SunflowGUI)>
<org.sunflow.core.ParameterList: org.sunflow.math.Vector3 getVector(java.lang.String,org.sunflow.math.Vector3)>
<org.sunflow.SunflowAPI: void parameter(java.lang.String,org.sunflow.math.Point3)>
<org.codehaus.janino.ScriptEvaluator: void <init>(java.lang.String,java.lang.Class,java.lang.String[],java.lang.Class[])>
<org.codehaus.janino.util.Benchmark: void endReporting(java.lang.String)>
<org.sunflow.SunflowAPI: void setCurrentFrame(int)>
<org.codehaus.janino.util.enumerator.EnumeratorSet: java.util.Map getNamedEnumeratorSets(java.lang.Class)>
<org.codehaus.janino.Scanner$Token: void <init>(org.codehaus.janino.Scanner,org.codehaus.janino.Scanner$1)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$BlockStatement parseBlockStatement()>
<org.sunflow.core.ParameterList$Parameter: org.sunflow.math.Vector3 getVector()>
<org.sunflow.SunflowAPI: void runSystemCheck()>
<org.sunflow.system.Parser: boolean peekNextToken(java.lang.String)>
<org.sunflow.RenderObjectMap$RenderObjectHandle: org.sunflow.core.Shader access$100(org.sunflow.RenderObjectMap$RenderObjectHandle)>
<org.codehaus.janino.CompileException: java.lang.String getMessage()>
<org.sunflow.core.display.ImgPipeDisplay: void <init>()>
<org.sunflow.math.Matrix4: float[] asRowMajor()>
<SunflowGUI$11: void <init>(SunflowGUI)>
<org.codehaus.janino.Java$ArrayAccessExpression: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Rvalue,org.codehaus.janino.Java$Rvalue)>
<org.codehaus.janino.Java$CompilationUnit$TypeImportOnDemandDeclaration: void <init>(org.codehaus.janino.Location,java.lang.String[])>
<org.sunflow.RenderObjectMap: void put(java.lang.String,org.sunflow.core.Instance)>
<org.sunflow.core.ParameterList$Parameter: boolean access$1300(org.sunflow.core.ParameterList$Parameter)>
<org.codehaus.janino.tools.HprofScrubber: void main(java.lang.String[])>
<org.sunflow.core.shader.AmbientOcclusionShader: void <init>(org.sunflow.image.Color,float)>
<org.codehaus.janino.Compiler: boolean compile(org.codehaus.janino.util.resource.Resource[])>
<org.codehaus.janino.Java$NamedClassDeclaration: void <init>(org.codehaus.janino.Location,java.lang.String,short,java.lang.String,org.codehaus.janino.Java$Type,org.codehaus.janino.Java$Type[])>
<org.sunflow.SunflowAPI: void <init>()>
<org.sunflow.core.light.TriangleMeshLight: void <init>()>
<SunflowGUI$19: void <init>(SunflowGUI)>
<org.codehaus.janino.tools.Disassembler$18: void <init>(java.lang.String,java.io.ByteArrayOutputStream,org.codehaus.janino.tools.Disassembler)>
<org.codehaus.janino.samples.DemoBase: java.lang.Class stringToType(java.lang.String)>
<org.codehaus.janino.Java$EmptyStatement: void <init>(org.codehaus.janino.Location)>
<org.sunflow.system.ImagePanel$ScrollZoomListener: void <init>(org.sunflow.system.ImagePanel,org.sunflow.system.ImagePanel$1)>
<org.codehaus.janino.UnitCompiler: void <init>(org.codehaus.janino.Java$CompilationUnit,org.codehaus.janino.IClassLoader)>
<org.codehaus.janino.ScriptEvaluator$1$MethodWrapper: void <init>(java.lang.String,java.lang.Class[])>
<org.sunflow.util.FloatArray: void <init>()>
<org.codehaus.janino.ScriptEvaluator: java.lang.Class getDefaultReturnType()>
<org.codehaus.janino.util.StringPattern: void <init>(int,java.lang.String)>
<org.codehaus.janino.Compiler$CompilerIClassLoader: void <init>(org.codehaus.janino.Compiler,org.codehaus.janino.util.resource.ResourceFinder,org.codehaus.janino.IClassLoader)>
<org.codehaus.janino.Java$ConstructorDeclarator: void <init>(org.codehaus.janino.Location,java.lang.String,short,org.codehaus.janino.Java$FunctionDeclarator$FormalParameter[],org.codehaus.janino.Java$Type[],org.codehaus.janino.Java$ConstructorInvocation,org.codehaus.janino.Java$Block)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Atom parseConditionalExpression()>
<org.codehaus.janino.Scanner$KeywordToken: void <init>(org.codehaus.janino.Scanner,java.lang.String)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$CompilationUnit$ImportDeclaration parseImportDeclaration()>
<org.codehaus.janino.Scanner: void <init>(java.lang.String,java.io.Reader)>
<org.sunflow.math.OrthoNormalBasis: org.sunflow.math.OrthoNormalBasis makeFromW(org.sunflow.math.Vector3)>
<org.codehaus.janino.UnparseVisitor: void main(java.lang.String[])>
<org.sunflow.RenderObjectMap$RenderObjectHandle: org.sunflow.core.Options access$1700(org.sunflow.RenderObjectMap$RenderObjectHandle)>
<org.sunflow.RenderObjectMap: void put(java.lang.String,org.sunflow.core.Shader)>
<org.codehaus.janino.Java$FunctionDeclarator$FormalParameter: void <init>(org.codehaus.janino.Location,boolean,org.codehaus.janino.Java$Type,java.lang.String)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Statement parseForStatement()>
<SunflowGUI: void usage(boolean)>
<org.codehaus.janino.Parser: void readOperator(java.lang.String)>
<org.codehaus.janino.Scanner: org.codehaus.janino.Scanner$LiteralToken stringToLongLiteralToken(java.lang.String,int)>
<org.sunflow.core.display.FrameDisplay: void <init>(java.lang.String)>
<org.codehaus.janino.Scanner: short access$2(org.codehaus.janino.Scanner)>
<org.sunflow.core.photonmap.GridPhotonMap: void <init>(int,int,float)>
<org.sunflow.core.Scene: void render(org.sunflow.core.Options,org.sunflow.core.ImageSampler,org.sunflow.core.Display)>
<org.codehaus.janino.tools.Disassembler$IndentPrintWriter: void indent()>
<org.codehaus.janino.util.iterator.DirectoryIterator$1: void <init>(java.io.FilenameFilter,java.io.FilenameFilter,java.io.File)>
<SunflowGUI: void main(java.lang.String[])>
<org.sunflow.core.tesselatable.BezierMesh: void <init>(float[][])>
<org.codehaus.janino.tools.Disassembler: void println()>
<org.sunflow.system.SearchPath: java.lang.String resolvePath(java.lang.String)>
<SunflowGUI$22: void <init>(SunflowGUI)>
<org.codehaus.janino.tools.Disassembler: void printConstantPoolEntry(java.lang.String,short)>
<org.sunflow.image.Color: void <init>(float,float,float)>
<org.codehaus.janino.Java: void access$0(org.codehaus.janino.Java$ArrayInitializerOrRvalue,org.codehaus.janino.Java$BlockStatement)>
<org.sunflow.core.ParameterList$FloatParameter: void <init>()>
<org.codehaus.janino.util.ClassFile: java.lang.String getClassFileResourceName(java.lang.String)>
<org.codehaus.janino.util.ClassFile$ConstantUtf8Info: java.lang.String access$0(org.codehaus.janino.util.ClassFile$ConstantUtf8Info)>
<org.sunflow.system.SearchPath: void <init>(java.lang.String)>
<org.codehaus.janino.ClassBodyEvaluator: void setExtendedType(java.lang.Class)>
<org.codehaus.janino.util.Benchmark: void begin()>
<org.codehaus.janino.ClassBodyEvaluator: java.lang.Object createFastClassBodyEvaluator(org.codehaus.janino.Scanner,java.lang.String,java.lang.Class,java.lang.Class[],java.lang.ClassLoader)>
<org.sunflow.RenderObjectMap$RenderObjectHandle: java.lang.String access$500(org.sunflow.RenderObjectMap$RenderObjectHandle)>
<org.codehaus.janino.Scanner: char unescapeCharacterLiteral()>
<org.codehaus.janino.UnitCompiler: void compile(org.codehaus.janino.Java$TypeDeclaration)>
<org.sunflow.core.light.TriangleMeshLight$TriangleLight: void <init>(org.sunflow.core.light.TriangleMeshLight,int)>
<org.sunflow.SunflowAPI: org.sunflow.core.Shader lookupShader(java.lang.String)>
<SunflowGUI: void initGUI()>
<org.sunflow.core.LightServer: boolean calculatePhotons(org.sunflow.core.PhotonStore,java.lang.String,int)>
<org.codehaus.janino.Scanner$Token: java.lang.String getIdentifier()>
<org.codehaus.janino.tools.JGrep: void jGrep(java.io.File[],org.codehaus.janino.util.StringPattern[],org.codehaus.janino.util.StringPattern[],java.util.List)>
<org.sunflow.core.LightServer$1: void run()>
<org.sunflow.SunflowAPI: void light(java.lang.String,org.sunflow.core.LightSource)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Statement parseExpressionStatement()>
<org.codehaus.janino.Compiler: org.codehaus.janino.Java$CompilationUnit parseCompilationUnit(java.lang.String,java.io.InputStream,java.lang.String)>
<SunflowGUI$10: void <init>(SunflowGUI)>
<org.codehaus.janino.tools.HprofScrubber$1: void <init>()>
<org.codehaus.janino.JavaSourceClassLoader: void main(java.lang.String[])>
<org.codehaus.janino.Java$EnclosingScopeOfTypeDeclaration: void <init>(org.codehaus.janino.Java$TypeDeclaration)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Atom parseInclusiveOrExpression()>
<org.codehaus.janino.tools.Disassembler$LocalVariableTableAttribute: void <init>(org.codehaus.janino.tools.Disassembler,short[])>
<org.codehaus.janino.Java$SuperclassMethodInvocation: void <init>(org.codehaus.janino.Location,java.lang.String,org.codehaus.janino.Java$Rvalue[])>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Statement parseSynchronizedStatement()>
<org.sunflow.core.gi.FakeGIEngine: void <init>(org.sunflow.core.Options)>
<org.sunflow.math.MathUtils: int clamp(int,int,int)>
<org.sunflow.Benchmark$BenchmarkScene: void buildCornellBox()>
<org.codehaus.janino.tools.JGrep: java.lang.String readIdentifierPattern(org.codehaus.janino.Parser)>
<org.codehaus.janino.Java$Crement: void <init>(org.codehaus.janino.Location,java.lang.String,org.codehaus.janino.Java$Lvalue)>
<org.codehaus.janino.Parser: short parseModifiersOpt()>
<org.sunflow.core.ParameterList$Parameter: int access$2200(org.sunflow.core.ParameterList$Parameter)>
<org.codehaus.janino.Cookable: void cook(java.io.Reader)>
<org.sunflow.core.ParameterList$Parameter: float access$1400(org.sunflow.core.ParameterList$Parameter)>
<org.codehaus.janino.util.resource.DirectoryResourceFinder: void <init>(java.io.File)>
<org.codehaus.janino.Java$WhileStatement: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Rvalue,org.codehaus.janino.Java$BlockStatement)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Atom parseAssignmentExpression()>
<org.codehaus.janino.Java$SuperConstructorInvocation: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Rvalue,org.codehaus.janino.Java$Rvalue[])>
<org.codehaus.janino.Parser: java.lang.String[] parseQualifiedIdentifier()>
<org.sunflow.system.UI: void set(org.sunflow.system.UserInterface)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Atom parseSelector(org.codehaus.janino.Java$Atom)>
<org.sunflow.math.Matrix4: org.sunflow.math.Matrix4 scale(float)>
<org.codehaus.janino.tools.JGrep: void <init>(java.io.File[],java.io.File[],java.io.File[],java.lang.String,boolean)>
<org.sunflow.SunflowAPI: boolean parse(java.lang.String)>
<org.codehaus.janino.UnitCompiler$1: void <init>(org.codehaus.janino.UnitCompiler)>
<org.codehaus.janino.Cookable: void cook(java.lang.String,java.io.InputStream)>
<org.codehaus.janino.Java$NewAnonymousClassInstance: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Rvalue,org.codehaus.janino.Java$AnonymousClassDeclaration,org.codehaus.janino.Java$Rvalue[])>
<org.sunflow.Benchmark: void kernelMain()>
<org.sunflow.core.Geometry: org.sunflow.core.PrimitiveList getBakingPrimitives()>
<org.sunflow.core.primitive.TriangleMesh: void setSmallTriangles(boolean)>
<org.codehaus.janino.tools.Disassembler: org.codehaus.janino.tools.Disassembler$AttributeInfo readAttributeInfo(java.io.DataInputStream)>
<org.codehaus.janino.ScriptEvaluator: void setParameters(java.lang.String[],java.lang.Class[])>
<org.codehaus.janino.Java$CatchClause: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$FunctionDeclarator$FormalParameter,org.codehaus.janino.Java$Block)>
<org.codehaus.janino.UnparseVisitor: void unparse(org.codehaus.janino.Java$CompilationUnit,java.io.Writer)>
<org.codehaus.janino.ClassBodyEvaluator: void <init>()>
<org.sunflow.image.Color: org.sunflow.image.Color copy()>
<org.codehaus.janino.tools.Disassembler$12: void <init>(short,org.codehaus.janino.tools.Disassembler)>
<org.codehaus.janino.ResourceFinderIClassLoader: void <init>(org.codehaus.janino.util.resource.ResourceFinder,org.codehaus.janino.IClassLoader)>
<org.codehaus.janino.tools.Disassembler$2: void <init>(short,short,org.codehaus.janino.tools.Disassembler)>
<org.sunflow.RenderObjectMap: boolean update(java.lang.String,org.sunflow.core.ParameterList,org.sunflow.SunflowAPI)>
<org.codehaus.janino.util.ClassFile: org.codehaus.janino.util.ClassFile$ConstantPoolInfo getConstantPoolInfo(short)>
<SunflowGUI$1: void <init>(SunflowGUI)>
<org.codehaus.janino.ScriptEvaluator: java.lang.reflect.Method getMethod()>
<org.codehaus.janino.Descriptor: java.lang.String getComponentDescriptor(java.lang.String)>
<org.sunflow.core.primitive.Sphere: void <init>()>
<org.codehaus.janino.Descriptor: boolean isPrimitive(java.lang.String)>
<org.sunflow.core.Scene: int getThreadPriority()>
<SunflowGUI$9: void <init>(SunflowGUI)>
<org.sunflow.system.Parser$ParserException: void <init>(java.lang.String,java.lang.String,org.sunflow.system.Parser$1)>
<org.sunflow.core.tesselatable.Gumbo: float[] parseFloatArray(org.sunflow.system.Parser)>
<org.codehaus.janino.tools.Disassembler$ConstantUtf8Info: java.lang.String getValue()>
<org.sunflow.RenderObjectMap$RenderObjectHandle: void <init>(org.sunflow.core.PrimitiveList)>
<org.sunflow.core.LightServer: boolean build(org.sunflow.core.Options)>
<org.sunflow.core.Instance: org.sunflow.math.BoundingBox getBounds()>
<org.codehaus.janino.util.iterator.TransformingIterator: void <init>(java.util.Iterator)>
<org.codehaus.janino.Java$RvalueMemberType: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Rvalue,java.lang.String)>
<org.codehaus.janino.Java$CompilationUnit: void addImportDeclaration(org.codehaus.janino.Java$CompilationUnit$ImportDeclaration)>
<org.codehaus.janino.util.ClassFile$ConstantClassInfo: short access$0(org.codehaus.janino.util.ClassFile$ConstantClassInfo)>
<org.sunflow.RenderObjectMap: org.sunflow.core.Geometry lookupGeometry(java.lang.String)>
<org.sunflow.SunflowAPI: void parameter(java.lang.String,java.lang.String,java.lang.String,float[])>
<org.codehaus.janino.tools.JGrep: org.codehaus.janino.Java$CompilationUnit parseCompilationUnit(java.io.File,java.lang.String)>
<org.codehaus.janino.Scanner$LocatedException: void <init>(java.lang.String,org.codehaus.janino.Location)>
<SunflowGUI$17: void <init>(SunflowGUI)>
<org.codehaus.janino.util.ClassFile: void storeMethods(java.io.DataOutputStream,java.util.List)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$PackageDeclaration parsePackageDeclaration()>
<org.codehaus.janino.IClassLoader: void postConstruct()>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Atom parseLiteral()>
<org.codehaus.janino.util.Benchmark: void endReporting()>
<org.codehaus.janino.Scanner$Token: java.lang.String getKeyword()>
<org.codehaus.janino.ScriptEvaluator: void setMethodNames(java.lang.String[])>
<org.codehaus.janino.CachingJavaSourceClassLoader: void <init>(java.lang.ClassLoader,org.codehaus.janino.util.resource.ResourceFinder,java.lang.String,org.codehaus.janino.util.resource.ResourceFinder,org.codehaus.janino.util.resource.ResourceCreator,org.codehaus.janino.util.enumerator.EnumeratorSet)>
<org.sunflow.RenderObjectMap$RenderObjectHandle: org.sunflow.core.LightSource getLight()>
<org.codehaus.janino.ClassBodyEvaluator: java.lang.Class getClazz()>
<org.codehaus.janino.Java$PackageMemberClassDeclaration: void <init>(org.codehaus.janino.Location,java.lang.String,short,java.lang.String,org.codehaus.janino.Java$Type,org.codehaus.janino.Java$Type[])>
<org.codehaus.janino.Java$Statement: void setEnclosingScope(org.codehaus.janino.Java$Scope)>
<org.codehaus.janino.Java$Invocation: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Rvalue[])>
<org.sunflow.Benchmark: void main(java.lang.String[])>
<org.codehaus.janino.Scanner$Token: boolean isIdentifier(java.lang.String)>
<org.sunflow.SunflowAPI: void instance(java.lang.String,java.lang.String)>
<org.codehaus.janino.Scanner$ScanException: void <init>(org.codehaus.janino.Scanner,java.lang.String)>
<org.sunflow.core.ParameterList$InterpolationType: org.sunflow.core.ParameterList$InterpolationType valueOf(java.lang.String)>
<org.codehaus.janino.CompileException: void <init>(java.lang.String,org.codehaus.janino.Location)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$InterfaceDeclaration parseInterfaceDeclarationRest(java.lang.String,short,org.codehaus.janino.Parser$InterfaceDeclarationContext)>
<org.sunflow.SunflowAPI: void parameter(java.lang.String,float)>
<org.codehaus.janino.tools.JGrep$3: void <init>(org.codehaus.janino.util.StringPattern[])>
<org.sunflow.RenderObjectMap$RenderObjectHandle: void <init>(org.sunflow.core.Options,org.sunflow.RenderObjectMap$1)>
<org.codehaus.janino.ClassBodyEvaluator: void setImplementedTypes(java.lang.Class[])>
<org.sunflow.util.FastHashMap$EntryIterator: boolean readable()>
<org.sunflow.SunflowAPI: void parameter(java.lang.String,boolean)>
<org.sunflow.core.Camera: void <init>(org.sunflow.core.CameraLens)>
<org.codehaus.janino.Scanner$OperatorToken: void <init>(org.codehaus.janino.Scanner,org.codehaus.janino.Scanner$1,java.lang.String)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Statement parseWhileStatement()>
<org.sunflow.core.Scene: int getThreads()>
<org.sunflow.core.Instance: void updateBounds()>
<org.codehaus.janino.Java$Atom: org.codehaus.janino.Java$Type toTypeOrPE()>
<org.codehaus.janino.Java$BreakableStatement: void <init>(org.codehaus.janino.Location)>
<org.sunflow.core.photonmap.GridPhotonMap: void store(org.sunflow.core.ShadingState,org.sunflow.math.Vector3,org.sunflow.image.Color,org.sunflow.image.Color)>
<org.sunflow.math.Matrix4: void <init>()>
<org.sunflow.SunflowAPI: void shaderOverride(java.lang.String,boolean)>
<org.codehaus.janino.tools.Disassembler: java.lang.String decodeAccess(short)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$VariableDeclarator[] parseFieldDeclarationRest(java.lang.String)>
<org.sunflow.core.ParameterList$Parameter: boolean access$000(org.sunflow.core.ParameterList$Parameter)>
<org.sunflow.RenderObjectMap$RenderObjectHandle: void <init>(org.sunflow.core.Shader)>
<org.sunflow.util.FastHashMap: void clear()>
<org.codehaus.janino.tools.Disassembler: void unindent(java.lang.String)>
<org.codehaus.janino.tools.Disassembler: void setSourceDirectory(java.io.File)>
<org.sunflow.util.FastHashMap$Entry: boolean access$000(org.sunflow.util.FastHashMap$Entry)>
<org.codehaus.janino.Java$CompilationUnit: void <init>(java.lang.String)>
<org.codehaus.janino.ScriptEvaluator: void setReturnTypes(java.lang.Class[])>
<org.codehaus.janino.util.iterator.FilterIterator: void <init>(java.util.Iterator)>
<org.sunflow.system.BenchmarkFramework: void <init>(int,int)>
<org.codehaus.janino.Java$ArrayType: void <init>(org.codehaus.janino.Java$Type)>
<org.codehaus.janino.Java$ThisReference: void <init>(org.codehaus.janino.Location)>
<org.sunflow.core.ParameterList: java.lang.String getString(java.lang.String,java.lang.String)>
<org.sunflow.util.FloatArray: void add(float)>
<org.codehaus.janino.tools.Disassembler: void unindentln(java.lang.String)>
<org.codehaus.janino.Scanner: java.lang.String doc()>
<org.sunflow.system.Parser$ParserException: void <init>(java.lang.String,java.lang.String)>
<org.codehaus.janino.tools.Disassembler: void disasmClassFile(java.io.DataInputStream)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$VariableDeclarator[] parseLocalVariableDeclarators()>
<org.codehaus.janino.Java$SwitchStatement$SwitchBlockStatementGroup: void <init>(org.codehaus.janino.Location,java.util.List,boolean,java.util.List)>
<org.codehaus.janino.ByteArrayClassLoader: void <init>(java.util.Map,java.lang.ClassLoader)>
<SunflowGUI$16: void <init>(SunflowGUI)>
<org.codehaus.janino.Java$NewArray: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Type,org.codehaus.janino.Java$Rvalue[],int)>
<org.sunflow.core.Scene: void setInstanceLists(org.sunflow.core.Instance[],org.sunflow.core.Instance[])>
<org.codehaus.janino.tools.Disassembler: void setVerbose(boolean)>
<org.sunflow.RenderObjectMap: org.sunflow.core.Instance lookupInstance(java.lang.String)>
<org.codehaus.janino.UnitCompiler: void setWarningHandler(org.codehaus.janino.WarningHandler)>
<org.sunflow.core.tesselatable.Teapot: void <init>()>
<org.sunflow.math.Matrix4: float transformPX(float,float,float)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Atom parseRelationalExpression()>
<org.codehaus.janino.ScriptEvaluator: java.lang.Object createFastScriptEvaluator(java.lang.String,java.lang.Class,java.lang.String[])>
<org.codehaus.janino.tools.Disassembler: org.codehaus.janino.tools.Disassembler$MethodInfo readMethodInfo(java.io.DataInputStream)>
<org.codehaus.janino.Java$NamedClassDeclaration: java.lang.String getName()>
<org.codehaus.janino.tools.JGrep$1: void <init>()>
<org.codehaus.janino.tools.Disassembler: void setOut(java.io.OutputStream)>
<org.sunflow.RenderObjectMap$RenderObjectHandle: org.sunflow.RenderObjectMap$RenderObjectType access$000(org.sunflow.RenderObjectMap$RenderObjectHandle)>
<org.codehaus.janino.Java$ConditionalExpression: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Rvalue,org.codehaus.janino.Java$Rvalue,org.codehaus.janino.Java$Rvalue)>
<org.sunflow.RenderObjectMap$RenderObjectHandle: void <init>(org.sunflow.core.Tesselatable)>
<org.sunflow.RealtimeBenchmark: void <init>(boolean,int)>
<org.codehaus.janino.Scanner: short access$1(org.codehaus.janino.Scanner)>
<org.codehaus.janino.Scanner$KeywordToken: void <init>(org.codehaus.janino.Scanner,org.codehaus.janino.Scanner$1,java.lang.String)>
<org.codehaus.janino.tools.Disassembler$14: void <init>(short[],org.codehaus.janino.tools.Disassembler)>
<org.codehaus.janino.ScriptEvaluator: java.lang.reflect.Method getMethod(int)>
<org.sunflow.core.ParameterList: void addStringArray(java.lang.String,java.lang.String[])>
<org.sunflow.SunflowAPI: void parameter(java.lang.String,org.sunflow.math.Vector3)>
<org.codehaus.janino.Java$CompilationUnit$StaticImportOnDemandDeclaration: void <init>(org.codehaus.janino.Location,java.lang.String[])>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$ArrayInitializer parseArrayInitializer()>
<org.sunflow.core.ParameterList$Parameter: void <init>(java.lang.String[],org.sunflow.core.ParameterList$1)>
<org.codehaus.janino.Parser: void throwParseException(java.lang.String)>
<org.sunflow.core.shader.NormalShader: void <init>()>
<org.sunflow.core.ParameterList$Parameter: void <init>(org.sunflow.core.ParameterList$ParameterType,org.sunflow.core.ParameterList$InterpolationType,float[])>
<org.sunflow.core.ParameterList$Parameter: void <init>(int)>
<org.codehaus.janino.Parser: java.util.List parseBlockStatements()>
<org.codehaus.janino.Java$FunctionDeclarator: void <init>(org.codehaus.janino.Location,java.lang.String,short,org.codehaus.janino.Java$Type,java.lang.String,org.codehaus.janino.Java$FunctionDeclarator$FormalParameter[],org.codehaus.janino.Java$Type[],org.codehaus.janino.Java$Block)>
<org.codehaus.janino.UnitCompiler: org.codehaus.janino.util.ClassFile[] compileUnit(org.codehaus.janino.util.enumerator.EnumeratorSet)>
<org.codehaus.janino.Java$Atom: org.codehaus.janino.Java$Lvalue toLvalue()>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Atom parsePrimary()>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$MethodDeclarator parseMethodDeclarationRest(org.codehaus.janino.Java$AbstractTypeDeclaration,java.lang.String,short,org.codehaus.janino.Java$Type,java.lang.String)>
<org.codehaus.janino.SimpleCompiler: void setParentClassLoader(java.lang.ClassLoader)>
<org.codehaus.janino.tools.Disassembler$6: void <init>(int,org.codehaus.janino.tools.Disassembler)>
<org.sunflow.core.Geometry: void <init>(org.sunflow.core.PrimitiveList)>
<org.sunflow.core.ParameterList: org.sunflow.image.Color getColor(java.lang.String,org.sunflow.image.Color)>
<org.codehaus.janino.Scanner: void setWarningHandler(org.codehaus.janino.WarningHandler)>
<org.codehaus.janino.Compiler$1: void <init>()>
<org.sunflow.math.Vector3: org.sunflow.math.Vector3 normalize()>
<org.sunflow.Benchmark: void <init>(int,boolean,boolean,boolean)>
<org.codehaus.janino.IClassLoader: void <init>(org.codehaus.janino.IClassLoader)>
<org.codehaus.janino.ExpressionEvaluator: void setExpressionType(java.lang.Class)>
<org.codehaus.janino.tools.Disassembler$ConstantPoolInfo: int getSizeInConstantPool()>
<org.sunflow.core.primitive.TriangleMesh: void <init>()>
<org.codehaus.janino.Scanner$Token: boolean isKeyword(java.lang.String[])>
<org.codehaus.janino.util.Benchmark: long end()>
<org.sunflow.core.ParameterList$Parameter: java.lang.String getStringValue()>
<org.sunflow.core.ParameterList: void addMatrices(java.lang.String,org.sunflow.core.ParameterList$InterpolationType,float[])>
<org.sunflow.SunflowAPI: void shader(java.lang.String,org.sunflow.core.Shader)>
<org.codehaus.janino.Compiler: void <init>(org.codehaus.janino.util.resource.ResourceFinder,org.codehaus.janino.IClassLoader,org.codehaus.janino.util.resource.ResourceFinder,org.codehaus.janino.util.resource.ResourceCreator,java.lang.String,boolean,org.codehaus.janino.util.enumerator.EnumeratorSet,org.codehaus.janino.WarningHandler)>
<org.codehaus.janino.Compiler: void storeClassFile(org.codehaus.janino.util.ClassFile,java.io.File)>
<org.codehaus.janino.Parser: void verifyIdentifierIsConventionalFieldName(java.lang.String,org.codehaus.janino.Location)>
<org.codehaus.janino.Parser: boolean peekKeyword(java.lang.String)>
<org.codehaus.janino.util.ClassFile: byte[] toByteArray()>
<org.codehaus.janino.util.Benchmark: void report(java.lang.String)>
<org.sunflow.core.ParameterList: int getInt(java.lang.String,int)>
<org.sunflow.util.FastHashMap$Entry: void remove()>
<org.sunflow.math.Point3: void <init>()>
<org.codehaus.janino.ScriptEvaluator: void setStaticMethod(boolean)>
<org.sunflow.core.accel.KDTree: void setDumpMode(boolean,java.lang.String)>
<org.codehaus.janino.util.resource.PathResourceFinder: java.io.File[] parsePath(java.lang.String)>
<org.codehaus.janino.tools.HprofScrubber: void dumpSites(org.codehaus.janino.tools.HprofScrubber$Site[],java.util.Map)>
<org.codehaus.janino.IClassLoader: org.codehaus.janino.IClass loadIClass(java.lang.String)>
<org.sunflow.core.ParameterList$Parameter: int getIntValue()>
<org.sunflow.core.ParameterList: void addColor(java.lang.String,org.sunflow.image.Color)>
<org.codehaus.janino.Java$AbstractTypeDeclaration: org.codehaus.janino.Location getLocation()>
<org.sunflow.core.ParameterList$Parameter: int access$1100(org.sunflow.core.ParameterList$Parameter)>
<org.sunflow.system.ui.ConsoleInterface: void <init>()>
<org.sunflow.util.FastHashMap$Entry: java.lang.Object access$202(org.sunflow.util.FastHashMap$Entry,java.lang.Object)>
<org.codehaus.janino.IClass$1: void <init>(org.codehaus.janino.IClass,org.codehaus.janino.IClass)>
<org.sunflow.core.ParameterList$Parameter: org.sunflow.image.Color access$1500(org.sunflow.core.ParameterList$Parameter)>
<org.sunflow.math.Point3: org.sunflow.math.Vector3 sub(org.sunflow.math.Point3,org.sunflow.math.Point3,org.sunflow.math.Vector3)>
<org.sunflow.RenderObjectMap$RenderObjectHandle: void <init>(org.sunflow.core.Camera)>
<org.codehaus.janino.Parser: java.lang.String readOperator()>
<org.codehaus.janino.util.Benchmark: void beginReporting()>
<org.codehaus.janino.Scanner: org.codehaus.janino.Scanner$Token peekNextButOne()>
<org.sunflow.core.primitive.TriangleMesh: org.sunflow.math.Point3 getPoint(int)>
<org.sunflow.core.primitive.Plane: void <init>()>
<org.codehaus.janino.Java: void setEnclosingBlockStatement(org.codehaus.janino.Java$ArrayInitializerOrRvalue,org.codehaus.janino.Java$BlockStatement)>
<org.codehaus.janino.ClassBodyEvaluator: org.codehaus.janino.Java$CompilationUnit makeCompilationUnit(org.codehaus.janino.Scanner)>
<org.codehaus.janino.UnicodeUnescapeReader: void <init>(java.io.Reader)>
<org.sunflow.system.Timer: void end()>
<org.codehaus.janino.util.enumerator.Enumerator: java.util.Map getInstances(java.lang.Class)>
<org.codehaus.janino.Scanner$Token: boolean isEOF()>
<org.codehaus.janino.JavaSourceClassLoader: java.lang.Class class$(java.lang.String)>
<org.sunflow.util.FastHashMap$Entry: void access$400(org.sunflow.util.FastHashMap$Entry)>
<org.codehaus.janino.tools.HprofScrubber$Site: void <init>(int,int,int,java.lang.String)>
<org.codehaus.janino.tools.JGrep$2: void <init>()>
<org.sunflow.RenderObjectMap: org.sunflow.core.Camera lookupCamera(java.lang.String)>
<org.codehaus.janino.ScriptEvaluator: void setStaticMethod(boolean[])>
<org.codehaus.janino.ExpressionEvaluator: void <init>(java.lang.String,java.lang.Class,java.lang.String[],java.lang.Class[],java.lang.Class[],java.lang.ClassLoader)>
<org.codehaus.janino.Java$TryStatement: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$BlockStatement,java.util.List,org.codehaus.janino.Java$Block)>
<org.codehaus.janino.util.iterator.DirectoryIterator: java.util.ArrayList access$0(java.lang.Object)>
<org.codehaus.janino.Scanner$Token: boolean isIdentifier()>
<org.sunflow.core.ParameterList: void addPoints(java.lang.String,org.sunflow.core.ParameterList$InterpolationType,float[])>
<org.codehaus.janino.tools.JGrep$MethodInvocationTarget: void <init>()>
<org.sunflow.core.shader.DiffuseShader: void <init>()>
<SunflowGUI$6: void <init>(SunflowGUI)>
<org.sunflow.core.ParameterList$Parameter: void <init>(org.sunflow.core.ParameterList$ParameterType,org.sunflow.core.ParameterList$InterpolationType,float[],org.sunflow.core.ParameterList$1)>
<org.codehaus.janino.Scanner: void <init>(java.lang.String,java.io.Reader,short,short)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$CompilationUnit$ImportDeclaration parseImportDeclarationBody()>
<org.codehaus.janino.tools.Disassembler$4: void <init>(short,short,org.codehaus.janino.tools.Disassembler)>
<org.codehaus.janino.Java$ArrayInitializer: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$ArrayInitializerOrRvalue[])>
<org.codehaus.janino.Scanner: org.codehaus.janino.Scanner$LiteralToken stringToIntegerLiteralToken(java.lang.String,int)>
<org.codehaus.janino.tools.Disassembler: org.codehaus.janino.tools.Disassembler$ConstantPoolInfo getConstantPoolEntry(short)>
<org.codehaus.janino.tools.Disassembler: short[] readShortArray(java.io.DataInputStream,int)>
<org.codehaus.janino.util.iterator.DirectoryIterator: void <init>(java.io.File,java.io.FilenameFilter,java.io.FilenameFilter)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Statement parseStatement()>
<org.sunflow.core.ParameterList$FloatParameter: void <init>(org.sunflow.core.ParameterList$InterpolationType,float[])>
<org.sunflow.core.gi.InstantGI: void <init>(org.sunflow.core.Options)>
<org.sunflow.core.Geometry: int getNumPrimitives()>
<org.codehaus.janino.Scanner: java.lang.String getFileName()>
<org.codehaus.janino.util.enumerator.EnumeratorFormatException: void <init>(java.lang.String)>
<org.sunflow.RealtimeBenchmark: void createGeometry()>
<org.codehaus.janino.ScriptEvaluator: void setReturnType(java.lang.Class)>
<org.sunflow.core.tesselatable.Gumbo: void main(java.lang.String[])>
<org.codehaus.janino.tools.Disassembler$5: void <init>(short,org.codehaus.janino.tools.Disassembler)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Statement parseReturnStatement()>
<org.codehaus.janino.ExpressionEvaluator: java.lang.Object createFastExpressionEvaluator(org.codehaus.janino.Scanner,java.lang.String,java.lang.Class,java.lang.Class,java.lang.String[],java.lang.ClassLoader)>
<org.sunflow.core.Scene: void setBakingInstance(org.sunflow.core.Instance)>
<org.codehaus.janino.Java$AbstractTypeDeclaration: void throwParseException(java.lang.String)>
<org.codehaus.janino.util.AutoIndentWriter: void <init>(java.io.Writer)>
<org.codehaus.janino.Java$ContinuableStatement: void <init>(org.codehaus.janino.Location)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Atom parseConditionalOrExpression()>
<org.codehaus.janino.Java$Type: void <init>(org.codehaus.janino.Location)>
<org.sunflow.util.FastHashMap: org.sunflow.util.FastHashMap$Entry[] access$500(org.sunflow.util.FastHashMap)>
<org.sunflow.math.Point3: void <init>(float,float,float)>
<org.codehaus.janino.Scanner$Token: boolean isOperator(java.lang.String[])>
<org.codehaus.janino.Scanner: java.lang.String access$0(org.codehaus.janino.Scanner)>
<org.codehaus.janino.SimpleCompiler: void main(java.lang.String[])>
<org.sunflow.SunflowAPI: java.lang.String getUniqueName(java.lang.String)>
<org.sunflow.core.ParameterList$Parameter: void <init>(org.sunflow.image.Color)>
<org.sunflow.SunflowAPI: void parameter(java.lang.String,java.lang.String[])>
<org.codehaus.janino.samples.ShippingCost: void main(java.lang.String[])>
<org.codehaus.janino.util.iterator.IteratorCollection: void <init>(java.util.Iterator)>
<org.codehaus.janino.Java$Block: void addStatements(java.util.List)>
<org.codehaus.janino.tools.Disassembler$ConstantUtf8Info: void <init>(org.codehaus.janino.tools.Disassembler,java.lang.String)>
<org.codehaus.janino.util.resource.DirectoryResourceCreator: void <init>(java.io.File)>
<SunflowGUI: void <init>()>
<org.sunflow.core.camera.PinholeLens: void <init>()>
<org.codehaus.janino.tools.Disassembler: org.codehaus.janino.tools.Disassembler$ExceptionTableEntry[] readExceptionTable(java.io.DataInputStream)>
<org.sunflow.core.ParameterList$Parameter: org.sunflow.core.ParameterList$InterpolationType access$2100(org.sunflow.core.ParameterList$Parameter)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Atom parseShiftExpression()>
<org.codehaus.janino.util.Benchmark: void reportIndented(java.lang.String)>
<org.codehaus.janino.Java$QualifiedThisReference: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Type)>
<org.codehaus.janino.Scanner: void <init>(java.lang.String,java.io.InputStream,java.lang.String)>
<org.sunflow.math.Matrix4: org.sunflow.math.Matrix4 rotate(float,float,float,float)>
<org.sunflow.math.BoundingBox: void include(org.sunflow.math.BoundingBox)>
<org.sunflow.image.RGBSpace: void main(java.lang.String[])>
<org.codehaus.janino.Java$Atom: org.codehaus.janino.Java$Lvalue toLvalueOrPE()>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Atom parseUnaryExpression()>
<org.sunflow.core.display.OpenExrDisplay: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<org.sunflow.RenderObjectMap: void put(java.lang.String,org.sunflow.core.LightSource)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Statement parseBreakStatement()>
<org.codehaus.janino.util.resource.FileResourceCreator: void <init>()>
<org.codehaus.janino.ScriptEvaluator: java.lang.Object evaluate(int,java.lang.Object[])>
<org.codehaus.janino.samples.DemoBase: java.lang.String[] explode(java.lang.String)>
<org.codehaus.janino.samples.ExpressionDemo: void main(java.lang.String[])>
<SunflowGUI$5: void <init>(SunflowGUI)>
<org.codehaus.janino.Java$SynchronizedStatement: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Rvalue,org.codehaus.janino.Java$BlockStatement)>
<org.sunflow.Benchmark: int access$200(org.sunflow.Benchmark)>
<org.sunflow.core.accel.NullAccelerator: void <init>()>
<org.codehaus.janino.Java$UnaryOperation: void <init>(org.codehaus.janino.Location,java.lang.String,org.codehaus.janino.Java$Rvalue)>
<org.sunflow.math.BoundingBox: org.sunflow.math.Vector3 getExtents()>
<org.codehaus.janino.samples.ClassBodyDemo: void main(java.lang.String[])>
<org.codehaus.janino.Java$Located: org.codehaus.janino.Location getLocation()>
<org.sunflow.core.ParameterList$Parameter: void <init>(java.lang.String)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$ConstructorDeclarator parseConstructorDeclarator(org.codehaus.janino.Java$ClassDeclaration,java.lang.String,short)>
<org.sunflow.RenderObjectMap: void put(java.lang.String,org.sunflow.core.Options)>
<org.sunflow.system.RenderGlobalsPanel: void initGUI()>
<SunflowGUI$13: void <init>(SunflowGUI)>
<org.codehaus.janino.tools.Disassembler: void disasm(java.io.InputStream)>
<org.codehaus.janino.util.iterator.DirectoryIterator$1$State: void <init>(java.io.FilenameFilter,java.io.FilenameFilter,org.codehaus.janino.util.iterator.DirectoryIterator$1,java.io.File)>
<org.sunflow.math.Vector3: org.sunflow.math.Vector3 normalize(org.sunflow.math.Vector3)>
<org.sunflow.core.accel.BoundingIntervalHierarchy: void <init>()>
<org.codehaus.janino.samples.DeclarationCounter: void <init>()>
<org.codehaus.janino.tools.Disassembler: void printConstantPoolEntry(short)>
<org.sunflow.core.Scene: void setShaderOverride(org.sunflow.core.Shader,boolean)>
<org.codehaus.janino.tools.Disassembler: byte[] readByteArray(java.io.InputStream,int)>
<org.codehaus.janino.tools.Disassembler: void print(java.lang.String)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$Statement parseTryStatement()>
<org.sunflow.core.shader.UVShader: void <init>()>
<org.sunflow.SunflowAPI: void parameter(java.lang.String,java.lang.String)>
<org.codehaus.janino.Java$AnonymousClassDeclaration: void <init>(org.codehaus.janino.Location,org.codehaus.janino.Java$Type)>
<org.sunflow.RenderObjectMap$RenderObjectHandle: org.sunflow.core.Instance getInstance()>
<org.sunflow.core.photonmap.CausticPhotonMap: void <init>(org.sunflow.core.Options)>
<org.codehaus.janino.Parser: org.codehaus.janino.Java$VariableDeclarator parseVariableDeclarator()>
<org.sunflow.SunflowAPI: void render(java.lang.String,org.sunflow.core.Display)>
<org.codehaus.janino.UnparseVisitor: void unparseCompilationUnit(org.codehaus.janino.Java$CompilationUnit)>
<org.codehaus.janino.util.Benchmark: void report(java.lang.String,java.lang.Object)>
<org.codehaus.janino.Java$Type: void setEnclosingScope(org.codehaus.janino.Java$Scope)>
<org.sunflow.math.Vector3: void <init>()>
<org.sunflow.core.photonmap.GlobalPhotonMap: void <init>(int,int,float)>
<org.codehaus.janino.tools.Disassembler: void println(java.lang.String)>
<org.codehaus.janino.Java$CompilationUnit$ImportDeclaration: void <init>(org.codehaus.janino.Location)>
